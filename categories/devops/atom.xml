<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | @Lenciel]]></title>
  <link href="http://172.16.121.110:4000/categories/devops/atom.xml" rel="self"/>
  <link href="http://172.16.121.110:4000/"/>
  <updated>2017-05-10T01:29:34+08:00</updated>
  <id>http://172.16.121.110:4000/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[DevOps]]></title>
    <link href="http://172.16.121.110:4000/2017/05/devops-and-the-future-of-jobs/"/>
    <updated>2017-05-10T01:28:52+08:00</updated>
    <id>http://172.16.121.110:4000/2017/05/devops-and-the-future-of-jobs</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>定义</h2>

<p>如果你的Manager对着一堆项目指点江山：“我们要在A项目里做DevOps，我们要B项目也做DevOps，哦，还有那个C项目。”</p>

<p>你心里面难免犯嘀咕：“做DevOps是做什么？”</p>

<p>这很正常。</p>

<p>本座见识过的各种DevOps布道，听众们往往不是大腿一拍醍醐灌顶的神态, 而是一脸困惑欲言又止想问又不知道从何问起的样子。</p>

<p>很多公司的DevOps落地就像我们提到的这位Manager，拉一堆人画一个圈，你们来做DevOps，好像就完成了。</p>

<p>从业多年的你已经有经验，所有没法被很好地翻译成中文的术语，都要小心。比如<a href="/2017/02/bounded-context/">Bounded Context</a>，比如DevOps。</p>

<p>所以你去查，DevOps是什么？</p>

<p>网上有张流传甚广的图：</p>

<p><img src="/downloads/images/2017_05/devops.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这张看起来颇有道理的图其实什么也没有说：测试、开发和运维这三种角色的工作，究竟有什么交集，可以被称为DevOps呢？</p>

<a name="L......"></a>
<h2>其实</h2>

<p>DevOps从2009年被提出，算是顺势：敏捷流程在大量的公司落地以取代过去的瀑布流程。</p>

<p>实施敏捷流程一个主要的诉求就是尽快发布可用的版本，迭代试错。而当时的业务运维部门（Ops）的工作方式是满足不了这样的需要的。</p>

<p>传统的运维，主要考核指标是业务系统的“稳定运行”。所以他们会制定很多的流程甚至惩罚措施，来规避风险。而且，半夜出事儿了，第一时间被呼起来的是他们又不是开发，所以虽然私下里在机器上开了各种端口通了各种隧道方便自己在三亚休假时，也能把产品数据库的备份恢复，但是他们面对业务方总是“铁面无私”的。</p>

<p>开发当然会抱怨：上线慢啊，对线上系统接触不到啊，查个数据库都要找人啊&hellip;</p>

<p>但尽管研发流程“敏捷”了，也没有哪个决策者可以跳出来说运维部门制定出来的九九八十一步的流程可以不走，开发自己部署自己搞就好，因为：</p>

<ol>
<li>研发具备运维知识的人确实很少</li>
<li>出了问题自己要背锅</li>
</ol>


<p>但因为下面几个因素，造成运维这个环节不得不做出相应的改变：</p>

<ol>
<li>云相关的技术日益成熟之后，过去Ops团队需要负责的很多工作都交给了云服务提供商或者内部的基础设施团队</li>
<li>随着分布式系统的日益普遍，微服务架构等各种把业务系统打散拆小搞自治的实践逐渐<a href="/2017/02/the-real-success-by-doing-msa/">成为主流</a>，越来越多的团队<a href="https://speakerdeck.com/charity/keep-calm-and-carry-on-scaling-your-org-with-microservices">要求开发的人必须具备运维</a>的技能</li>
<li>随着容器等技术的成熟，镜像逐步替代软件包，成为了交付的主体：和软件包不同，它集成度更高（对外暴露的只是ip+端口），包含了配置信息，部署更加方便。随着“基础设施代码化”等工作落地，本地的开发环境和线上环境的差异也更小了，降低了部署工作的门槛</li>
</ol>


<p>但面对业务运维日新月异的要求，运维工程师（大多数背景是系统管理员）的技能和视野往往是不够的。于是一种折衷的方案：把部署和运维软件的职责从运维团队开放给别的部门，权力下放的同时责任也共同承担，于是DevOps运动就出现了。</p>

<p>到2012年左右John Wills开始卖<a href="http://itrevolution.com/the-convergence-of-devops/">《Cookbook of DevOps》这本书</a>时，就已经说，DevOps这词包括了：</p>

<ul>
<li>The Agile Infrastructure Thread</li>
<li>The Velocity Thread</li>
<li>The Lean Startup Thread</li>
</ul>


<p>所以DevOps不是职称或者工种，也不特指某个具体内容的工作。</p>

<p>Wikipedia说它是<a href="https://zh.wikipedia.org/wiki/DevOps">文化</a>，Amazon说它是<a href="https://aws.amazon.com/cn/devops/what-is-devops/">文化</a>，Thoughtworks也说它是<a href="https://martinfowler.com/bliki/DevOpsCulture.html">文化</a>。</p>

<p>文化是需要土壤的，软件团队的文化，生长的土壤主要指：</p>

<ul>
<li>组织结构</li>
<li>开发流程</li>
<li>技术栈</li>
</ul>


<p>如果没有相应的土壤，“文化”就只是“文化知识”。拿来对下面的人讲，很难讲清楚，更难落地。</p>

<p>这也是DevOps被很多人反对的原因。</p>

<p>Jeff Knupp觉得这就是在“<a href="https://jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer/">残杀Developer</a>”，Twitter的基础架构工程师Cindy Sridharan也发文<a href="https://medium.com/@cindysridharan/what-is-devops-5b0181fdb953">抨击过</a>把它当成一个工种或者工作内容。</p>

<p>所以，因为这些历史原因，即便是你跟头脑很清晰，认识很正确的人讨论DevOps，也需要问一下他/她的重点是指下面三方面的哪个方面：</p>

<ul>
<li>设施：如何借助基础设施即服务、运维自动化等手段，加快代码部署到生产环境的速度</li>
<li>监控：如何借助日志和监控手段，及时把生产环境的情况反馈到开发团队。</li>
<li>运营：如何借助端到端的埋点、数据采集、分析和可视化，把用户行为反馈到业务</li>
</ul>


<a name="L..............."></a>
<h2>工种的未来</h2>

<p>其实在我眼里，DevOps的出现很早。Google在2003年建SRE团队的时候，Ben Treynor就说（我觉得Ben关于SRE的每句话都值得<a href="https://landing.google.com/sre/interview/ben-treynor.html">认真去看</a>），这个部门的定义是：</p>

<blockquote><p>&ldquo;what happens when a software engineer is tasked with what used to be called operations.&rdquo;</p></blockquote>

<p>所以，多看看大公司里面各种职位的演化，对年轻的朋友们开拓视野，规划自己的发展是很有益处的。</p>

<p>但赶时间的同学不妨听我来多嘴几句。</p>

<a name="L......"></a>
<h3>测试</h3>

<p>在一线公司特别是互联网公司里面，测试的角色早已经发生变化了。Facebook、Google、Amazon的专职测试人员不断缩减，微软更是把SDET (Software Development Engineer in Test) 和SDE（Software Development Engineer）两个职位合并了。国内也是阿里走在前面，接下来各个龙头企业都在跟进。</p>

<p>为什么测试团队会缩编？因为就目前整个软件研发流程而言，软件工程师需要负责代码、单元测试和集成测试的开发。自测完毕代码提交后，CI上还会有自动化的回归测试，通过之后代码被CD系统部署进行功能验证或者灰度发布。</p>

<p>特别是互联网行业，一方面，要构建一个和生产环境一样的stage环境进行测试非常困难，要把生产环境上的问题测出来难度很大；一方面，整个部署和试错的成本，相对传统的如电信，存储软件这样的平台，相当可控，让用户当小白鼠未尝不可。于是，纯粹进行功能验证的测试团队，规模在不断缩减。而开发测试工具测试框架，CI和CD平台的团队慢慢成为了标配。</p>

<p>如果你是测试工程师，应该从聚焦在功能测试，转变为聚焦在测试工具和框架上了。</p>

<a name="L......"></a>
<h3>运维</h3>

<p>先是很多公司效仿Google，把基础设施和运维团队进行了合并，称为SRE。他们的职责包括了构建基础设施，配置管理系统，日志管理系统，容器管理系统，监控等等。</p>

<p>Amazon能够搞出AWS，跟他们内部推崇人人都可以独立地完成编写代码，测试代码，版本管理，部署上线，进行服务监测等任务，从而把整个基础设施乃至整个技术栈都PaaS化了，有很大关系。</p>

<p>所以，随着DevOps运动不断深入，运维需要越来越多的承担起把整个公司的技术栈在开发测试环境和生产环境以PaaS的形式对其他部分交付的工作。</p>

<a name="L......"></a>
<h3>开发</h3>

<p>我很喜欢的Esty的CTO，<a href="https://twitter.com/allspaw">John Allspaw</a>在<a href="https://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/">一个采访</a>里面说过，我们不要开发（Developer），我们只要软件工程师（Software Engineer）。</p>

<p>这一句话，就可以抵一万句了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iowait过高的告警]]></title>
    <link href="http://172.16.121.110:4000/2014/02/hunting-the-iowait-problem-maker/"/>
    <updated>2014-02-24T09:22:00+08:00</updated>
    <id>http://172.16.121.110:4000/2014/02/hunting-the-iowait-problem-maker</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_02/warning_letter.png" title="Don't touch me..." alt="warning letter" /></p>

<p>从Nagios切到<a href="https://www.zabbix.com">Zabbix</a>之后，经常大清早被iowait过高的告警邮件叫醒。因为这套Zabbix监控是本座搭的，所以解决这个问题就只有本座来了&hellip;..哎，不知道是不是把首席运营官给宠坏了。</p>

<a name="iowait........................"></a>
<h2>iowait的定义和计算方式</h2>

<p>iowait的定义为：</p>

<p><blockquote><p>iowait is time that the processor/processors are waiting (i.e. is in an idle state and does nothing), during which there in fact was outstanding disk I/O requests.</p></blockquote></p>

<p>也就是至少有一个I/O在进行时CPU处于<code>idle</code>状态的比例。</p>

<p>我们都知道用<code>vmstat</code>, <code>iostat</code>, <code>sar</code>等命令查看系统状况的时候，CPU有四种比较主要的状态：user, sys, idle和iowait。它们都是表示CPU处于此状态的一个平均比例（其中sar命令是可以用<code>-P</code>具体指定哪个CPU的，其他的命令一般是所有CPU的平均），通常相加应该就是1.</p>

<p>这个比例的统计其实是通过kernel不断的更新计数器然后计算出来的。当时钟中断发生的时候，kernel检查当前CPU是不是idle的。如果不是，就检查正在执行的指令是user space还是kernel space的。如果是user space就给<code>user</code>的计数器加1，kernel space就给<code>sys</code>计数器加1.</p>

<p>类似的，如果CPU是处于idle状态，kernel就检查是不是有I/O操作正在发生（可以是local disk也可以是<code>mount</code>的NFS），如果有就给<code>iowait</code>计数器加1，没有就给<code>idle</code>计数器加1.</p>

<p>当我们运行<code>vmstat</code>或者<code>sar</code>等命令查看时，它们会先读取当前这几个计数器的计数，然后在用户指定的时间里面等待，然后再次读取。因为用户指定的时间里面过去了多少个<code>tick</code>是可以计算的，然后前后计数器的增值也可以计算，就可以算出一个比值。比如如果用户运行的命令是<code>vmstat 2</code>，表示每两秒取样一次，那么：</p>

<ol>
<li>tick是10ms一个，所以总共是200个ticks</li>
<li>计数器的增量/200*100就是每个状态的百分比</li>
</ol>


<a name="iowait........."></a>
<h2>iowait的意义</h2>

<p>这其实比它怎么计算要难理解一些。比如本座之前心里就有一个疑问：既然只是某个process在block，那么系统会schedule其他的事情，这对性能有什么大不了的影响呢？</p>

<p>来看几个例子。</p>

<a name="L........."></a>
<h3>例子一</h3>

<p>假设一个程序进行批量的事务，每个事务都有一个10ms的计算任务，计算出的结果通过同步的方式写到磁盘。由于它写结果的文件是阻塞方式打开的，所以I/O完成之前写操作是不会<code>return</code>的。如果我们假设磁盘系统没有cache，每个物理的I/O需要20ms，那么一个事务需要30ms。也就是每秒33个事务（33 tps）。如果把系统算成只有一个CPU的话，很显然<code>iowait</code>就是66%。</p>

<p>这种情况下，如果我们能改进I/O子系统，比如启用磁盘的缓存，让每次物理的I/O只需要1ms的话，那么<code>iowait</code>就会迅速下降到8%左右。可见这种情况下，<code>iowait</code>直接影响着程序的performance。</p>

<a name="L........."></a>
<h3>例子二</h3>

<p>假设一个磁盘检查的程序运行在系统上，每秒钟读4k的数据。我们假设这个程序的入口是main()，然后读磁盘的函数是read()，main()和read()都是用户态的。read()属于libc.a，会调用kread()这个系统调用来进行物理的I/O，这个时候就进入了kernel态。整个main(),read()和kread执行的时间加起来不长，我们假设是50微秒。而物理的I/O需要多久要看seek的数据有多远，假设需要2-20ms。这样就完全有可能当时钟中断的时候，cpu是idle的，而且I/O正在发生，于是<code>iowait</code>值就达到97-98% (如果每个I/O需要20ms就是99-100%)。</p>

<p>这种情况下，虽然<code>iowait</code>数值非常高，其实这个系统的性能是正常的。</p>

<a name="L........."></a>
<h3>例子三</h3>

<p>假设有两个程序跑在同一个CPU上。一个程序写得有点儿问题，I/O会阻塞10秒左右。另一个则100%的时间都在做计算。由于当前一个程序阻塞起来的时候，后面这个程序被运行了，因此无论什么时候都没有CPU处于idle的状态等I/O，于是<code>iowait</code>一直是0，这时候其实系统的performance是有很大的问题的。</p>

<a name="L........."></a>
<h3>例子四</h3>

<p>假设系统是4核的CPU，运行了6个程序。其中4个程序有70%时间在进行物理的I/O，30%的时间在进行计算任务（假设其中25%在用户态，5%在kernel态）。另外2个程序假设100%时间都在用户态进行计算任务，没有任何I/O操作。</p>

<p>如果我们查看系统的CPU状态，大概可能看到下面的状况:</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       50      10      40       0
      1       50      10      40       0
      2      100       0       0       0
      3      100       0       0       0
      -       75       5      20       0
</code></pre>

<p>如果我们把相同的6个程序跑到一个6核的机器（相同的CPU和磁盘配置），那么可以简单的认为会有下面的结果：</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       25       5      70       0
      1       25       5      70       0
      2       25       5      70       0
      3       25       5      70       0
      4      100       0       0       0
      5      100       0       0       0
      -       50       3      47       0
</code></pre>

<p>也就是说，同样的程序跑在不同的系统上，iowait增加了一倍多，而这个时候其实没有什么performance问题，只不过是系统还能做更多的计算工作。</p>

<a name="L......"></a>
<h3>结论</h3>

<ul>
<li>CPU处于<code>iowait</code>状态，并不说明CPU不能运行其他的程序</li>
<li><code>iowait</code>偏高只能说明系统这个时刻还能进行更多的计算任务，至于是不是出现了performance问题，需要进一步分析才知道</li>
</ul>


<a name="L..........................."></a>
<h2>找出造成问题的进程</h2>

<p>虽然每次都是6点半多少说明应该是某个cron任务（因为机器上没有其他自定义的定时任务）但没法具体知道究竟是哪个。</p>

<p>最简单的办法当然是出问题的时候用<code>iotop</code>命令来看了 。</p>

<pre><code> # iotop
 Total DISK READ: 8.00 M/s | Total DISK WRITE: 20.36 M/s
  TID PRIO USER DISK READ DISK WRITE SWAPIN IO&gt; COMMAND
 15758 be/4 root 7.99 M/s 8.01 M/s 0.00 % 61.97 % bonnie++ -n 0 -u 0 -r 239 -s 478 -f -b -d /tmp
</code></pre>

<p>但是谁又会在6点多起来干这种事情。除开修改系统时间重现问题，还可以通过ps命令查看记录处于<code>D</code>状态的进程来找到。</p>

<p><code>ps</code>命令输出里面对<code>PROCESS STATE CODES</code>的定义是：</p>

<pre><code> D uninterruptible sleep (usually IO)
 R running or runnable (on run queue)
 S interruptible sleep (waiting for an event to complete)
 T stopped, either by a job control signal or because it is being traced.
 W paging (not valid since the 2.6.xx kernel)
 X dead (should never be seen)
 Z defunct ("zombie") process, terminated but not reaped by its parent.
</code></pre>

<p>处于等待I/O完成状态的进程一般就是<code>D</code>，所以可以通过tmux起一个sessio来跑下面的命令：</p>

<pre><code>    while true; do date; ps auxf | awk '{if($8=="D") print $0;}'; sleep 1; done &gt; /var/log/ps.log
</code></pre>

<p>然后在又一个这样的6点半：</p>

<p><img src="/downloads/images/2014_02/zabbix_cpu_util.png" title="Don't touch me..." alt="warning letter" /></p>

<p>去日志里面查看：</p>

<pre><code>$ cat /var/log/ps.log | grep D

root      7585  7.9  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</code></pre>

<p>嗯，原来是<code>/usr/bin/updatedb.mlocate</code>。Google了一下<a href="" title="http://ubuntuforums.org/showthread.php?t=1243951&amp;page=2&amp;p=7844783#post7844783">^1</a>发现其实关掉也没什么：</p>

<pre><code>sudo killall updatedb.mlocate
sudo chmod -x /etc/cron.daily/mlocate
</code></pre>

<p>整个世界清静了。</p>
]]></content>
  </entry>
  
</feed>
