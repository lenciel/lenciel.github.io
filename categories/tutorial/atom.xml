<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-04-14T15:06:07+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (2)]]></title>
    <link href="http://lenciel.com/2014/08/django-1-dot-7-migrations-part-2/"/>
    <updated>2014-08-11T03:59:47+08:00</updated>
    <id>http://lenciel.com/2014/08/django-1-dot-7-migrations-part-2</id>
    <content type="html"><![CDATA[<p>在应用开发的过程中，我们会遇到migration主要分为：</p>

<ol>
<li>Schema Migrations：数据库schema的变化，也就是我们前面<a href="http://lenciel.com/2014/08/django-1-dot-7-migrations/">讨论的内容</a></li>
<li>Data Migrations：数据的变化，比如需要批量变更数据或者备份在其他地方的历史数据</li>
</ol>


<p>第二种是没法敲几条命令让Django自动帮你完成其他的事情的，而是需要手动使用<code>RunPython</code>，这里具体说一下做法。</p>

<p>还是以之前的那个项目来作为例子，我们首先创建一个migration file：</p>

<pre><code class="bash">$ python manage.py makemigrations --empty ts_data

Migrations for ts_data:
  0003_auto_20140811_0110.py:
</code></pre>

<p>它的内容如下：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('ts_data', '0002_auto_20140805_1525'),
    ]

    operations = [
    ]
</code></pre>

<p>我们在里面加入一个<code>RunPython</code>的部分，来导入数据：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from ts_data.models import PingPongPrice


def load_data(apps, schema_editor):
    PingPongPrice(date=date(2014,07,29),
         price=12.00,
         ).save()
    PingPongPrice(date=date(2014,01,29),
         price=8.00,
         ).save()


class Migration(migrations.Migration):

    dependencies = [
        ('ts_data', '0002_auto_20140805_1525'),
    ]

    operations = [migrations.RunPython(load_data)]
</code></pre>

<p>如果你觉得：咦，这样导入数据不是有点儿像用<code>syncdb</code>然后导入<code>fixture</code>么？的确，从效果上它们是一样的，个人觉得，对于测试环境我们可以继续使用fixture来保存mock的测试数据，然后使用<code>loaddata</code>命令手动加载测试数据。对生产环境使用migration来导入数据更好，和使用<code>loaddata</code>命令来导入fixture相比，它不需要手动操作，并且由于是通过<code>RunPython</code>来进行，实际上可以对数据进行各种需要的处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (1)]]></title>
    <link href="http://lenciel.com/2014/08/django-1-dot-7-migrations/"/>
    <updated>2014-08-05T11:12:41+08:00</updated>
    <id>http://lenciel.com/2014/08/django-1-dot-7-migrations</id>
    <content type="html"><![CDATA[<p>Django 1.7已经发布一段时间了，基本上这个版本最主要的改动就是加入了<code>migrations</code>。</p>

<p>在过去，几乎所有的Django项目都是用South来处理数据变更的。而在Django1.7版本，South的作者Andrew Godwin把<code>migrations</code>加到了Django Core里面。</p>

<p>So&hellip;</p>

<a name="Migrations............"></a>
<h1>Migrations是什么？</h1>

<p>Migrations其实就是一堆帮助你完成数据库变更和数据迁移的命令，使得你可以用“Django”的方式来管理和变更数据库的schema。比如，当你的model改变了，你需要在数据库里面去重命名一列时，你不会想跑到命令行下面去敲SQL吧？特别是，如果你要变更的数据库是线上的，有几百万用户数据，你应该更不愿意搭上这种活了吧？</p>

<p>Migrations让事情变得简单可控：</p>

<ol>
<li>它使得数据库schema的调整可以通过Django命令来完成</li>
<li>它使得数据库的schema和对应的model的变更被track起来：整个历史都可以版本化在Git里面</li>
<li>提供了一套匹配schema和对应的fixture的机制</li>
<li>如何和CI搭配起来，可以保证代码和数据一致性</li>
</ol>


<a name="Migrations......"></a>
<h1>Migrations上手</h1>

<a name="L.................."></a>
<h2>创建测试项目</h2>

<p>首先创建一个virtualenv和django项目：</p>

<pre><code class="bash">$ mkvirtualenv django17
$ pip install https://www.djangoproject.com/download/1.7c2/tarball/
$ django-admin.py startproject django_migration_test
$ cd django_migration_test
$ python manage.py startapp ts_data
</code></pre>

<p>然后创建一个model到subl ts_data/models.py：</p>

<pre><code class="python">from django.db import models

# Create your models here.
class PingPongPrice(models.Model):
    date = models.DateTimeField(auto_now_add=True)
    price = models.DecimalField(max_digits=5, decimal_places=2)
</code></pre>

<p>subl django_migration_test/settings.py</p>

<pre><code class="python">INSTALLED_APPS = (
    ...
    'ts_data',
)
</code></pre>

<a name="L......Migrations"></a>
<h2>创建Migrations</h2>

<p>使用下面的命令可以创建ts_data这个app的Migrations。当然，和大多数Django命令一样，如果你不显式的指定，就</p>

<pre><code>(django17) ○ python manage.py makemigrations ts_data
Migrations for 'ts_data':
  0001_initial.py:
    - Create model PingPongPrice
</code></pre>

<a name="L......Migrations"></a>
<h2>应用Migrations</h2>

<pre><code class="bash">(django17) ○ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, contenttypes, ts_data, auth, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying sessions.0001_initial... OK
  Applying ts_data.0001_initial... OK
</code></pre>

<p>注意，因为是一个全新的app，这条命令会先建表，换句话说，之前版本的<code>syncdb</code>命令可以不用了。整个使用流程应该变成：</p>

<ol>
<li>建立或者更新一个model</li>
<li>运行<code>python manage.py makemigrations &lt;app_name&gt;</code></li>
<li>运行<code>python mange.py migrate &lt;app_name</code>来应用创建的Migrations</li>
<li>重复前面的步骤</li>
</ol>


<a name="L................................."></a>
<h1>不是新建的项目如何使用</h1>

<p>大多数情况下我们都是从旧版本的Django迁移过来，也就意味着是从South迁移过来。这种情况下需要：</p>

<ol>
<li>删除所有的South创建的migration文件</li>
<li>运行 <code>./manage.py makemigrations</code>，Django会根据你当前model来创建那份<code>initial migrations file</code></li>
<li>运行<code>./manage.py migrate</code>，Django会把已经存在的数据库table当成是migration的产物，完成整个migration</li>
</ol>


<p>如果你运行上面的命令遇到错误，就需要运行 <code>./manage.py migrate --fake &lt;appname&gt;</code> 做一个fake的migration。</p>

<p>如果你不想丢掉过去的South维护的历史记录，可以同时使用South和Django Migrations：升级South到1.0，然后<a href="http://www.aeracode.org/2014/7/1/end-era/">参考这篇文章的做法</a>。</p>

<a name="South...Django.Migrations......"></a>
<h1>South和Django Migrations比较</h1>

<p>对比一下South和Django Migrations的workflow，可能会更加清晰：</p>

<a name="L............migrations"></a>
<h2>首次全新migrations</h2>

<p>South:</p>

<pre><code class="python">./manage.py syncdb
./manage.py schemamigration &lt;appname&gt; --initial
</code></pre>

<p>Django Migrations:</p>

<pre><code class="python">./manage.py makemigrations &lt;appname&gt;
</code></pre>

<a name="L......migrations"></a>
<h2>应用migrations</h2>

<p>South:</p>

<pre><code class="python">./manage.py migrate &lt;appname&gt;
</code></pre>

<p>Django Migrations:</p>

<pre><code class="python">./manage.py migrate &lt;appname&gt;
</code></pre>

<a name="L.........migrations"></a>
<h2>非首次migrations</h2>

<p>South:</p>

<pre><code class="python">./manage.py schemamigration &lt;appname&gt; --auto
</code></pre>

<p>Django Migrations:</p>

<pre><code class="python">./manage.py makemigration &lt;appname&gt;
</code></pre>

<p>可以看到，大概是因为出自同一个作者的原因，Django Migrations基本上follow了South的工作流程，只不过是命令更加简洁和清晰了。</p>

<a name="L............"></a>
<h1>更多细节</h1>

<a name="L..................Django.Migrations........."></a>
<h2>哪些变化会被Django Migrations找到？</h2>

<p>如果你再次运行<code>python manage.py migrate</code>，会发现什么都没有发生：这是因为在项目的数据库中有一张<code>django_migrations</code>仍然被更新。表，记录了哪些Migrations已经被应用过了：无论是运行了migrate还是fake的，这个表都会被插入一条记录。比如从South升级到使用Django自带的MigrationsDjango会检查是否有更新。如果没有，它就fake一次，但<code>django_migrations</code>仍然被更新。</p>

<p>在少数情况下，确实有需要再次运行某个特定的Migrations，我们可以在<code>django_migrations</code>里面把这个记录删除掉。</p>

<p>在极少数情况下，如果你有需要回退到特定的版本，比如最初的zero版本，可以用类似<code>python manage.py migrate &lt;app_name&gt; zero</code>的语法。</p>

<a name="Migration......."></a>
<h2>Migration 文件</h2>

<p>在我们运行<code>python manage.py migrate &lt;app_name&gt;</code>究竟发生了什么？实际上，Django会创建一个python文件来描述如何完成这个migration，以前面的ts_data为例，这个文件位于<code>ts_data/migrations/0001_initial.py</code>，内容如下：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PingPongPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('price', models.DecimalField(max_digits=5, decimal_places=2)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
    ]
</code></pre>

<p>可以看到，是完全可读的Python代码。这也是为什么推荐把整个<code>migrations</code>文件夹加入版本控制的原因：这样你的应用经过了怎样的变更就变得可以回溯了。</p>

<a name="Migration.Dependencies"></a>
<h2>Migration Dependencies</h2>

<p>上面的源代码有一些值得注意的地方。</p>

<p>首先，所有的migration file里面都有一个<code>Migration()</code>类，继承自<code>django.db.migrations.Migration</code>。在我们运行<code>migrate</code>命令的时候，运行的就是这个类。</p>

<p>这个类有两个list，一个是<code>dependencies</code>，一个是<code>operations</code>。</p>

<p><code>dependencies</code>定义了这个migration之前必须完成的操作，比如你的model里面包括一个外键，那么你得首先有对应的table。比如，假设外键指向的model在<code>app_1</code>，那么<code>dependencies</code>会像这样：</p>

<pre><code class="python">dependencies = [
   ('main', '__first__'),
]
</code></pre>

<p>如果没有前置条件，这个list可以为空。但大多数时候<code>dependencies</code>是指向其他的migration文件。比如：</p>

<pre><code class="python">dependencies = [
    ('main', '0001_initial'),
]
</code></pre>

<p>这里使用list的结果是，所有的依赖是没有顺序的，也就是说你不需要按照0001、0002、0003的顺序来排列所有的依赖。</p>

<a name="Migration.Operations"></a>
<h2>Migration Operations</h2>

<p>这个list定义的就是migration完成的操作，可以分为下面的这些种类：</p>

<ul>
<li>CreateModel</li>
<li>DeleteModel</li>
<li>RenameModel</li>
<li>AlterModelTable</li>
<li>AlterUniqueTogether</li>
<li>AlteIndexTogether</li>
<li>AddField</li>
<li>RemoveField</li>
<li>RenameField</li>
<li>RunSQL</li>
<li>RunPython</li>
</ul>


<p>前面的那些操作是整个Django Migrations的核心：因为需要对各种不同的数据库做适配。而后面的两个操作则是灵活度非常高的，几乎可以干任何事情。</p>

<a name="L......"></a>
<h1>实例</h1>

<p>让我们试试把<code>PingPongPrice</code>的<code>price</code>这个field的<code>max_digits</code>改成8位的（通货膨胀嘛），然后再次运<code>makemigrations</code>行命令:</p>

<pre><code class="bash">(django17) ○ python manage.py makemigrations ts_data
Migrations for 'ts_data':
  0002_auto_20140805_1525.py:
    - Alter field price on PingPongPrice
</code></pre>

<p>可以看到这次生成的migration文件里面有<code>AlterField</code>操作：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('ts_data', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='PingPongPrice',
            name='price',
            field=models.DecimalField(max_digits=8, decimal_places=2),
        ),
    ]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does iBeacons Work]]></title>
    <link href="http://lenciel.com/2014/05/how-does-ibeacons-work/"/>
    <updated>2014-05-14T15:19:59+08:00</updated>
    <id>http://lenciel.com/2014/05/how-does-ibeacons-work</id>
    <content type="html"><![CDATA[<p>iBeacons这个怪怪的单词<a href="https://www.google.com/search?q=%E6%9C%80%E8%BF%91%E5%87%BA%E9%95%9C%E7%8E%87%E5%BE%88%E9%AB%98+site%3A36kr.com&amp;oq=%E6%9C%80%E8%BF%91%E5%87%BA%E9%95%9C%E7%8E%87%E5%BE%88%E9%AB%98+site%3A36kr.com&amp;aqs=chrome..69i57.5408j0j7&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8#newwindow=1&amp;q=ibeacons+site:36kr.com&amp;safe=off">最近出镜率很高</a>。它可以用的场景很多，考勤打卡，室内导航，各种关联位置的推送以及我们现在还想不到诡异的应用。但虽然满坑满谷的文章介绍如何应用iBeacons，但它工作的原理究竟是什么样的呢？</p>

<a name="Bluetooth.LE"></a>
<h1>Bluetooth LE</h1>

<p><a href="http://www.bluetooth.com/Pages/Low-Energy.aspx">Bluetooth Low Energy</a>，也就是低功耗蓝牙，经常被缩写成BLE。它其实是2010年颁布的Bluetooth 4.0标准的一部分：说准确点儿就是由Nokia提出的本来叫<code>Wibree</code>的那部分。</p>

<p>话说11年本座给一个银行做押运的系统，需要在Android手机上加外设，让押运员持卡验明正身。当时考察了好些技术，蓝牙，NFC，IC卡&hellip;蓝牙被放弃的原因就是供电太麻烦而4.0低功耗的设备市面上根本就找不到。因为虽然标准是2010年就颁布了，但是4.0的协议向下不兼容，设备更新没有那么快。一晃几年过去了，你还是能看到市面上有三种主要的蓝牙设备型号：</p>

<ul>
<li>Bluetooth: 仅支持<code>传统</code>蓝牙</li>
<li>Bluetooth Smart Ready: <code>传统</code>和<code>低功耗</code>通吃的蓝牙</li>
<li>Bluetooth Smart: 仅支持<code>低功耗</code>蓝牙</li>
</ul>


<p><img src="/downloads/images/2014_05/bluetooth_smart_ready_logo.jpg" title="Don't touch me..." alt="bluetooth smart ready logo" /></p>

<p>比较老的设备，以及大部分的汽车，家电等等，是仅支持传统意义上的Bluetooth的。</p>

<p>比较新的手机（iPhone 4S+，Samsung G3+），平板，笔记本等等都已经支持了完整的Bluetooth 4.0，所以都可以算是"Smart Ready"的。</p>

<p>Beacons，如前面所述，是仅支持低功耗这部分的标准，所以就是"Smart"的。这些设备一般一颗纽扣电池就可以保证它运行2年左右，发射频率和传统蓝牙一样都是2.4GHz-2.4835GHz，在无遮挡的情况下100米内都有信号，但传输速率比传统蓝牙慢：当然，低功耗蓝牙设计的目的也不是用来输送大量的数据。</p>

<a name="BLE......"></a>
<h1>BLE通信</h1>

<p>BLE通信主要是两种模式：<code>Advertising</code>和<code>Connecting</code>。</p>

<p><code>Advertising</code>是单向的。希望被发现的设备自主发射间隔从20ms到10s不等的数据包出来。发射间隔越短，电池寿命就会越短，但同时也会更快的被找到。数据包的组成为：</p>

<ul>
<li>1 byte</li>
<li>4 bytes access adress</li>
<li>2-39 bytes advertising channel PDU</li>
<li>3 bytes CRC</li>
</ul>


<p><img src="/downloads/images/2014_05/bluetooth_le_packet.png" title="Don't touch me..." alt="bluetooth le packet" /></p>

<p>其中<code>access address</code>在这种模式下是固定的<code>0x8E89BED6</code>。换句话说，<code>Advertising</code>模式就是对外以一个固定的读取地址和固定的时间间隔不断的发送数据。</p>

<p>PDU的2个bytes的头包含了<code>size/type</code>等payload的信息，接着是device的MAC地址，最后是最多31个bytes的实际payload数据。</p>

<p>当一个设备被找到之后，连接可以切换到<code>Connecting</code>模式。这种情况下，设备可以对外提供可读写的服务（被称为GATT profile）。比如一个智能热水器，可以提供一个服务让你读取以及设置出水的温度。</p>

<p>关于<code>Connecting</code>到BLE设备，苹果的教程或者更专业的EE times的介绍都可以看看。但其实beacons没有使用<code>Connecting</code>模式，它只工作在<code>Advertising</code>模式下。</p>

<a name="beacons............BLE"></a>
<h1>beacons如何使用BLE</h1>

<p>beacons仅仅工作在<code>Advertising</code>模式下。因此，可以说所谓的<code>iBeacons</code>就是iOS下对BLE的<code>Advertising</code>工作模式里数据的定义和封装。</p>

<p>以Estimote的beacon为例，下面是它的PDU数据（使用XCode的<a href="http://stackoverflow.com/questions/5863088/bluetooth-sniffer-preferably-mac-osx">插件</a>可以对蓝牙设备抓包）：</p>

<pre><code>02 01 06 1A FF 4C 00 02 15 B9 40 7F 30 F5 F8 46 6E AF F9 25 55 6B 57 FE 6D 00 49 00 0A C5
</code></pre>

<p>可以看到整个payload数据是30bytes，非常符合协议最多31bytes的要求。实际上，这份数据的格式的确是苹果<a href="http://stackoverflow.com/questions/18906988/what-is-the-ibeacon-bluetooth-profile">精心设计</a>了的：</p>

<pre><code>02 01 06 1A FF 4C 00 02 15: iBeacon prefix (fixed)
B9 40 7F 30 F5 F8 46 6E AF F9 25 55 6B 57 FE 6D: proximity UUID (here: Estimote’s fixed UUID)
00 49: major
00 0A: minor
C5: 2’s complement of measured TX power
</code></pre>

<p><img src="/downloads/images/2014_05/bluetooth_le_ibeacon_packet.png" title="Don't touch me..." alt="bluetooth le ibeacon packet" /></p>

<p>换句哈说，如果你想试玩一下iBeacons技术，在买到beacon之前，其实你手边的任何新一点儿的iPhone或者<a href="http://developer.radiusnetworks.com/2013/10/09/how-to-make-an-ibeacon-out-of-a-raspberry-pi.html">Mac设备都可以拿来作为iBeacon</a>的发射端或者接收端。当然，<a href="http://developer.radiusnetworks.com/2013/10/09/how-to-make-an-ibeacon-out-of-a-raspberry-pi.html">万能的树莓</a>也可以改造成beacon。</p>

<a name="iBeacon............"></a>
<h1>iBeacon数据格式</h1>

<p><code>02 01 06 1A FF 4C 00 02 15</code>是固定不变的prefix。</p>

<p><code>Proximity UUID</code>用来标识beacon。比如商店里面一批beacon都是用来提供打折活动的推送给顾客，那么这批beacon的Proximity UUID就应该是一样的。</p>

<p><code>Major Number</code> (2 bytes，例子里面是<code>0×0049</code>，也就是73) 是用来对一批beacon进行分组的。比如商店里面的所有的beacon可以配置成相同的<code>Major Number</code>。</p>

<p><code>Minor Number</code> (2 bytes，例子里面是<code>0x000A</code>，也就是10)用来标识单个的beacon。因为商店里面每个beacon都有不同的<code>Minor Number</code>，才能知道顾客是处在什么位置。</p>

<a name="L......"></a>
<h1>测距</h1>

<p>数据里面的最后一位，<code>TX Power</code>，就是用来表征你离某个beacon的距离的。它测距离主要就是用所谓的RSSI(Received Signal Strength Indication)去算，这个算法在iOS里面是已经集成了的，即便是需要在Android平台上面实现一遍<a href="http://stackoverflow.com/questions/20416218/understanding-ibeacon-distancing">也不是那么的复杂</a>。</p>

<p>另外需要注意的就是，无线信号总会因为障碍物以及其他的信号源更快的衰减。所以测算出来的距离只是一个有大概。</p>

<a name="iOS......"></a>
<h1>iOS集成</h1>

<p>苹果既然敢在beacon前面加个i当然是做了很多增强的。对应用开发者来说，最主要的就是当用户靠近iBeacons设备的时候，App即使不在前台也可以被唤醒，并发送notification给用户。</p>

<p>需要注意的是，因为beacon是周期性的发送，而手机在进入省电模式的时候探测蓝牙型号也是周期性的。这两个周期很可能会踩到边界，造成在实际应用中，有的手机<a href="http://developer.radiusnetworks.com/2013/11/13/ibeacon-monitoring-in-the-background-and-foreground.html">甚至会需要15分钟</a>左右的时间才能找到beacon。</p>

<p>iOS下详细的应用开发教程可以见<a href="http://www.cocoanetics.com/2013/11/can-you-smell-the-ibeacon/">这里</a>。更多的例子可以参考设备商Estimote的iOS SDK和Android。</p>

<a name="L.................."></a>
<h1>如何购买设备</h1>

<p>现在整个供货情况还是接不上趟的。我的<a href="http://estimote.com/">Estimote</a>已经订了4个多礼拜了还杳无音讯。因此最快的上手方案仍然是改造你的手机或者用Raspberry Pi自己搭个玩。但是如果你不满足（一般是满足不了的）这种玩法可以试试：</p>

<ul>
<li>预订<a href="http://estimote.com/">Estimote</a>的beacon: 99刀3个</li>
<li><a href="http://kontakt.io/">Kontakt</a>的beacon: 99刀4个，279刀10个</li>
<li><a href="http://www.radiusnetworks.com/">RadiusNetworks</a>的树莓套件: 99刀1个</li>
<li><a href="http://redbearlab.com/ibeacon/">RedBearLab</a>的Arduino套件： 30刀1个</li>
<li><a href="http://bleu.io/">Bleu</a>的USB转iBeacon转接头：40刀1个，150刀5个</li>
</ul>


<p>另外，高通也有做自己的解决方案叫<a href="https://www.gimbal.com/">Gimbal</a>，不但提供了Android和iOS两套SDK，价格也很平易近人：5刀一个，值得拥有，:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxen introduction]]></title>
    <link href="http://lenciel.com/2013/03/boxen-introduction/"/>
    <updated>2013-03-31T08:28:00+08:00</updated>
    <id>http://lenciel.com/2013/03/boxen-introduction</id>
    <content type="html"><![CDATA[<p>如果列举开发人员在工作中最讨厌的部分，估计搭建开发环境得票率肯定可以排进前三。年初Github开源了自己内部的Privision框架<a href="http://boxen.github.com/">Boxen</a>，趁着新笔记本需要起轿，尝试了一把。</p>

<a name="Boxen............"></a>
<h2>Boxen框架简介</h2>

<p>Boxen基于大红大紫的<a href="https://puppetlabs.com/">Puppet</a>，但和后者目前主要侧重于服务器的Privision不同，Boxen更主要是用于组织内工作人员使用的机器的配置和管理流程标准化。</p>

<p>配置流程标准化比较好理解：拿到一台机器，敲一个命令就把所有需要的软件装上并且把环境配置好。按Boxen主页上的说法，Github新员工入职后领到电脑后，用Boxen配置环境到开始写代码只需要30分钟。</p>

<p>管理流程标准化听起来比较抽象，你可以想象这么一个场景：如果公司里面所有的机器都是是用Boxen来配置的。当发现Chrome浏览器的Java插件会导致安全问题的时候，IT部门可以push一个禁用Chrome里Java插件的change到boxen repo。所有的员工只需要和repo做一次sync，自己的Chrome里的Java插件就被禁用了。这显然比传统的发邮件要求大家去禁用Chrome浏览器Java插件简单有效。</p>

<p>简单地概括Boxen的思路，就是像对待产品一样对待开发环境。使用包括版本控制，持续集成这些手段，在团队中维护一个开发环境的仓库。如果你想更深入地了解Boxen的设计哲学，可以看看这个slide：<a href="https://speakerdeck.com/wfarr/boxen">BOXEN by Will Farrington</a>。</p>

<a name="L......Boxen"></a>
<h2>使用Boxen</h2>

<p>首先确保你的初始环境是干净的：</p>

<ul>
<li>如果你手上是台新机器，它是干净的</li>
<li><p>如果不是一台新机器，请先备份，然后：</p>

<ul>
<li>卸载Homebrew</li>
<li>删除所有的 <code>dotfiles</code> 和 <code>vimfiles</code> ，比如<a href="https://github.com/robbyrussell/oh-my-zsh">Oh my zsh</a>或者<a href="https://github.com/spf13/spf13-vim">spf13 vim</a>等</li>
<li>删除 <code>.rbenv</code> 或者 <code>.rvm</code> 文件夹</li>
<li><code>chsh -s /bin/bash</code> 把SHELL改回 <code>bash</code></li>
</ul>
</li>
</ul>


<p>接下来就是安装一些必须的软件，比如Git和Xcode的 <code>Command Line Tools</code>。</p>

<a name="Xcode.CLT"></a>
<h3>Xcode CLT</h3>

<ul>
<li>升级Xcode</li>
<li>启动Xcode，在Preferences里面选择下载</li>
<li>安装"Command Line Tools"</li>
</ul>


<p><img src="/downloads/images/xcode_clt.png" title="Don't touch me..." alt="Xcode Command Line Tools" /></p>

<a name="L......FireVault2"></a>
<h3>打开FireVault2</h3>

<p>Boxen默认会希望硬盘信息是被加密的：</p>

<p><img src="/downloads/images/turn_on_fire_vault.png" title="Don't touch me..." alt="Turn on FireVault2" /></p>

<a name="Fork.our-boxen"></a>
<h3>Fork our-boxen</h3>

<p><a href="https://github.com/boxen/our-boxen">our-boxen</a>是Boxen提供的基线repo，也是整个Boxen框架里面文档最全的一个repo。</p>

<p>首先按照repo说明中的方式来clone和配置本地repo：</p>

<pre><code class="bash">sudo mkdir -p /opt/boxen    
sudo chown ${USER}:admin /opt/boxen    
git clone https://github.com/boxen/our-boxen /opt/boxen/repo    
cd /opt/boxen/repo    
git remote rm origin    
git remote add origin     
git push -u origin master
</code></pre>

<p>这种clone下来再配置origin的方式类似于fork，区别是fork下来的repo一定是public的，而这样得到的repo可以是private的。可以想象如果你使用boxen来完成对公司电脑的配置，多少都会有一些敏感信息在repo里面，所以private的repo是非常必要的。</p>

<p>接下来在 <code>/opt/boxen/repo</code> 路径下运行 <code>script/boxen</code> 即可完成boxen默认的模块的安装。默认的模块定义在 <code>/opt/boxen/repo/Puppetfile</code> 中：</p>

<pre><code class="ruby">github "dnsmasq",  "1.0.0"
github "gcc",      "1.0.0"
github "git",      "1.0.0"
github "homebrew", "1.0.0"
github "hub",      "1.0.0"
github "inifile",  "0.9.0", :repo =&gt; "cprice-puppet/puppetlabs-inifile"
github "nginx",    "1.0.0"
github "nodejs",   "1.0.0"
github "nvm",      "1.0.0"
github "ruby",     "1.0.0"
github "stdlib",   "3.0.0", :repo =&gt; "puppetlabs/puppetlabs-stdlib"
github "sudo",     "1.0.0"
</code></pre>

<p>可以看到Github大量用到 <code>ruby</code> 和 <code>nodejs</code> 。在运行boxen的时候，可能会看到大量的警告信息：</p>

<pre><code>Warning: Could not retrieve fact fqdn
Warning: Host is missing hostname and/or domain: suttlemac
</code></pre>

<p>然后伴随着 <code>https://rubygems.org</code> 失败。这些主要是因为GFW，你可以使用镜像，比如淘宝的。具体方式可以<a href="http://ruby.taobao.org/">查看这里</a>。</p>

<p>注意你还应该把下面的脚本加到 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code> :</p>

<pre><code class="bash">[ -f /opt/boxen/env.sh ] &amp;&amp; source /opt/boxen/env.sh
</code></pre>

<p>然后新开一个shell运行 <code>boxen --env</code>，结果一切正常你的box就配置完毕了。</p>

<a name="L...............box"></a>
<h2>自定义你的box</h2>

<p>默认安装的内容当然不一定对你的口味，如果你用过Puppet那么自定义Boxen的box是非常简单的。不过埋头开干之前还是可以check一下是不是已经<a href="https://github.com/boxen">有人做好了</a>。这些做好的repo可以直接通过修改配置文件是用，因为Boxen对librarian-puppet做了wrapper，对fetch各种module也做了wrapper。</p>

<p>比如我们要安装Chrome和Skype，打开 <code>/opt/boxen/repo/Puppetfile</code> 并添加两行：</p>

<pre><code class="ruby">...
github "sudo",     "1.0.0"

# Add new modules
github "skype",    "1.0.2"
github "chrome",   "1.1.0"
</code></pre>

<p>这里安装的module的声明规则是 <code>github "{name}", "{version}"</code>。 其中 <code>name</code> 的取法是在 <code>Puppetfile</code> 里面定义的：</p>

<pre><code class="ruby">def github(name, version, options = nil)
  options ||= {}
  options[:repo] ||= "boxen/puppet-#{name}"
  mod name, version, :github_tarball =&gt; options[:repo]
end
</code></pre>

<p>因此<a href="https://github.com/boxen/puppet-skype">puppet-skype</a>对应的就是 <code>skype</code> 。</p>

<p>而 <code>version</code> 则是对应具体repo的tag，比如<a href="https://github.com/boxen/puppet-skype">puppet-skype</a>对应的<a href="https://github.com/boxen/puppet-skype/tags">tag</a>有：</p>

<p><img src="/downloads/images/version_tag.png" title="Don't touch me..." alt="Version and tags" /></p>

<p>如果你的repo不是在github也很简单，只需要指定repo的位置即可。比如如果你自己的Skype是放在Bitbucket上的:</p>

<pre><code class="ruby">   mod "skype", :git =&gt; "git@bitbucket.org:yourusername/puppet-skype.git" 
</code></pre>

<p>在 <code>Puppetfile</code> 里面完成的声明主要是让Boxen（实际上是Puppet）知道去哪里找安装和配置文件。要告诉Boxen安装Skype还需要在 <code>manifests/site.pp</code> 里面 <code>include</code> 需要安装的module：</p>

<pre><code class="ruby">...    
    node default {      
        include dnsmasq      
        include ruby      
        include git      
        include hub      
        include homebrew      
        include skype    
    }
...
</code></pre>

<p>接下来只需要运行 <code>boxen</code> (如果你运行了 <code>boxen --env</code> 命令会在可执行路径里)或者是 <code>boxen --debug</code> (如果你需要更多的verbose信息)，指定的软件就安装上了。</p>

<a name="What.s.Next"></a>
<h2>What&rsquo;s Next</h2>

<p>目前为止主要是解释了如何使用Boxen来安装一些基本软件。目前本座机器上使用Boxen安装的软件包括：</p>

<pre><code class="ruby">github "ccleaner", "1.0.1"
github "iterm2",   "1.0.2"
github "skype",    "1.0.2"
github "chrome",   "1.1.0"
github "sublime_text_2",   "1.1.0"
github "jumpcut",   "1.0.0"
</code></pre>

<p>接下来的计划就是建立项目组自己的repo，把诸如输入法、dotfiles、Java开发环境和Django开发环境这些东西的安装和配置都自动化了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Start With Python]]></title>
    <link href="http://lenciel.com/2012/05/get-start-with-python/"/>
    <updated>2012-05-28T22:15:00+08:00</updated>
    <id>http://lenciel.com/2012/05/get-start-with-python</id>
    <content type="html"><![CDATA[<p>刚刚开始使用Python开发的新手，遇到的第一个瓶颈（常常）就是缺乏对整个Python生态系统的理解。大家总是在网上搜索完成这件事或者那件事的“标准做法”，就像我们使用其他编程语言的时候常常需要掌握的一样。</p>

<p>在和几个朋友开始iDVR的开发的时候，我们在内部Wiki上维护过一个Python中常见问题列表。我们的目标是随着项目的不断进步，这个内部的wiki能够变成一个豪华的Q&amp;A索引，但是事实证明项目一忙起来就没有人去写Wiki了。</p>

<p>最近陆续有朋友问一些Python相关的问题，想想其实要用三言两语说清楚并不容易，就决定在那份wiki的基础上自己写一个版本，给那些刚开始使用Python（从来没有编过程的读起来可能没啥帮助）的同学。</p>

<a name="L.strong.Warning..strong."></a>
<h4><strong>Warning</strong></h4>

<p>Python编程是个大话题，不是这里讨论的内容。如果你没有太多编程经验，应该先去看一点儿Python的<a href="http://learnpythonthehardway.org/" target="_blank">入门书籍</a>。</p>

<p>另外，这片文章是基于Windows（最好是Win7 32bit）操作系统。潮人请不要问为啥不是Mac或者Linux，因为本座主要用的机器（包括码这篇Blog）都是用Win7 32bit。不过除开环境搭建，这里提到的大部分概念对其他系统都是适用的。</p>

<p>如果你有环境搭建上的问题，最靠谱的提问的地方不是CSDN或者百度知道，是<a href="http://stackoverflow.com/" target="_blank">Stack Overflow</a>。</p>

<a name="L............"></a>
<h2>版本选择</h2>

<p>本座在某软件公司面试的时候别人看到简历上有Python就问，Python3用过吗？本座老实回答没有，结果面试官就停下他正在笔记本上google的微操，在脸上流露出一丝嘲讽…</p>

<p>不过，除了Python这门语言本身的开发者，大多数像本座这种使用Python的人，都没有紧跟Python3的步伐。Python3（或者叫Py3K）是一个大多数我熟悉的包，框架和工具都还没有完备支持的版本（在未来的数年本座也看不到希望）。如果不是想研究Python3的新特性或者具体实现，个人觉得初学的开发者使用2.7.x是最安全的版本（本座还在用进M公司就装好的2.6版本）。</p>

<p>如果你比较熟悉Python但是不确定该不该升级到Python3，不妨先去观赏一下<a href="http://python3wos.appspot.com/">Python 3 Wall of Shame</a> (墙外，你们懂的)。</p>

<a name="VM......"></a>
<h2>VM选择</h2>

<p>Python是<a href="http://zh.wikipedia.org/zh-hk/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80" target="_blank">脚本语言</a>，因此需要VM。CPython是最主流的选择，也被当成其他VM实现时的参考。其他常见的还有用Python实现的<a href="http://pypy.org/">PyPy</a>，用Java实现的<a href="http://www.jython.org/">Jython</a> 以及用Microsoft .Net CLR实现的<a href="http://ironpython.net/">IronPython</a>。如果你不是非常非常确定你自己要选用别的，就安装CPython吧。</p>

<p>换句话说，前面这堆关于VM和版本选择的建议在你看来不知所云，你需要的就是<a href="http://www.python.org/getit/" target="_blank">CPython 2.7.x版本</a>。</p>

<a name="Python......"></a>
<h2>Python安装</h2>

<p>下载之后的.exe安装文件安装的时候有一个地方需要注意：如果你是在Vista/Win7这样的C盘权限控制异常严格的操作系统，最好用右键“Run as administrator”。这点也适用于你下载到的被其他人编译成exe发布的Python package。嗯，什么是package？</p>

<a name="L......Package"></a>
<h2>理解Package</h2>

<p>Python没有一个内置的package管理体系。实际上Python下面一个package是什么也是一个很“不具体”的概念。就像前面提到的，Python下面的代码是以module为单位存在的。每个module既可以是一个只有一个函数的文件，也可以是一个包含了一个或者多个子module的目录。而module和package之间的区别是非常模糊的，每个module都可以被认为是一个package。</p>

<p>和所有的编程环境一样，在Python下面有一些函数和类是全局可见的（<code>str</code>，<code>len</code>，<code>Exception</code>等等），而另外一些需要通过<code>import</code>语句导入，比如：</p>

<pre><code class="python">&gt;&gt;&gt;import os
&gt;&gt;&gt;from os.path import basename, dirname
</code></pre>

<p>这里<code>import</code>被调用的时候，Python是从哪里把这些module导入的呢？其实，在你安装Python的时候，module的导入路径已经被自动设置过了。这个过程的具体实现是跟你运行的平台相关的，你可以通过<code>sys.path</code>来查看被设置的路径究竟是什么。比如本座的是：</p>

<pre><code class="bash">['',
'C:\\Python26\\lib\\site-packages\\demjson-1.4-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\anyjson-0.2.5-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\pmw-1.3.2-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\paramiko-1.7.6-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\treewidgets-1.0a1-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\mechanize-0.2.3-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\pylint-0.22.0-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\logilab_astng-0.21.0-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\logilab_common-0.53.0-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\unittest2-0.5.1-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\virtualenv-1.5.1-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_staticfiles-0.3.2-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_attachments-0.3dev-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_ajax_validation-0.1.4-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_email_confirmation-0.2.dev4-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\distribute-0.6.10-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_timezones-0.2.dev1-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django-1.3-py2.6.egg',
'C:\ \Python26\\lib\\site-packages\\rbtools-0.3.2-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\django_debug_toolbar-0.8.4-py2.6.egg',
'C:\\Python26\\lib\\site-packages\\suds-0.4-py2.6.egg',
'C:\\Windows\\system32\\python26.zip',
'C:\\Python26\\DLLs',
'C:\\Python26\\lib',
'C:\\Python26\\lib\\plat-win',
'C:\\Python26\\lib\\lib-tk',
'C:\\Python26',
'C:\\Python26\\lib\\site-packages',
'C:\\Python26\\lib\\site-packages\\PIL',
'C:\\Python26\\lib\\site-packages\\wx-2.8-msw-unicode']
</code></pre>

<p>Python在导入的module的时候，是按照这个列表“自顶向下，见好就收”的方式运作的。也就是说如果你正好机器上有两个路径下面安装了同样名称的module，先被搜索到的那个就会被导入。有的时候，你确信自己受到了这种机制的干扰，也可以通过下面的办法来hack回来：</p>

<pre><code class="python">sys.path.insert(, 'path\\to\\your\\packages')
</code></pre>

<p>进行一段时间的Python开发过后你总是会有很多的包，于是这个办法你会觉得非常的方便。但是，请结合后面的内容默默记住，不到万不得已，不要这样hack。</p>

<a name="L.strong.The.PYTHONPATH..strong."></a>
<h5><strong>The PYTHONPATH</strong></h5>

<p><code>PYTHONPATH</code>是一个环境变量（可以win+break到高级设置里面去设置），可以简单的理解它就是Windows下面的<code>PATH</code>变量，不过只是对Python可见而已。在很多Python的教程里面，会说所有你想要让Python搜索module的路径，都应该加到这个变量对应的列表里面。</p>

<p>其实前面提到过，在Python安装的时候搜索路径已经被自动设置过一次。所以<code>PYTHONPATH</code>这个变量并不是必须加的。而且，作为开发环境满坑满谷的程序员，我们都喜欢把Path里面搞得干干净净的（比如本座干活都习惯在bat里面先设置相关的路径再起相应的Eclipse）。这种一启动就load一堆的办法，自己喜欢也可以用，但是更推荐后面会说的<code>virtualenv</code>。</p>

<a name="L.strong..........package..strong."></a>
<h5><strong>第三方package</strong></h5>

<p>首先，入门之后要开始正经干活，你总是需要安装一些第三方的Package。安装的办法有：</p>

<ol>
<li>下载别人编译好的Windows的版本exe</li>
<li>使用<code>pip</code>或者<code>easy_install</code></li>
<li>自己从代码安装</li>
</ol>


<p>三种办法干的事情都是类似的：下载package的依赖包，编译（需要的话）和拷贝目标文件到一个默认的第三方Package路径。那么，哪里去找安装需要的文件呢？一般来说：</p>

<ol>
<li>Google</li>
<li><a href="http://pypi.python.org/pypi">Python Package Index(or PyPI)</a></li>
<li>各种开源的代码库(<a href="https://launchpad.net/">Launchpad</a>/<a href="http://github.com/">GitHub</a>/<a href="https://bitbucket.org/">BitBucket</a>）</li>
</ol>


<a name="L.strong.........................exe..strong."></a>
<h5><strong>安装别人编译好的exe</strong></h5>

<p>注意下载的时候看清别人编译是在32还是64bit的Windows，Python的版本和你用的一致不一致。运行exe的时候注意右键Run as Administrator。就这么简单。</p>

<a name="L.strong.......pip..strong."></a>
<h5><strong>使用pip</strong></h5>

<p><code>easy_install</code>已经慢慢失宠了，主要介绍一下它的替代品：<code>pip</code>。</p>

<p><code>pip</code>是用来安装和管理Python Package的工具。它不是随Python默认安装的，因此需要额外安装。安装完毕之后我们就可以在命令行里面调用它来管理package了。比如你要安装<code>pygame</code>这个package，只需要：</p>

<div class="wp_syntax">
  <div class="code">
    <pre class="python" style="font-family:monospace;">pip install pygame</pre>
  </div>
</div>


<p>而如果你想删除它的话，则运行：</p>

<pre><code class="bash">pip uninstall pygame
</code></pre>

<p><code>pip</code>默认会按照你指定的名字，搜索和安装最新的stable版本的包。但我们常常需要安装某个特定版本的包，这个时候需要你在命令行里面指定：</p>

<pre><code class="bash">pip install pygame==version_number
</code></pre>

<p>如果你安装的版本不对，可以通过<code>upgrade</code>命令升级/降级到指定版本：</p>

<pre><code class="bash">pip install pygame==version_number –upgrade
</code></pre>

<p>由于Python高度依赖开源团体，很多最新的package都没有在PyPI上面，我们常常需要从代码库直接安装package。在<code>pip</code>下面可以直接</p>

<pre><code class="bash ">$ pip install git+http://somedomain.com/path/to/git-repo#egg=packagename
$ pip install hg+http://somedomain.com/path/to/hg-repo#egg=packagename
$ pip install svn+http://somedomain.com/path/to/svn-repo#egg=packagename
</code></pre>

<p>当然，前提是git/hg/svn这些工具你都安装好了并且在命令行里面能够执行。</p>

<p>上面这些<code>egg</code>是什么蛋呢？你可以认为它们就是Package源代码和一些metadata打成的压缩包。<code>pip</code>会读取<code>egg</code>里面的<code>setup.py</code>文件，然后安装<code>egg</code>到你的文件系统。</p>

<a name="L.strong....Python..............strong."></a>
<h5><strong>从Python源码安装</strong></h5>

<p>从源代码安装虽然是最复杂的，但是也没那么复杂。把你下载的源代码解压之后，找到<code>setup.py</code>所在的路径，然后运行下面的命令：</p>

<pre><code class="bash">python setup.py install
</code></pre>

<p>也许你觉得这样也挺容易的，为啥要去用<code>pip</code>？因为：</p>

<ul>
<li>省去你上网找源代码，解压，安装这些动作</li>
<li>更重要的是，<code>pip</code>不但装，而且管。你可以升级和降级一个Package。</li>
</ul>


<a name="L.strong......................package..strong."></a>
<h5><strong>安装需要编译的package</strong></h5>

<p>这种一般是因为Package里面有c/cpp的代码。如果你能找到别人编译好的exe文件或者用<code>pip</code>，最好不要自己折腾。只有非常非常罕见的情况下你需要自己编译，过程中一般来说都会需要用<code>cygwin</code>之类的东西，在前面几次你可以多看看每个Package的<code>readme</code>关于编译的说明。</p>

<a name="L............"></a>
<h2>开发环境</h2>

<a name="L.strong.virtualenv..strong."></a>
<h5><strong>virtualenv</strong></h5>

<p><code>virtualenv</code>无疑是当前Python开发者心中“必知必会”类的工具了。<code>virtualenv</code>主要就是提供一个“独立的”Python开发环境。为什么需要“独立”的开发环境？在不知道<code>virtualenv</code>之前Python包满坑满谷的本座自然是有很多槽可以吐，不过最好的答案是<code>virtualenv</code>的文档里面说的：</p>

<p><blockquote><p>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python2.7/site-packages (or whatever your platform’s standard location is), it’s easy to end up in a situation where you unintentionally upgrade an application that shouldn’t be upgraded.</p></blockquote></p>

<p>简单来说，就是每个工程使用自己独立的<code>virtualenv</code>进行开发，所有该工程需要依赖的Package都安装在这个<code>virutalenv</code>里面。<code>virutalenv</code>的安装同样是使用<code>pip</code>：</p>

<pre><code class="bash">$ pip install virtualenv
</code></pre>

<p>然后就可以建立属于自己项目的开发环境：</p>

<pre><code class="bash">D:\Lenciel\Temp mkdir my_project_env

D:\Lenciel\Temp\virtualenv --distribute my_project_env

  New python executable in my_project_env\Scripts\python.exe
  Installing distribute.................done.
</code></pre>

<p>建立的目录下面会自动的安装好<code>pip</code>等工具：</p>

<pre><code class="bash">-my_project_env
  |-- Scripts # -- Python解释器的拷贝/pip脚本/activiate脚本/deactivate脚本等
  |-- Lib     # -- 所有库（包括激活后使用pip安装的库都会放在这里
</code></pre>

<p>在命令行执行activate脚本就可以激活你新建的环境。环境被激活后，主要通过下面两个功能保持独立完整性：</p>

<ol>
<li>当你在被激活的环境里面使用<code>pip</code>安装一个Package的时候，它只会被安装在这个工作目录下面</li>
<li>当你<code>import</code>的时候，会先从工作目录下面去搜索，然后才会搜索系统目录下的</li>
</ol>


<p>需要注意的是，在系统目录下面安装的包，对所有的<code>virtualenv</code>建立的环境都是可见的。如果你不想在你建立的<code>virtualenv</code>里面看到这些包，可以使用<code>--no-site-packages</code>参数建立开发环境：</p>

<pre><code class="bash">$ virtualenv my_project_venv --no-site-packages
</code></pre>

<a name="L..............."></a>
<h2>其他的工具</h2>

<a name="L.strong............strong."></a>
<h5><strong>编辑器</strong></h5>

<p>在不同的项目里面本座用过Vim/Sublime text 2/Eclipse+PyDev/PyCharm。现在Vim和PyCharm用得比较多一点，PyDev一直有一些诡异的问题。比如那个“<a href="https://www.google.com.hk/search?num=30&hl=en&newwindow=1&c2coff=1&safe=strict&site=&source=hp&q=Unresolved+import+pydev&btnK=Google+Search&qscrl=1" target="_blank">Unresolved import</a>”从一开始到现在都好像没有被真正解决过。</p>

<a name="L.strong...............strong."></a>
<h5><strong>编码规范</strong></h5>

<p><a href="http://www.python.org/dev/peps/pep-0008/">PEP 0008</a>推荐了非常完整的一套编码规范，目的就是让全世界编写Python脚本的同学们用相同的方式去对齐代码，命名变量、类和函数。每个严肃的Pythoner都应该认真的学习和理解这些规范，并且贯彻执行。</p>

<a name="L.strong.Python...........strong."></a>
<h5><strong>Python标准库</strong></h5>

<p>Python的标准库提供了相当完备的功能。就像Java的工程师需要熟悉系统自带的API文档一样，了解标准库的用法是非常有好处的。另外，这些标准库都是很好的范例，特别是在支持跨平台使用这方面。</p>

<p>官方文档在<a href="http://docs.python.org/library/" target="_blank">这里</a>。</p>

<a name="L......"></a>
<h2>嗯哼</h2>

<p>前面列了不少东西，只是希望给新手一个上路指引。Python下面有用的工具，有趣的包很多很多。随着你学习和应用这门语言，不断深入它，你会自己慢慢发觉那些你自己最需要/愿意熟悉的部分。</p>

<p>Python的另外一大财富就是它的开源社区，条件成熟的时候，你也应该参与到这样的开发活动里面去。</p>

<p>最后是每个Pythoner都津津乐道的Zen Of Python送给刚开始学习的朋友。</p>

<pre><code class="python">&gt;&gt;&gt;import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>

<p>Happy Pythoning…!!</p>
]]></content>
  </entry>
  
</feed>
