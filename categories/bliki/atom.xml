<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bliki | @Lenciel]]></title>
  <link href="http://172.16.121.110:4000/categories/bliki/atom.xml" rel="self"/>
  <link href="http://172.16.121.110:4000/"/>
  <updated>2017-05-10T01:29:34+08:00</updated>
  <id>http://172.16.121.110:4000/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[DevOps]]></title>
    <link href="http://172.16.121.110:4000/2017/05/devops-and-the-future-of-jobs/"/>
    <updated>2017-05-10T01:28:52+08:00</updated>
    <id>http://172.16.121.110:4000/2017/05/devops-and-the-future-of-jobs</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>定义</h2>

<p>如果你的Manager对着一堆项目指点江山：“我们要在A项目里做DevOps，我们要B项目也做DevOps，哦，还有那个C项目。”</p>

<p>你心里面难免犯嘀咕：“做DevOps是做什么？”</p>

<p>这很正常。</p>

<p>本座见识过的各种DevOps布道，听众们往往不是大腿一拍醍醐灌顶的神态, 而是一脸困惑欲言又止想问又不知道从何问起的样子。</p>

<p>很多公司的DevOps落地就像我们提到的这位Manager，拉一堆人画一个圈，你们来做DevOps，好像就完成了。</p>

<p>从业多年的你已经有经验，所有没法被很好地翻译成中文的术语，都要小心。比如<a href="/2017/02/bounded-context/">Bounded Context</a>，比如DevOps。</p>

<p>所以你去查，DevOps是什么？</p>

<p>网上有张流传甚广的图：</p>

<p><img src="/downloads/images/2017_05/devops.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这张看起来颇有道理的图其实什么也没有说：测试、开发和运维这三种角色的工作，究竟有什么交集，可以被称为DevOps呢？</p>

<a name="L......"></a>
<h2>其实</h2>

<p>DevOps从2009年被提出，算是顺势：敏捷流程在大量的公司落地以取代过去的瀑布流程。</p>

<p>实施敏捷流程一个主要的诉求就是尽快发布可用的版本，迭代试错。而当时的业务运维部门（Ops）的工作方式是满足不了这样的需要的。</p>

<p>传统的运维，主要考核指标是业务系统的“稳定运行”。所以他们会制定很多的流程甚至惩罚措施，来规避风险。而且，半夜出事儿了，第一时间被呼起来的是他们又不是开发，所以虽然私下里在机器上开了各种端口通了各种隧道方便自己在三亚休假时，也能把产品数据库的备份恢复，但是他们面对业务方总是“铁面无私”的。</p>

<p>开发当然会抱怨：上线慢啊，对线上系统接触不到啊，查个数据库都要找人啊&hellip;</p>

<p>但尽管研发流程“敏捷”了，也没有哪个决策者可以跳出来说运维部门制定出来的九九八十一步的流程可以不走，开发自己部署自己搞就好，因为：</p>

<ol>
<li>研发具备运维知识的人确实很少</li>
<li>出了问题自己要背锅</li>
</ol>


<p>但因为下面几个因素，造成运维这个环节不得不做出相应的改变：</p>

<ol>
<li>云相关的技术日益成熟之后，过去Ops团队需要负责的很多工作都交给了云服务提供商或者内部的基础设施团队</li>
<li>随着分布式系统的日益普遍，微服务架构等各种把业务系统打散拆小搞自治的实践逐渐<a href="/2017/02/the-real-success-by-doing-msa/">成为主流</a>，越来越多的团队<a href="https://speakerdeck.com/charity/keep-calm-and-carry-on-scaling-your-org-with-microservices">要求开发的人必须具备运维</a>的技能</li>
<li>随着容器等技术的成熟，镜像逐步替代软件包，成为了交付的主体：和软件包不同，它集成度更高（对外暴露的只是ip+端口），包含了配置信息，部署更加方便。随着“基础设施代码化”等工作落地，本地的开发环境和线上环境的差异也更小了，降低了部署工作的门槛</li>
</ol>


<p>但面对业务运维日新月异的要求，运维工程师（大多数背景是系统管理员）的技能和视野往往是不够的。于是一种折衷的方案：把部署和运维软件的职责从运维团队开放给别的部门，权力下放的同时责任也共同承担，于是DevOps运动就出现了。</p>

<p>到2012年左右John Wills开始卖<a href="http://itrevolution.com/the-convergence-of-devops/">《Cookbook of DevOps》这本书</a>时，就已经说，DevOps这词包括了：</p>

<ul>
<li>The Agile Infrastructure Thread</li>
<li>The Velocity Thread</li>
<li>The Lean Startup Thread</li>
</ul>


<p>所以DevOps不是职称或者工种，也不特指某个具体内容的工作。</p>

<p>Wikipedia说它是<a href="https://zh.wikipedia.org/wiki/DevOps">文化</a>，Amazon说它是<a href="https://aws.amazon.com/cn/devops/what-is-devops/">文化</a>，Thoughtworks也说它是<a href="https://martinfowler.com/bliki/DevOpsCulture.html">文化</a>。</p>

<p>文化是需要土壤的，软件团队的文化，生长的土壤主要指：</p>

<ul>
<li>组织结构</li>
<li>开发流程</li>
<li>技术栈</li>
</ul>


<p>如果没有相应的土壤，“文化”就只是“文化知识”。拿来对下面的人讲，很难讲清楚，更难落地。</p>

<p>这也是DevOps被很多人反对的原因。</p>

<p>Jeff Knupp觉得这就是在“<a href="https://jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer/">残杀Developer</a>”，Twitter的基础架构工程师Cindy Sridharan也发文<a href="https://medium.com/@cindysridharan/what-is-devops-5b0181fdb953">抨击过</a>把它当成一个工种或者工作内容。</p>

<p>所以，因为这些历史原因，即便是你跟头脑很清晰，认识很正确的人讨论DevOps，也需要问一下他/她的重点是指下面三方面的哪个方面：</p>

<ul>
<li>设施：如何借助基础设施即服务、运维自动化等手段，加快代码部署到生产环境的速度</li>
<li>监控：如何借助日志和监控手段，及时把生产环境的情况反馈到开发团队。</li>
<li>运营：如何借助端到端的埋点、数据采集、分析和可视化，把用户行为反馈到业务</li>
</ul>


<a name="L..............."></a>
<h2>工种的未来</h2>

<p>其实在我眼里，DevOps的出现很早。Google在2003年建SRE团队的时候，Ben Treynor就说（我觉得Ben关于SRE的每句话都值得<a href="https://landing.google.com/sre/interview/ben-treynor.html">认真去看</a>），这个部门的定义是：</p>

<blockquote><p>&ldquo;what happens when a software engineer is tasked with what used to be called operations.&rdquo;</p></blockquote>

<p>所以，多看看大公司里面各种职位的演化，对年轻的朋友们开拓视野，规划自己的发展是很有益处的。</p>

<p>但赶时间的同学不妨听我来多嘴几句。</p>

<a name="L......"></a>
<h3>测试</h3>

<p>在一线公司特别是互联网公司里面，测试的角色早已经发生变化了。Facebook、Google、Amazon的专职测试人员不断缩减，微软更是把SDET (Software Development Engineer in Test) 和SDE（Software Development Engineer）两个职位合并了。国内也是阿里走在前面，接下来各个龙头企业都在跟进。</p>

<p>为什么测试团队会缩编？因为就目前整个软件研发流程而言，软件工程师需要负责代码、单元测试和集成测试的开发。自测完毕代码提交后，CI上还会有自动化的回归测试，通过之后代码被CD系统部署进行功能验证或者灰度发布。</p>

<p>特别是互联网行业，一方面，要构建一个和生产环境一样的stage环境进行测试非常困难，要把生产环境上的问题测出来难度很大；一方面，整个部署和试错的成本，相对传统的如电信，存储软件这样的平台，相当可控，让用户当小白鼠未尝不可。于是，纯粹进行功能验证的测试团队，规模在不断缩减。而开发测试工具测试框架，CI和CD平台的团队慢慢成为了标配。</p>

<p>如果你是测试工程师，应该从聚焦在功能测试，转变为聚焦在测试工具和框架上了。</p>

<a name="L......"></a>
<h3>运维</h3>

<p>先是很多公司效仿Google，把基础设施和运维团队进行了合并，称为SRE。他们的职责包括了构建基础设施，配置管理系统，日志管理系统，容器管理系统，监控等等。</p>

<p>Amazon能够搞出AWS，跟他们内部推崇人人都可以独立地完成编写代码，测试代码，版本管理，部署上线，进行服务监测等任务，从而把整个基础设施乃至整个技术栈都PaaS化了，有很大关系。</p>

<p>所以，随着DevOps运动不断深入，运维需要越来越多的承担起把整个公司的技术栈在开发测试环境和生产环境以PaaS的形式对其他部分交付的工作。</p>

<a name="L......"></a>
<h3>开发</h3>

<p>我很喜欢的Esty的CTO，<a href="https://twitter.com/allspaw">John Allspaw</a>在<a href="https://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/">一个采访</a>里面说过，我们不要开发（Developer），我们只要软件工程师（Software Engineer）。</p>

<p>这一句话，就可以抵一万句了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bounded Context]]></title>
    <link href="http://172.16.121.110:4000/2017/02/bounded-context/"/>
    <updated>2017-02-21T04:58:52+08:00</updated>
    <id>http://172.16.121.110:4000/2017/02/bounded-context</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>定义</h2>

<p>Bounded Context是领域驱动设计中战略设计的重要组成部分，一定程度上决定了系统的逻辑架构以及集成方式。</p>

<p>基于康威定律，Bounded Context的划分还可能会影响进行项目开发实施的组织的结构。</p>

<p>DDD社区将Bounded Context定义为：</p>

<blockquote><p>应该显式地定义某个模型所应用的上下文。还应该在团队组织、应用中特定部分的使用以及像代码库和数据库模式等物理表现等方面显式地设定边界。要保持边界中模型的严格一致，而不要受外界问题的影响与干扰。</p></blockquote>

<p>这段话在说的无非是“边界”，通过为领域模型划定合理的边界，就可以降低设计与开发的复杂度。此外，边界还能够划分知识的层次，例如对外而言，可以只保障暴露在边界外接口的一致性，以及关注它们之间的集成方式。边界之内则自成一体，可以独立演化，甚至可以包容一到多个遗留模块。</p>

<a name="L............"></a>
<h2>常见问题</h2>

<p>正是因为Bounded Context带来的隔离性，<a href="https://msdn.microsoft.com/en-us/magazine/jj883952.aspx">Juelin Lerman</a>才认为：“把一个将大量的类放在一个上下文中的独立模型分解为多个较小的模型是有好处的。Bounded Context创建的模型较小，而且内聚性更高，同时维持了模型之间的边界。”</p>

<p>好处听起来都是好的，但是难免会有下面这些问题：</p>

<p>如何确定或划分Bounded Context？
Bounded Context是否具有层次？
Bounded Context划分的边界是逻辑的，还是物理的？
Bounded Context之间的通信方式？</p>

<p>也难怪在文章《<a href="http://www.sapiensworks.com/blog/post/2012/04/17/DDD-The-Bounded-Context-Explained.aspx">DDD: The Bounded Context Explained</a>》中Mike要说，Bounded Context是DDD中最难解释的原则，但或许也是最重要的原则。可以说，没有BC，就不能做DDD。在了解Aggregate Root、Aggregate、Entity等概念之前，需要先了解BC。</p>

<p>Vaughn Vernon的<a href="http://book.douban.com/subject/25844633/">Implementing Domain-Driven Design</a>解释如下：</p>

<blockquote><p>Bounded Context是一个显式的边界，领域模型便存在于这个边界之内。领域模型把通用语言表达成软件模型。创建边界的原因在于，每一个模型概念，包括它的属性和操作，在边界之内都具有特殊的含义。</p></blockquote>

<p>这里是从设计原则上来规约出Bounded Context的定义：</p>

<ul>
<li>它是模型概念，与实现无关，是高层的抽象机制</li>
<li>具有自己独立的边界，是自治的，遵循高内聚、松耦合</li>
<li>不同的Bounded Context之间的关系决定它们之间的协作与通信方式</li>
<li>它与Domain应为一一对应关系</li>
<li>一个上下文意味着一个专有的职责</li>
</ul>


<a name="Reference"></a>
<h2>Reference</h2>

<ol>
<li><a href="https://martinfowler.com/bliki/BoundedContext.html">BoundedContext by Martin Fowler</a></li>
<li><a href="https://www.amazon.com/gp/product/0321834577?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321834577">Implementing Domain-Driven Design</a></li>
<li><a href="https://msdn.microsoft.com/en-us/magazine/jj883952.aspx">Shared Data Model using Bounded Context</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CQRS]]></title>
    <link href="http://172.16.121.110:4000/2017/02/cqrs/"/>
    <updated>2017-02-18T02:58:52+08:00</updated>
    <id>http://172.16.121.110:4000/2017/02/cqrs</id>
    <content type="html"><![CDATA[<a name="L.........CQRS"></a>
<h2>什么是CQRS</h2>

<p>CQRS是Command Query Responsibility Segregation的缩写，翻译过来是“命令查询职责分离”。</p>

<p>它的概念源于Betrand Meyer（Eiffel语言之父，开-闭原则OCP提出者）在《<a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554">Object-Oriented Software Construction</a>》这本书中提到的“命令查询分离 (Command Query Separation,CQS) ”：把改变对象状态的命令（Command），与获取对象状态的查询（Query）拆分。</p>

<p><a href="http://codebetter.com/gregyoung/">Greg Young</a>在2010年自己的<a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/">一篇博客</a>中对CQS进行了改进和简化，提出了CQRS：最核心的改动是，不仅仅对方法进行拆分，而是从数据模型上进行隔离。</p>

<a name="L............"></a>
<h2>实施方式</h2>

<p>因为查询操作不会造成数据的修改，所以它属于一种幂等操作，可以反复地发起，而不用担心会对系统造成影响。基于这种特性，我们还可以为其提供缓存，从而改进查询的性能。</p>

<p>命令操作则与之相反，它会直接影响系统信息的改变，因此，和查询操作相比，对事务的要求也不一样。</p>

<p>从请求响应的角度来看，查询操作常常需要同步请求，实时返回结果；命令操作则不然，因为我们并不期待命令操作必须返回结果，这就可以采用fire-and-forget方式，而这种方式正是运用异步操作的前提。</p>

<p>在实践上，因为两个数据模型分开了，存储也可以分开，所以可以使用主从数据库。主数据库处理CUD，从库处理R，从库的的结构可以和主库的结构完全一样，也可以不一样，从库主要用来进行只读的查询操作。</p>

<p>在数量上从库的个数也可以根据查询的规模进行扩展，在业务逻辑上，也可以根据专题从主库中划分出不同的从库。从库也可以实现成<a href="https://martinfowler.com/bliki/ReportingDatabase.html">ReportingDatabase</a>，根据查询的业务需求，从主库中抽取一些必要的数据生成一系列查询报表来存储。</p>

<a name="L............"></a>
<h2>适用场景</h2>

<p>把系统建模成领域对象状态迁移的一个状态机，可以让系统从Data-Driven演进成Task-Driven甚至是Event-Driven，这听起来很美。</p>

<p>但CQRS解决的，主要还是业务复杂度和性能方面的问题。它的引入是会带来极大复杂度的。因此，以下场景中，可以考虑使用CQRS模式：</p>

<ul>
<li>当在业务逻辑层有很多操作需要对相同的实体或者对象进行的时候。CQRS使得我们可以对读和写定义不同的实体和方法，从而可以减少或者避免对某一方面的更改造成冲突</li>
<li>对于一些基于任务的用户交互系统，通常这类系统会引导用户通过一系列复杂的步骤和操作，通常会需要一些复杂的领域模型，并且整个团队已经熟悉领域驱动设计技术。写模型有很多和业务逻辑相关的命令操作的堆，输入验证，业务逻辑验证来保证数据的一致性。读模型没有业务逻辑以及验证堆，仅仅是返回DTO对象为视图模型提供数据。读模型最终和写模型相一致。</li>
<li>适用于一些需要对查询性能和写入性能分开进行优化的系统，尤其是读/写比非常高的系统，横向扩展是必须的。比如，在很多系统中读操作的请求时远大于写操作。为适应这种场景，可以考虑将写模型抽离出来单独扩展，而将写模型运行在一个或者少数几个实例上。少量的写模型实例能够减少合并冲突发生的情况</li>
<li>适用于一些团队中，一些有经验的开发者可以关注复杂的领域模型，这些用到写操作，而另一些经验较少的开发者可以关注用户界面上的读模型。</li>
<li>对于系统在将来会随着时间不段演化，有可能会包含不同版本的模型，或者业务规则经常变化的系统</li>
<li>需要和其他系统整合，特别是需要和事件溯源Event Sourcing进行整合的系统，这样子系统的临时异常不会影响整个系统的其他部分。</li>
</ul>


<p>但是在以下场景中，可能不适宜使用CQRS：</p>

<ul>
<li>领域模型或者业务逻辑比较简单，这种情况下使用CQRS会把系统搞复杂。</li>
<li>对于简单的，CRUD模式的用户界面以及与之相关的数据访问操作已经足够的话，没必要使用CQRS，这些都是一个简单的对数据进行增删改查。</li>
<li>不适合在整个系统中到处使用该模式。在整个数据管理场景中的特定模块中CQRS可能比较有用。但是在有些地方使用CQRS会增加系统不必要的复杂性。</li>
</ul>


<a name="Reference"></a>
<h2>Reference</h2>

<ul>
<li><ol>
<li><a href="http://www.codeproject.com/Articles/555855/Introduction-to-CQRS">Introduction to CQRS</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://martinfowler.com/bliki/CQRS.html">CQRS</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/jj554200.aspx">CQRS Journey</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/dn568103.aspx">Command and Query Responsibility Segregation (CQRS) Pattern</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/dn589792.aspx">Event Sourcing Pattern</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://www.se-radio.net/2015/05/se-radio-episode-226-eric-evans-on-domain-driven-design-at-10-years/">Eric Evans on Domain-Driven Design</a></li>
</ol>
</li>
<li><ol>
<li><a href="https://hackernoon.com/oo-tricks-the-art-of-command-query-separation-9343e50a3de0">The Art of Command Query Separation</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
