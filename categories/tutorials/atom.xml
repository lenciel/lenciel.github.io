<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-04-02T23:08:56+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[构建Deployment系统 (1)]]></title>
    <link href="http://lenciel.com/2014/04/pipeline-for-deployment/"/>
    <updated>2014-04-22T02:49:38+08:00</updated>
    <id>http://lenciel.com/2014/04/pipeline-for-deployment</id>
    <content type="html"><![CDATA[<p>对软件公司，特别是互联网软件公司来说，发布流程是企业的<a href="http://lenciel.com/2013/05/the-importance-of-deploy-as-will/">核心竞争力</a>。</p>

<p>那么什么是一个好的发布流程呢？Github（别忘了它本身也是一家软件公司）的CTO在介绍<a href="http://lenciel.com/2013/03/boxen-introduction/">Boxen
</a>的时候说过，他们公司新员工从拿电脑到可以开始编码只要30分钟，这给混过几家10w+员工公司的我带来的震撼特别强烈。</p>

<p>所以我觉得，一个好的软件发布流程应该是：</p>

<ol>
<li>新员工在第一天入职就能push改动到production</li>
<li>新员工在第一天入职就能学会怎么从production撤销一个错误的改动</li>
<li>整个deployment流程是可预测的，也是可追溯的</li>
</ol>


<p>那么，如果你到了一个新公司，推开门发现那是一个蛮荒之地，应该怎么办呢？这篇先理一下基本的概念，然后后面分节描述一下讲到的这些工具具体要怎么配置怎么用。</p>

<a name="L........."></a>
<h1>善其器</h1>

<p>先check一下东西齐不齐活:</p>

<ol>
<li>代码repo是放在哪里： (<a href="http://git-scm.com/" title="Git">git</a>, <a href="http://mercurial.selenic.com/" title="Mercurial">hg</a>, …),</li>
<li>hook到repo的一套有review功能的管理系统: (<a href="http://www.reviewboard.org">ReviewBoard</a>, <a href="https://www.gitlab.com/%E2%80%8E" title="Gitlab">Gitlab</a>, <a href="https://code.google.com/p/gerrit/" title="Gerrit">gerrit</a>, <a href="https://bitbucket.org/" title="BitBucket">bitbucket</a>, <a href="https://github.com/" title="Github">github</a>, …),</li>
<li>hook到repo的一套CI管理系统:  (<a href="http://jenkins-ci.org/" title="Jenkins">Jenkins</a>, <a href="https://travis-ci.org/" title="Travis CI">Travis CI</a>, …),</li>
<li>自动部署代码到服务器的系统 (<a href="https://puppetlabs.com/%E2%80%8E" title="Puppet">Puppet</a>, <a href="http://www.getchef.com/chef/" title="Chef">chef</a>, <a href="http://clusto.org/" title="Clusto">clusto</a>, …).</li>
</ol>


<p><img src="/downloads/images/2014_04/deployment_phases.png" title="Don't touch me..." alt="Deployment Phases" /></p>

<p>你选择的工具当然对后面的流程有很大的影响。我们公司是采用<code>git</code>+<code>Gitlab</code>+<code>Reviewboard</code>+<code>Jenkins</code>+<code>fabric</code>来做部署。在搭建这套东西之前我也试过很多其他的东西，有的东西我放弃了是因为太复杂不够轻量(比如Puppet)，有的东西我放弃了是因为，长得太丑(比如Gerrit)。</p>

<a name="L..............."></a>
<h1>开发者视角</h1>

<p>假设你今天入职，写了段代码，从你的视角看到的deployment流程:</p>

<ol>
<li>提交到本地repo。</li>
<li>运行<a href="http://www.reviewboard.org/docs/rbtools/dev/">RBTools</a>生成一个Reviewboard的<code>review request</code></li>
<li>代码通过了review拿到提交许可后，把代码merge然后push到Gitlab上的<code>alpha</code>分支</li>
<li>Jenkins拿到change后做自动测试，然后部署到test服务器，发邮件通知QA</li>
<li>QA或者是开发者自己玩一下test服务器，发现没有问题，手动运行Jenkins脚本。脚本会对代码打tag，并部署改动到staging服务器，发邮件通知QA和PO</li>
<li>PO确认某个版本的所有代码都到了staging，QA做回归测试</li>
<li>测试通过后，手动运行Jenkins脚本，脚本会部署某个staging服务器的版本到production服务器</li>
<li>部署完毕后，Jenkins运行相应的冒烟测试，测试通过后邮件关键人士，表明production音容宛在</li>
</ol>


<p>整个流程里面，如果你是一个靠谱的开发者，需要花时间参与的步骤很少。但是如果是一个习惯不好的开发者，可能被review代码的人，Jenkins的自动测试，QA的集成测试或者是回归测试不断修理，惨痛的教训一定会让你成长起来的。</p>

<a name="L............"></a>
<h1>机器视角</h1>

<p>很多重复性的事情，都是机器在干:</p>

<ol>
<li><p>Reviewboard上被通过的代码被push上Gitlab的<code>alpha</code>分支后，Jenkins自动运行:</p>

<ol>
<li>静态扫描工具</li>
<li>单元测试</li>
<li>有报错发邮件通知事主。没有报错， 部署<code>alpha</code>分支到test服务器</li>
<li>部署test服务器后，运行集成测试集</li>
</ol>
</li>
<li><p>有人手工触发staging的build:</p>

<ol>
<li>merge<code>alpha</code>分支到<code>staging</code>分支</li>
<li>部署<code>staging</code>分支到staging服务器</li>
<li>部署服务器后，运行集成测试集</li>
</ol>
</li>
<li><p>有人手工触发production的build:</p>

<ol>
<li>merge<code>staging</code>分支到<code>production</code>分支</li>
<li>部署<code>production</code>分支到production服务器</li>
<li>after deployment, runs integration tests against production</li>
</ol>
</li>
</ol>


<p>这里很多具体的步骤需要通过Jenkins和它的插件甚至是自己写的各种脚本来配合完成</p>

<a name="L..............."></a>
<h1>考虑扩展性</h1>

<p>未知的未来，你可能会发现项目换了开发语言，项目换了JS框架，项目自动化测试改成手动了&hellip;在架构整套部署系统的时候，要做好和具体语言具体流程的解耦。</p>

<p>一些可能会有用的思路:</p>

<ol>
<li>项目组足够小，成员能力足够好，可以不用review代码直接checkin到公共repo(成员能力足够好至少意味着，他有写靠谱的UT)</li>
<li>你构建出来的系统，每个不同的build应该可以很容易的绑定不同的工具:

<ol>
<li>静态扫描工具是很好 (比如 <a href="http://www.pylint.org/" title="PyLint">pylint</a>, <a href="https://github.com/jcrocholl/pep8" title="pep8.py">pep8</a>或者<a href="http://www.jshint.com/" title="JSHint">jshint</a>)，但最好项目一开始就用它们。如果是旧项目不要往上套，费时费力</li>
<li>如果是用precommit的hook来跑测试，开发者本地可以不跑</li>
<li>如果是有特别要求的项目（安全性，健壮性等），可以很容易绑定其他的工具</li>
</ol>
</li>
<li>每个项目对应不同的deployment环境有不同的build配置</li>
<li>三驾马车的服务器配置 (test, staging, production)什么时候应该祭出？个人经验是，如果研发团队超过3人了，再怎么省也得有两个(test+production)。如果有专职的QA团队，并且希望有稳定的版本部署出去，那三种环境的配置几乎是必须的。</li>
<li>手动触发test到staging以及staging到production主要是为了手动测试的时间窗，让版本发布更可控。你也可以结合项目的具体情况决定要不要把这两步也自动化。</li>
</ol>


<p>如果是用了Jenkins，上面这些就非常方便了，因为说白了每个build不过就是当特定条件满足时执行的一堆特定脚本而已：当然，如果你发现公司还在用Ubuntu 12.04做build server，可能也没有那么方便。</p>

<a name="Rants"></a>
<h1>Rants</h1>

<ol>
<li><em>什么时候需要考虑上这种流程?</em> 如果是三个人的车库队伍，然后就队伍里面又没人有兴趣做对运维，那就算了吧。如果是正经开门做生意的公司，都该上。</li>
<li><em>能不能允许"加急"?</em> 和很多大公司比，这套流程虽然已经精简了，但是总有时候我们有非常"紧急的"改动，能不能不走这套流程直接上？ 简单的回答就是，不能。如果你发现了有人要求加急，一定是目前的流程太慢。这种情况，一定是有什么东西坏掉了吧。比如之前的代码check不严格，很严重的错误很容易就到了production，或者你的员工们写的UT跑一年都跑不完或者是在build server上根本没法跑。</li>
<li><em>为什么不自动部署?</em> 是，这里描述的流程只有到test服务器是自动部署的，后面到staging和production都是手动部署。因为据说，把自动merge和自动测试的代码部署到production服务器，是一个很容易让你半夜接到电话的举动，而且很多CEO鬓角的白头发都是因为这样的部署长出来的。当然如果你的manager已经在他老板那里夸口说你来了整个手动测试team都可以解散了，我就只能祝你好运了。</li>
<li>静态扫描的工具（无论是lint还是style的检查），常常都会给团队带来比UT更好的提升：很多时候你在review的时候要不断告诉同事特别是新手同事你这段代码连style都不对，对两个人都是伤害&hellip;如果有个无情的机器用不妥协地负责做这件事情，嗯哼&hellip;</li>
</ol>


<p>Hope you have fun when setting up the pipeline for your company.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pomodoro Technique]]></title>
    <link href="http://lenciel.com/2014/04/pomodoroda-tech/"/>
    <updated>2014-04-03T13:44:35+08:00</updated>
    <id>http://lenciel.com/2014/04/pomodoroda-tech</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_04/pomodoro_tech.jpg" title="Don't touch me..." alt="Pomodoro Technique" /></p>

<p>时间管理对每个人都是非常重要的，相关的理论和工具都有很多。本座试过很轻量的<a href="https://github.com/vim-scripts/todolist.vim">todolist.vim</a>，也试过很大气的<a href="https://www.omnigroup.com/omnifocus">OmniFocus</a>，但可能因为自己比较爱随意乱来的性格，这些工具最终都被本座慢慢荒弃。</p>

<p>倒是从E公司就一直用到现在的<a href="http://pomodorotechnique.com">Pomodoro Technique</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，因为规则简单上手迅捷疗效明显，最终成为了日常生活的一部分。</p>

<a name="L..."></a>
<h2>起</h2>

<p>Francesco Cirillo在1992年正式提出了<code>Pomodoro Technique</code>，命名似乎来源于手边的番茄形状的烹调定时器。简单的说，Pomodoro就是：</p>

<ul>
<li>一天开始的时候规划今天要完成的几项任务</li>
<li>设定你的番茄钟（软件、闹钟、whatever），时间是25分钟</li>
<li>开始完成第一项任务，直到番茄钟响铃或提醒</li>
<li>停止工作，休息3~5分钟</li>
<li>开始下一个番茄钟，继续该任务。一直循环下去，直到完成该任务，并在列表里将该任务划掉。</li>
<li>如此这般完成今天所有的事情。</li>
<li>每四个番茄钟后，休息25分钟。</li>
</ul>


<p>在工作的25分钟周期里面，什么样的中断都置之不理当然是最好的。但如果有中断进来：</p>

<ul>
<li>非得马上做不可的话，停止当前这个番茄钟并宣告它作废（哪怕还剩5分钟就结束了），完成带来中断的事情，之后再重新开始同一个番茄钟；</li>
<li>不是必须马上去做的话，将带来中断的事情记在另一个列表里（比如叫"Exception"或者"Unplanned"什么的），然后接着完成这个番茄钟。</li>
</ul>


<p>接下来，一天结束的时候，你可以回忆一下今天完成了几个钟，并且反思：</p>

<ul>
<li>你受到了哪些中断？</li>
<li>你最能集中注意力的地方是哪里？</li>
<li>你如何避免开始做一个无趣的工作？</li>
<li>什么类型的活动会花去超过你估计的时间？</li>
<li>你是否因为处理管理性质的事务而没时间做该做的事情？</li>
</ul>


<a name="L..."></a>
<h2>承</h2>

<p>为什么这种办法是有效的呢？个人觉得主要是两方面的原因。</p>

<a name="L............"></a>
<h3>心理层面</h3>

<a name="L..........................."></a>
<h4>分解过的任务更具体</h4>

<p>我们做一件事情，复杂度太高的话，兴奋度就会降低，你就会选择拖延。一件事情在被分解成很小的部分之后，才会变得清晰。甚至在操作中，如果你一个任务需要7、8个钟都迭代不完，你可能还应该把这件事情先分解成更小的子任务。</p>

<a name="L..........................."></a>
<h4>分解过的任务更可控</h4>

<p>休息和工作之间的心境切换起来很难。有时候你来上班或者吃过饭之后，要进入真正做事的状态花的时间会比你想象的要多很多。番茄大法是动作导向的：上好闹钟，订好提示音，可以让你更好控制自己。</p>

<p>完美主义也是妨碍你按时完成任务的一大原因。想出一个完美的解决方案，那不就是拖延么？在Pomodoro大法中有很多迭代开发的禅意：你不能用25分钟内的时间去考虑完美的方案，乖乖上好闹钟，完成25分钟的任务，然后5分钟休息时间里面去想那些改进的方案吧。</p>

<a name="L..........................."></a>
<h4>分解过的任务更有趣</h4>

<p>如果任务无趣时，拖延的时间会增加。比如做项目做到最后的收尾工作之类时，常常非常无趣。分解它们，让你知道你多快就能完成它，可以激励自己。</p>

<p>别人催你完成你不想完成的事情时，你多半也做不好。"have-to"和"want-to"之间的矛盾简直就是<a href="http://en.wikipedia.org/wiki/Terrible_twosX">the-terrible-two</a>终生梦魇版。通过使用番茄大法，你每天确信自己能够完成的事情能够做到心中有数。</p>

<a name="L............"></a>
<h3>生理层面</h3>

<p>如果你常看球赛的话，就会知道一些关于<strong>模式</strong>的八卦。</p>

<p>比如穆图为多家球队效力都表现不错，对于这种成功他解释说：“诅咒对我是无效的，因为我总是把内裤穿在外面。”</p>

<p>约翰特里，切尔西的队长，国家队的中坚，问下他怎么做到集中精力？他会告诉你他每次比赛前都听同一张CD，在同一个地方停车，把鞋带系三次。</p>

<p>我大学球队的主教练，从来不许老婆和女儿坐进替补席。</p>

<p>我们的大脑在一定环境下，会进入某种模式，处理某些问题特别迅速。这种受后天训练得到的反应是Conditioned Reflexes（条件反射）。而简短且固定的专注时间，可以训练你进入这种模式。</p>

<a name="L..."></a>
<h2>转</h2>

<p>Pomodoro说到底是一种轻量的<a href="http://zh.wikipedia.org/wiki/GTD">GTD</a>规则。</p>

<p>如果是工作内容高度碎片化的人，比如高管，其实是没法做到动不动就入定30分钟不理人间事的。</p>

<p>如果是对创意要求很高的工种，比如画家，作家，好像也不太适合这种非常规律的迭代。</p>

<a name="L..."></a>
<h2>合</h2>

<p>拿出纸笔，写下你很想完成的一些事情。从里面挑一个最重要的，你最想马上完成的。然后：</p>

<ol>
<li>定一个10分钟的闹钟</li>
<li>集中精力完成</li>
<li>当闹钟到时立刻停止</li>
<li>休息三分钟</li>
</ol>


<p>结果怎样？你多久看一次闹钟？有没有被其他事情打断？</p>

<p>如果觉得10分钟自己能轻松搞定，就可以慢慢延长这个时间了。有不少软件可以帮助你自由的定时和统计：</p>

<ul>
<li><a href="https://fnd.io/#/search?mediaType=all&amp;term=Pomodoro">iOS应用</a></li>
<li><a href="http://www.publicspace.net/Vitamin-R/index.html">Mac应用</a></li>
<li><a href="http://www.focusboosterapp.com/">Windows应用</a></li>
</ul>


<p>各种浏览器插件那就不说了满坑满谷都是。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://pomodorotechnique.com/。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cryptography and Python]]></title>
    <link href="http://lenciel.com/2013/07/cryptography-and-python/"/>
    <updated>2013-07-25T15:13:00+08:00</updated>
    <id>http://lenciel.com/2013/07/cryptography-and-python</id>
    <content type="html"><![CDATA[<p>这周我们的一个项目里面需要调用第三方接口。对方的安全机制是调用时要进行加密和校验，但它们的文档没有描述具体是怎么加密的，而是给了一段代码：</p>

<pre><code class="java">    private static BASE64Encoder base64 = new BASE64Encoder();
//  private static byte[] myIV = { 50, 51, 52, 53, 54, 55, 56, 57 };
//  private static byte[] myIV = null;
//  private static String strkey = "W9qPIzjaVGKUp7CKRk/qpCkg/SCMkQRu"; // 字节数必须是8的倍数
    //密钥
    private static String strkey = "NDg5MDY2NjczMxxxxXXXXXyNzUzNTg2";
    private static String removeBR(String str) {
        StringBuffer sf = new StringBuffer(str);

        for (int i = 0; i &lt; sf.length(); ++i)
        {
          if (sf.charAt(i) == '\n')
          {
            sf = sf.deleteCharAt(i);
          }
        }
        for (int i = 0; i &lt; sf.length(); ++i)
        {
          if (sf.charAt(i) == '\r')
          {
            sf = sf.deleteCharAt(i);
          }
        }
        return sf.toString();
    }

    private static String desEncrypt(String input) throws Exception
    {

        BASE64Decoder base64d = new BASE64Decoder();
        DESedeKeySpec p8ksp = null;
        p8ksp = new DESedeKeySpec(base64d.decodeBuffer(strkey));
        Key key = null;
        key = SecretKeyFactory.getInstance("DESede").generateSecret(p8ksp);

        byte[] plainBytes = (byte[])null;
        Cipher cipher = null;
        byte[] cipherText = (byte[])null;
        //“算法/模式/填充”
        plainBytes = input.getBytes("UTF8");
        cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");
        SecretKeySpec myKey = new SecretKeySpec(key.getEncoded(), "DESede");
 //       IvParameterSpec ivspec = new IvParameterSpec(myIV);
        cipher.init(1, myKey);
        cipherText = cipher.doFinal(plainBytes);
        return removeBR(base64.encode(cipherText));
    }

    private static String desDecrypt(String cipherText) throws Exception
    {

        BASE64Decoder base64d = new BASE64Decoder();
        DESedeKeySpec p8ksp = null;
        p8ksp = new DESedeKeySpec(base64d.decodeBuffer(strkey));
        Key key = null;
        key = SecretKeyFactory.getInstance("DESede").generateSecret(p8ksp);

        Cipher cipher = null;
        byte[] inPut = base64d.decodeBuffer(cipherText);
        //“算法/模式/填充”
        cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");
        SecretKeySpec myKey = new SecretKeySpec(key.getEncoded(), "DESede");
 //       IvParameterSpec ivspec = new IvParameterSpec(myIV);
        cipher.init(2, myKey);
        byte[] output = cipher.doFinal(inPut);
        return new String(output, "UTF8");
    }
</code></pre>

<p>很明显，在提供文档的同学看来大家都是JEE程序员。仔细看了半天这两个函数<code>desEncrypt</code>和<code>desDecrypt</code>外加Google，才明白是<code>DES3</code>算法。</p>

<p>接着这份文档的后面还有另一个对加密的描述也是代码，不过这次比较明显是MD5：</p>

<pre><code class="java">public static final String MD5(String s)
{
  char hexDigits[] = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'a', 'b', 'c', 'd', 'e', 'f'
    };
  char str[] = null;
  byte strTemp[] = s.getBytes();
  MessageDigest mdTemp;
  try {
    mdTemp = MessageDigest.getInstance("MD5");
    mdTemp.update(strTemp);
    byte md[] = mdTemp.digest();
    int j = md.length;
    str = new char[j * 2];
    int k = 0;
    for (int i = 0; i &lt; j; i++)
    {
      byte b = md[i];
      str[k++] = hexDigits[b &gt;&gt; 4 &amp; 0xf];
      str[k++] = hexDigits[b &amp; 0xf];
    }
  } catch (NoSuchAlgorithmException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
  }

  return new String(str);
}
</code></pre>

<p>这些算法用python来实现当然就简单多了:MD5就是一句话，看起来非常复杂的DES3也不过几句话:</p>

<pre><code class="python">from pyDes import triple_des, ECB, PAD_PKCS5
import base64
import datetime

input_str = "test string"

key_base64_str = base64.b64decode("NDg5MDY2NjczMxxxxXXXXXyNzUzNTg2", "utf-8")
key_bytes = key_base64_str.encode('utf-8')
k = triple_des(key_bytes, ECB, pad=None, padmode=PAD_PKCS5)
d = base64.b64encode(k.encrypt(input_str))
print d
</code></pre>

<p>当然，要明白这些算法究竟怎么回事才叫认真负责的态度：下面这些内容主要来自<a href="http://www.laurentluce.com/posts/python-and-cryptography-with-pycrypto/">这篇文章</a></p>

<a name="L.strong.Hash..strong."></a>
<h2><strong>Hash</strong></h2>

<p>hash就是给输入的字符串生成一个固定长度的字符串（被称为hash值）。理想的hash要满足：</p>

<ul>
<li>根据生成的字符串非常难猜到输入的字符串</li>
<li>任意两个不同的字符串不会生成相同的hash值</li>
<li>如果输入字符串没有变生成的hash值应该不会变</li>
</ul>


<p><img src="/downloads/images/hash.png" title="Don't touch me..." alt="hash" /></p>

<p>hash函数可以被用来计算checksum，也可以用来进行数字签名和认证。</p>

<a name="L.strong.MD5..strong."></a>
<h3><strong>MD5</strong></h3>

<p>1991年面世的一种hash算法，生成的字符串长度为128bit。</p>

<p>它的算法详情可以看<a href="http://tools.ietf.org/html/rfc1321">这里</a>，简单说如下：</p>

<ul>
<li>首先需要对字符串进行扩展，使其位长对512求余的结果等于448。因此，位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。填充的方法一般是在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</li>
<li>然后，在这个结果后面附加一个以64位二进制表示的填充前信息长度。经过这两步的处理，现在的位长是 <code>N*512+448+64 = (N+1）*512</code>，即长度恰好是512的整数倍。</li>
<li>最后以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</li>
</ul>


<p>MD5对碰撞攻击(不同的输入生成相同的hash)等攻击的抵抗力比较差。</p>

<p>在python中使用MD5:</p>

<pre><code class="python">import os
from Crypto.Hash import MD5

def get_file_checksum(filename):
    h = MD5.new()
    chunk_size = 8192
    with open(filename, 'rb') as f:
        while True:
            chunk = f.read(chunk_size)
            if len(chunk) == 0:
                break
            h.update(chunk)
    return h.hexdigest()
</code></pre>

<a name="L.strong...............strong."></a>
<h2><strong>加密算法</strong></h2>

<p>加密算法使用key把输入的文本变成加密的文本。有两种加密的方式：分块和流。分块处理的单位是固定大小比如8或者16个bytes，流则是一个一个byte。只有知道了解密的<code>key</code>才能对加密的文本进行解密。</p>

<a name="L.em.........em."></a>
<h3><em>分块</em></h3>

<p>DES是分块加密的一种，其处理对象的大小是8个bytes。DES最简单的模式是所谓的<code>ECB( electronic code book)模式</code>，也就是每个block都是独立加密，最后组成整个加密后的文本。</p>

<p><img src="/downloads/images/block_cipher_ebc.png" title="Don't touch me..." alt="ecb" /></p>

<p>使用pycrpto对文本使用<code>DES/ECB</code>加密很简单。假设key是<code>10234567</code>，而我们要加密的文本是<code>abcdefgh</code>，那么：</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import DES
&gt;&gt;&gt; des = DES.new('01234567', DES.MODE_ECB)
&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; cipher_text = des.encrypt(text)
&gt;&gt;&gt; cipher_text
'\xec\xc2\x9e\xd9] a\xd0'
&gt;&gt;&gt; des.decrypt(cipher_text)
'abcdefgh'
</code></pre>

<p>比<code>ECB</code>更健壮的是<code>CFB (Cipher feedback)</code>模式，也就是先组合前面加密的文本和待加密的文本，然后进行加密。</p>

<p><img src="/downloads/images/block_cipher_cfb.png" title="Don't touch me..." alt="cfb" /></p>

<p>下面的例子说明了算法的工作流程：待加密的是<code>abcdefghijklmnop</code>，两倍8bytes。首先生成一个随机的字符串作为初始的<code>iv</code>来生成两个<code>DES</code>对象，一个用来加密一个用来解密。之所以需要这两个对象，是因为<code>feedback</code>值会随着block被加密后变化。</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import DES
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; iv = Random.get_random_bytes(8)
&gt;&gt;&gt; des1 = DES.new('01234567', DES.MODE_CFB, iv)
&gt;&gt;&gt; des2 = DES.new('01234567', DES.MODE_CFB, iv)
&gt;&gt;&gt; text = 'abcdefghijklmnop'
&gt;&gt;&gt; cipher_text = des1.encrypt(text)
&gt;&gt;&gt; cipher_text
"?\\\x8e\x86\xeb\xab\x8b\x97'\xa1W\xde\x89!\xc3d"
&gt;&gt;&gt; des2.decrypt(cipher_text)
'abcdefghijklmnop'
</code></pre>

<a name="L.em......em."></a>
<h3><em>流</em></h3>

<p>这些算法基于一个个bytes，所以block的大小总是1 byte。pycrypto提供了两个这样的算法：<code>ARC4</code> 和 <code>XOR</code>。这种基于流的算法只有一种模式：<code>ECB</code>。</p>

<p>下面是一个<code>ARC4</code>的算法，使用了key <code>01234567</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import ARC4
&gt;&gt;&gt; obj1 = ARC4.new('01234567')
&gt;&gt;&gt; obj2 = ARC4.new('01234567')
&gt;&gt;&gt; text = 'abcdefghijklmnop'
&gt;&gt;&gt; cipher_text = obj1.encrypt(text)
&gt;&gt;&gt; cipher_text
'\xf0\xb7\x90{#ABXY9\xd06\x9f\xc0\x8c '
&gt;&gt;&gt; obj2.decrypt(cipher_text)
'abcdefghijklmnop'
</code></pre>

<a name="L.strong...............strong."></a>
<h3><strong>应用程序</strong></h3>

<p>在程序里面我们常常使用DES3对文件进行加密解密操作。一般来说操作对象是文件时，总是分成一个个chunck来处理以免占用太多内存。如果读入的chunck少于16bytes，就需要扩展它才能进行加密。</p>

<pre><code class="python">import os
from Crypto.Cipher import DES3

def encrypt_file(in_filename, out_filename, chunk_size, key, iv):
    des3 = DES3.new(key, DES3.MODE_CFB, iv)

    with open(in_filename, 'r') as in_file:
        with open(out_filename, 'w') as out_file:
            while True:
                chunk = in_file.read(chunk_size)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)
                out_file.write(des3.encrypt(chunk))

def decrypt_file(in_filename, out_filename, chunk_size, key, iv):
    des3 = DES3.new(key, DES3.MODE_CFB, iv)

    with open(in_filename, 'r') as in_file:
        with open(out_filename, 'w') as out_file:
            while True:
                chunk = in_file.read(chunk_size)
                if len(chunk) == 0:
                    break
                out_file.write(des3.decrypt(chunk))
</code></pre>

<p>有了上面定义的这两个函数我们可以这样使用它们：</p>

<pre><code class="python">from Crypto import Random
iv = Random.get_random_bytes(8)
with open('to_enc.txt', 'r') as f:
    print 'to_enc.txt: %s' % f.read()
encrypt_file('to_enc.txt', 'to_enc.enc', 8192, key, iv)
with open('to_enc.enc', 'r') as f:
    print 'to_enc.enc: %s' % f.read()
decrypt_file('to_enc.enc', 'to_enc.dec', 8192, key, iv)
with open('to_enc.dec', 'r') as f:
    print 'to_enc.dec: %s' % f.read()
</code></pre>

<p>程序的输出如下：</p>

<pre><code class="bash">to_enc.txt: this content needs to be encrypted.

to_enc.enc: ??~?E??.??]!=)??"t?
                                JpDw???R?UN0?=??R?UN0?}0r?FV9
to_enc.dec: this content needs to be encrypted.
</code></pre>

<a name="L.strong.Public-key.algorithms..strong."></a>
<h2><strong>Public-key algorithms</strong></h2>

<p>上面提到的加密算法的一大问题是双方都需要知道key。而<code>public-key算法</code>提供了两个key，一个用来加密，一个用来解密。</p>

<p><img src="/downloads/images/public_private_key.png" title="Don't touch me..." alt="ecb" /></p>

<a name="L.strong.public.private.key..strong."></a>
<h3><strong>public/private key</strong></h3>

<p>使用pycrpto很容易就可以生成一对<code>private/public key</code>，生成key的时候必须规定key的长度，越长越安全。除开长度，还需要设定生成key的方法。下面是一个使用RSA生成1024bit长度key的过程：</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; random_generator = Random.new().read
&gt;&gt;&gt; key = RSA.generate(1024, random_generator)
&gt;&gt;&gt; key
&lt;_RSAobj @0x7f60cf1b57e8 n(1024),e,d,p,q,u,private&gt;
</code></pre>

<p>key对象有一系列的方法：
- <code>can_encrypt()</code> 返回是否能用key来加密数据
- <code>can_sign()</code> 返回是否能用key来进行签名
- <code>has_private()</code> 返回是否有private key</p>

<pre><code class="python">&gt;&gt;&gt; key.can_encrypt()
True
&gt;&gt;&gt; key.can_sign()
True
&gt;&gt;&gt; key.has_private()
True
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>加密</strong></h3>

<p>现在我们有了一对key，我们就可以加密一些数据了。加密的时候使用的是公钥: <code>public key</code> ：</p>

<pre><code class="python">&gt;&gt;&gt; public_key = key.publickey()
&gt;&gt;&gt; enc_data = public_key.encrypt('abcdefgh', 32)
&gt;&gt;&gt; enc_data
('\x11\x86\x8b\xfa\x82\xdf\xe3sN ~@\xdbP\x85
\x93\xe6\xb9\xe9\x95I\xa7\xadQ\x08\xe5\xc8$9\x81K\xa0\xb5\xee\x1e\xb5r
\x9bH)\xd8\xeb\x03\xf3\x86\xb5\x03\xfd\x97\xe6%\x9e\xf7\x11=\xa1Y&lt;\xdc
\x94\xf0\x7f7@\x9c\x02suc\xcc\xc2j\x0c\xce\x92\x8d\xdc\x00uL\xd6.
\x84~/\xed\xd7\xc5\xbe\xd2\x98\xec\xe4\xda\xd1L\rM`\x88\x13V\xe1M\n X
\xce\x13 \xaf\x10|\x80\x0e\x14\xbc\x14\x1ec\xf6Rs\xbb\x93\x06\xbe',)
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>解密</strong></h3>

<p>只要有用于解密的私钥(private key)解密是很简单的：</p>

<pre><code class="python">&gt;&gt;&gt; key.decrypt(enc_data)
'abcdefgh'
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>签名</strong></h3>

<p>对信息进行签名，可以用来验证信息的作者，让我们相信它的来源。下面这个例子展示了如何先算出信息的hash值，然后送给RSA key的<code>sign()</code>方法。使用其他算法如<code>DSA</code>或者是<code>ElGamal</code>也类似。</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Hash import MD5
&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; key = RSA.generate(1024, random_generator)
&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; hash = MD5.new(text).digest()
&gt;&gt;&gt; hash
'\xe8\xdc@\x81\xb144\xb4Q\x89\xa7 \xb7{h\x18'
&gt;&gt;&gt; signature = key.sign(hash, '')
&gt;&gt;&gt; signature
(1549358700992033008647390368952919655009213441715588267926189797
14352832388210003027089995136141364041133696073722879839526120115
25996986614087200336035744524518268136542404418603981729787438986
50177007820700181992412437228386361134849096112920177007759309019
6400328917297225219942913552938646767912958849053L,)
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>验证</strong></h3>

<p>只要有公钥，验证信息就很简单了。未加密的文本和签名一起被发送给接收方。接收方计算hash值然后调用公钥的<code>verify()</code>方法来进行验证：</p>

<pre><code class="python">&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; hash = MD5.new(text).digest()
&gt;&gt;&gt; public_key.verify(hash, signature)
True
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux: Introduction and Tips]]></title>
    <link href="http://lenciel.com/2013/07/tmux-introduction-and-tips/"/>
    <updated>2013-07-21T14:02:00+08:00</updated>
    <id>http://lenciel.com/2013/07/tmux-introduction-and-tips</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/tmux_tips_1.png" title="Don't touch me..." alt="tmux screenshot 1" /></p>

<a name="L.strong.........strong."></a>
<h3><strong>简介</strong></h3>

<p><code>tmux</code> ,其实就是 <code>terminal multiplexer</code> 的简称。使用tmux你可以把多个任务同时运行起来，使用不同的 <code>tmux</code> 窗口来查看它们。你也可以 <code>detach</code> 一个 <code>session</code>，也就是让一个窗口的活动，比如编译这种耗时你又不希望断开的活动，放到后台去运行。如果你使用过 <code>screen</code> 对 <code>detach</code> 一个 <code>session</code> 应该非常熟悉。其实初用 <code>tmux</code> 的时候，它很大程度上就像一个 <code>GNU-Session</code> 外加很多窗口管理的功能。而且由于 <code>tmux</code> 使用了 <code>client-server</code> 架构，我们可以在一个总控的地方去操作所有的窗口和pannel，甚至可以在一个窗口里面切换不同的 <code>session</code>。</p>

<a name="L.strong.tmux...........strong."></a>
<h4><strong>tmux的安装</strong></h4>

<p>用你的Linux package manager或者如果你和我一样在OSX可以用<code>brew</code>。另外，iTerm2<a href="http://code.google.com/p/iterm2/wiki/TmuxIntegration">集成了</a>对<code>tmux</code>的支持，它也是很多Mac上的<a href="http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/">程序员</a>最爱的Terminal。</p>

<a name="L.strong......................Session..strong."></a>
<h4><strong>创建一个具名的Session</strong></h4>

<p>由于使用 <code>tmux</code> 可以在一个电脑上创建多个 <code>session</code> ，为了更好的管理它们我们一般可以使用名字来辨识这些 <code>session</code> 。
比如下面的命令可以创建一个叫 <code>basic</code> 的 <code>session</code>：</p>

<pre><code class="bash">$ tmux -new -s basic
</code></pre>

<p>回车之后就会进入一个新的 <code>session</code> 里面。可以看到具名的<code>session</code>的<code>terminal</code>和正常打开<code>iTerm2</code>大致相同，没有特别之处。
这个时候我们敲<code>exit</code>就会回到原来的<code>terminal</code>中去。</p>

<a name="L.strong.Detaching.....Attaching..strong."></a>
<h4><strong>Detaching 和 Attaching</strong></h4>

<p>使用<code>tmux</code>一大好处就是我们可以启动<code>terminal</code>，运行一个任务在后台，然后<code>detach</code>这个<code>session</code>。如果在一般的<code>session</code>里面工作，一旦我们关闭了窗口，跑在里面的所有程序都会被退出。
但是如果是使用了<code>detach</code>，我们可以再<code>attach</code>回去。下面演示一个例子。</p>

<p>在创建的具名<code>session</code> “basic”里面运行<code>top</code>，然后使用<code>Ctrl-b + d</code>来<code>detach</code>这个<code>session</code>。</p>

<p>首先来学习一下<code>Ctrl+b</code>这样的<code>Command Prefix</code>。因为<code>tmux</code>是一个terminal管家，我们需要有一个办法告诉<code>tmux</code>我们敲击的是需要<code>tmux</code>处理的命令还是传给terminal的。如果定义了<code>Ctrl-b</code>为命令前缀，就是说我们一定要先敲这个前缀，然后执行一个命令，比如<code>d</code>，表示我们要<code>detach</code>。要记住前缀输入之后要松开手，不要在不松手的情况下发命令给<code>tmux</code>。</p>

<p>由于这个前缀是可以自定义的，所以后面我们记为<code>Prefix</code>而不再用<code>Ctrl-b</code>。</p>

<p>然后我们可以使用下面的命令对<code>session</code>进行<code>list</code>、<code>attach</code>和<code>delete</code>：</p>

<pre><code class="bash">$ tmux ls
0: 1 windows (created Thu Sep 27 10:16:16 2012) [121x22]
basic: 1 windows (created Thu Sep 27 14:32:50 2012) [122x22]
</code></pre>

<p>可以看到目前有两个存活的<code>session</code>，一个是刚刚创建的<code>basic</code></p>

<pre><code class="bash">$ tmux kill-session -t 0
</code></pre>

<p>杀掉我们不需要的那个</p>

<pre><code class="bash">$ tmux ls
basic: 1 windows (created Thu Sep 27 14:32:50 2012) [122x22]
</code></pre>

<p>再次attach的时候可以不带<code>-t</code>，因为只有<code>basic</code>这个<code>session</code>还活着。</p>

<pre><code class="bash">$ tmux attach
</code></pre>

<p>后面我们可以看到在session之间进行切换还有更多更方便的办法。</p>

<a name="L.strong.........strong."></a>
<h4><strong>窗口</strong></h4>

<p>很多时候我们都需要打开窗口运行多个任务。这种情况比较适用于<code>tmux</code>的窗口概念：用起来和现代操作系统里面的<code>tab</code>类似。</p>

<p>新建一个窗口很容易</p>

<pre><code class="bash">tmux new -s windows -n shell
</code></pre>

<p><code>-s</code>是对<code>session</code>进行命名的，<code>-n</code>是用来对窗口进行命名的。</p>

<ul>
<li>在当前的<code>session</code>里面新建一个窗口: <code>Prefix+C</code></li>
<li>要给窗口命名：<code>Prefix+</code></li>
<li>在已有的窗口间跳转： <code>Prefix+n/Prefix+p</code></li>
<li>窗口较多的时候跳转： <code>Prefix+序列号</code></li>
<li>要关掉窗口： <code>exit</code>或者<code>Prefix+&amp;</code></li>
<li>要搜索窗口：<code>Prefix+f</code>或者 <code>Prefix+w</code></li>
</ul>


<a name="L.strong.........strong."></a>
<h4><strong>分栏</strong></h4>

<ul>
<li>竖分: <code>Prefix+%</code></li>
<li>横分: <code>Prefix+"</code></li>
<li>在分栏中切换: <code>Prefix+o</code></li>
<li>在分栏中切换: <code>Prefix+方向键</code></li>
<li>在不同的布局间切换: <code>Prefix+space</code></li>
<li>关闭: <code>Prefix+x</code></li>
</ul>


<a name="L.strong..................strong."></a>
<h4><strong>命令行模式</strong></h4>

<p><code>Prefix+:</code></p>

<a name="L.strong...........................strong."></a>
<h4><strong>取得所有的快捷键</strong></h4>

<p><code>Prefix+?</code></p>

<p>二、配置tmux</p>

<p>首先在系统设置里面把<code>CapsLock</code>这枚废材按键map成<code>ctrl</code>。然后是把Prefix配置成<code>ctrl+a</code>而不是<code>ctrl+b</code>，这样主要是为了按起来方便顺手。</p>

<p>另外可以让窗口的序列号从1开始分配，这样初始窗口不会是0，那个你需要手伸很远才能按到的键。</p>

<pre><code class="bash">set -g base-index 1
</code></pre>

<p>同理分栏的序列号也可以从1开始：</p>

<pre><code class="bash">setw -g pane-base-index 1
</code></pre>

<p>另外一般需要把发送命令的延迟设置为没延迟</p>

<pre><code class="bash">set -sg escape-time 1
</code></pre>

<p>完整的配置文件在<a href="https://github.com/lenciel/oh-my-zsh/blob/master/dot_files/tmux.conf">这里</a>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (tmux.conf)</span> <a href='/downloads/code/tmux.conf'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span></span><span class="c1"># zsh is kinda tight</span>
</span><span class='line'>set-option -g default-shell <span class="nv">$SHELL</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># copy and paster</span>
</span><span class='line'>set-option -g default-command <span class="s2">&quot;reattach-to-user-namespace -l zsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># look good</span>
</span><span class='line'><span class="nb">set</span> -g default-terminal <span class="s2">&quot;screen-256color&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># act like GNU screen</span>
</span><span class='line'><span class="nb">set</span> -g prefix C-a
</span><span class='line'>unbind C-b
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -sg escape-time <span class="m">1</span>
</span><span class='line'><span class="nb">set</span> -g base-index <span class="m">1</span>
</span><span class='line'>setw -g pane-base-index <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">bind</span> r source-file ~/.tmux.conf <span class="se">\;</span> display <span class="s2">&quot;Reloaded!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">bind</span> - split-window -v
</span><span class='line'><span class="nb">bind</span> <span class="p">|</span> split-window -h
</span><span class='line'>
</span><span class='line'><span class="c1"># act like vim</span>
</span><span class='line'>setw -g mode-keys vi
</span><span class='line'><span class="nb">bind</span> h <span class="k">select</span>-pane -L
</span><span class='line'><span class="nb">bind</span> j <span class="k">select</span>-pane -D
</span><span class='line'><span class="nb">bind</span> k <span class="k">select</span>-pane -U
</span><span class='line'><span class="nb">bind</span> l <span class="k">select</span>-pane -R
</span><span class='line'><span class="nb">bind</span> -r C-h <span class="k">select</span>-window -t :-
</span><span class='line'><span class="nb">bind</span> -r C-l <span class="k">select</span>-window -t :+
</span><span class='line'>unbind <span class="o">[</span>
</span><span class='line'><span class="nb">bind</span> <span class="sb">`</span> copy-mode
</span><span class='line'>unbind p
</span><span class='line'><span class="nb">bind</span> p paste-buffer
</span><span class='line'><span class="nb">bind</span> -t vi-copy v begin-selection
</span><span class='line'><span class="nb">bind</span> -t vi-copy y copy-selection
</span><span class='line'>
</span><span class='line'><span class="c1"># after copying to a tmux buffer, hit y again to copy to clipboard</span>
</span><span class='line'><span class="nb">bind</span> y run <span class="s2">&quot;tmux save-buffer - | reattach-to-user-namespace pbcopy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># resize pane</span>
</span><span class='line'><span class="nb">bind</span> -r H resize-pane -L <span class="m">5</span>
</span><span class='line'><span class="nb">bind</span> -r J resize-pane -D <span class="m">5</span>
</span><span class='line'><span class="nb">bind</span> -r K resize-pane -U <span class="m">5</span>
</span><span class='line'><span class="nb">bind</span> -r L resize-pane -R <span class="m">5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># enable mouse</span>
</span><span class='line'>setw -g mode-mouse on
</span><span class='line'><span class="nb">set</span> -g mouse-select-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-resize-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-select-window on
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>setw -g window-status-fg cyan
</span><span class='line'>setw -g window-status-bg default
</span><span class='line'>setw -g window-status-attr dim
</span><span class='line'>setw -g window-status-current-fg white
</span><span class='line'>setw -g window-status-current-bg red
</span><span class='line'>setw -g window-status-current-att bright
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -g status-interval <span class="m">60</span>
</span><span class='line'><span class="nb">set</span> -g status-justify centre
</span><span class='line'>setw -g monitor-activity on
</span><span class='line'><span class="nb">set</span> -g visual-activity on
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -g terminal-overrides <span class="s2">&quot;xterm*:XT:smcup@:rmcup@:kUPS=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC&quot;</span>
</span><span class='line'><span class="nb">set</span> -g history-limit <span class="m">30000</span>
</span><span class='line'>setw -g alternate-screen on
</span><span class='line'><span class="nb">set</span> -s escape-time <span class="m">50</span>
</span><span class='line'>
</span><span class='line'>set-window-option -g window-status-current-format <span class="s2">&quot;#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀&quot;</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;/Users/lenciel/Library/Python/2.7/lib/python/site-packages/powerline/bindings/tmux/powerline.conf&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant for Django I: Basic]]></title>
    <link href="http://lenciel.com/2013/06/vagrant-on-mac-os-x/"/>
    <updated>2013-06-19T15:19:00+08:00</updated>
    <id>http://lenciel.com/2013/06/vagrant-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Vagrant<a href="http://www.vagrantup.com/vmware">最近支持了VMWare</a>，但是要钱的东西我们玩不起。本系列主要分享一下Vagrant+VirtualBox搭配起来如何使用。</p>

<a name="L......VirtualBox"></a>
<h2>安装VirtualBox</h2>

<p>VirtualBox是Oracle的动态创建、可配置、可移植的轻量虚拟机系统。在Windows、MacOSX、Linux和Solaris上都发行了相应版本。</p>

<p>目前Vagrant支持的是VirtualBox4.0.x、4.1.x和4.2.x版本</p>

<pre><code class="bash">http://www.virtualbox.org/wiki/Downloads
</code></pre>

<a name="L......Vagrant"></a>
<h2>安装Vagrant</h2>

<pre><code class="bash">http://downloads.vagrantup.com/
</code></pre>

<p>Windows和Mac OS X下面安装完毕后要把 <code>vagrant</code> 命令放到 <code>PATH</code> 下面，而其他系统下面需要把整个 <code>/opt/vagrant/bin</code> 放到PATH下面。
完成后可以先安装一个32位的ubuntu10.04版本来测试一下：</p>

<pre><code class="bash">vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
vagrant init lucid32
vagrant up
</code></pre>

<a name="Vagrant........."></a>
<h2>Vagrant的好处</h2>

<p>软件开发，特别是Web应用的开发正处于环境异常复杂的年代。为了在开发和实际部署的环境直接做到无缝切换，虚拟化技术被大规模的使用。与此同时，自动的配置管理，如 <code>Chef</code> 或者 <code>Puppet</code> 也在发挥着巨大的作用。Vagrant就是在这些技术的基础上进行了集成，从而完成（虚拟化+自动配置管理）的效果。</p>

<p><em>对个人开发者</em></p>

<p>对于开发者来说要想使用一个开发环境应付所有的开发任务变得非常困难了。每个项目都有自己独特的依赖，如类库，消息队列，数据库，框架等等。每个依赖也常常有版本上的差异。Vagrant提供了方便，可以为每个项目创建独立的开发环境，并且只在项目需要的时候把这些环境运行起来。</p>

<p><em>对项目组</em></p>

<p>同一个项目组的组员理论上都是有相同的开发环境的：同样的依赖，每个依赖都是同样的版本，采用同样的配置等等。但是现实往往不是这样。比如采用了ORM框架的Django，同一个项目组可能有人用着 <code>sqlite3</code> ，有人用 <code>mysql</code> 。而且每个人自己开发环境中服务器的配置也常常是不同的。这种异构的环境往往最终会带来大大小小的麻烦。Vagrant提供了一个方便，让大家都被强制的使用统一的开发环境。</p>

<p><em>对公司</em></p>

<p>如果管理过大型项目，你就知道新人和新设计的引入往往是非常大的考验。大量的环境搭建工作，都可以由Vagrant来代替。并且Vagrant的配置只需要写一次，然后分发给大家用就行了，省掉了大量的时间。</p>

<a name="Vagrant..............."></a>
<h2>Vagrant可执行文件</h2>

<p>Vagrant安装好之后，主要是通过命令行使用。 <code>vagrant</code> 命令带很多子命令，如 <code>vagrant up</code> ， <code>vagrant ssh</code> ， <code>vagrant package</code> 等等。敲 <code>vagrant</code> 就可以看到有哪些可用的命令。</p>

<a name="Vagrantfile............"></a>
<h2>Vagrantfile配置文件</h2>

<p><code>Vagrantfile</code> 对于Vagrant就像 <code>Makefile</code> 对Make的作用一样：它被放置在每个Vagrant项目的根目录，用来配置Vagrant以及它创建的虚拟机的行为。一个最简单的配置文件如下：</p>

<pre><code class="ruby">Vagrant:Config.run do |config|
     # setup the box
     config.vim.box="my_box"
end
</code></pre>

<p>可以看到，<code>Vagrantfile</code> 是用标准的Ruby代码写成的。需要注意的是在大版本之间<code>Vagrantfile</code> 是不兼容的。</p>

<a name="L......setup"></a>
<h2>基本setup</h2>

<p>首选创建项目目录，然后在项目目录中初始化：</p>

<pre><code class="bash">mkdir vagrant_guide
cd vagrant_guide
vagrant init
</code></pre>

<p>init命令会创建一个基本的Vagrantfile，暂时先不修改它。下一篇我们来看如何添加Django开发需要的配置以及如果build一个 <code>base box</code> 来给其他人使用。</p>
]]></content>
  </entry>
  
</feed>
