<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: configuration | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/configuration/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-04-02T23:08:56+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[First steps on a new server]]></title>
    <link href="http://lenciel.com/2013/04/first-steps-on-a-new-server/"/>
    <updated>2013-04-04T08:44:00+08:00</updated>
    <id>http://lenciel.com/2013/04/first-steps-on-a-new-server</id>
    <content type="html"><![CDATA[<p>一般来说，新开张的小团队不会养专职的运维和部署团队。一般服务器开发的项目组会有人兼职做这部分的事情。刚开始的时候这部分的工作量一般也不大，但是随着租用的服务器越来越多，兼职的人就会发现自己是在打上甘岭战役————坡越来越陡。</p>

<p>因此，一个简单而有效的标准流程是非常必要的。ZooM团队的服务器都会配置两个固定的帐号： <code>root</code> 和 <code>deploy</code> 。 <code>deploy</code>  这个用户具有 <code>sudo</code> 的权限。开发人员使用deploy但是不通过用户名密码登录而是用 <code>public key</code> 。这样一来，只需要保证所有机器的 <code>authorized_keys</code> 文件同步即可。后面要做的改进是：</p>

<ul>
<li>在所有机器禁止通过 root 账号进行ssh</li>
<li>在所有机器上限制可以ssh的IP范围</li>
</ul>


<p>这样的实施方案对 <code>authorized_keys</code> 的保密性和正确性要求是很高的，但是在没有专门IT的时候，对我们这样的小团队基本是够用的。下面是详细的步骤：</p>

<p>我们拿到的第一台机器是Ubuntu的，因为 <code>Gitlab</code> 只有Debian的版本。后面的机器大多会是CentOS，所以使用的命令可能会稍微有调整，但是意思是不变的。</p>

<a name="L......root......"></a>
<h2>更换root密码</h2>

<pre><code class="bash">passwd
</code></pre>

<p>可以很长很复杂（反正也不需要记得），保存在某个地方在你忘记 <code>sudo</code> 密码或者是不能正常 <code>ssh</code> 的时候能找出来用就可以了。</p>

<a name="L............"></a>
<h2>更新系统</h2>

<pre><code class="bash">apt-get update
apt-get upgrade
</code></pre>

<a name="L......Fail2ban"></a>
<h2>安装Fail2ban</h2>

<pre><code class="bash">apt-get install fail2ban
</code></pre>

<p>Fail2ban是一个用来监控登录尝试的 <code>daemon</code> ，可以有效侦测和防止可疑行为的发生。这个工具文档很全，而且出厂配置就很齐全，几乎不需要定制就能投入使用了。</p>

<a name="L......deploy......"></a>
<h2>添加deploy用户</h2>

<pre><code class="bash">useradd deploy
mkdir /home/deploy
mkdir /home/deploy/.ssh
chmod 700 /home/deploy/.ssh
</code></pre>

<a name="L........code.public.key..code.."></a>
<h2>配置 <code>public key</code> </h2>

<p>使用密码的日子已经慢慢过时了，这方面Github很有<a href="https://help.github.com/categories/56/articles">贡献</a>。只需要：</p>

<pre><code class="bash">vim /home/deploy/.ssh/authorized_keys
</code></pre>

<p>把 <code>id_rsa.pub</code> 的内容拷贝进去。然后：</p>

<pre><code class="bash">chmod 400 /home/deploy/.ssh/authorized_keys
chown deploy:deploy /home/deploy -R
</code></pre>

<p>当然你也可以使用 <code>id_rsa.pub</code> 之外的key，然后在本地的 <code>~/.ssh/config</code> 里面对 <code>IdentityFile</code> 做指定。具体方式可以查看 <code>~/.ssh/config</code>的说明。</p>

<a name="L......deploy.................code.Sudo..code........"></a>
<h2>测试deploy用户并赋予 <code>Sudo</code> 权限</h2>

<p>先测试deploy是否能够正常登录，然后使用 <code>root</code> 账号设置密码：</p>

<pre><code class="bash">passwd deploy
</code></pre>

<p>这是团队要用来 <code>sudo</code> 的账号，所以要弄得有意义好记一点儿。接下来：</p>

<pre><code class="bash">visudo
</code></pre>

<p>注释掉所以已经存在的用户、用户组权限，然后加上：</p>

<pre><code class="bash">root    ALL=(ALL) ALL
deploy  ALL=(ALL) ALL
</code></pre>

<a name="L......SSH"></a>
<h2>锁定SSH</h2>

<p>设置ssh，禁止使用密码ssh，禁止使用 <code>root</code> 账号ssh。</p>

<pre><code class="bash">vim /etc/ssh/sshd_config
</code></pre>

<p>添加下面的设置：</p>

<pre><code class="bash">PermitRootLogin no
PasswordAuthentication no
</code></pre>

<p>如果有需要还可以限定可以ssh的ip地址：</p>

<pre><code class="bash">AllowUsers deploy@(your-ip) deploy@(another-ip-if-any)
</code></pre>

<p>重启ssh：</p>

<pre><code class="bash">service ssh restart
</code></pre>

<a name="L..............."></a>
<h2>设置防火墙</h2>

<p>Ubuntu提供了 <code>ufw</code>，所以只需要：</p>

<pre><code class="bash">ufw allow from {your-ip} to any port 22
ufw allow 80
ufw allow 443
ufw enable
</code></pre>

<a name="L........................"></a>
<h2>打开自动安全更新</h2>

<p>虽然很多习惯好的服务器使用者会知道运行<code>apt-get update/upgrade</code> 但是如果服务器很多，总会有一些不那么被经常登录的机器，系统会比较陈旧。特别是做负载均衡的机器，可能很少有人登录。为了保证所有的机器都有足够的安全性需要打开自动更新（作为习惯控制一切的开发人员，自动更新总是一件让我很抗拒的事情，但是安全漏洞更让人抗拒）：</p>

<pre><code class="bash">apt-get install unattended-upgrades
vim /etc/apt/apt.conf.d/10periodic
</code></pre>

<p>在文件里面修改成：</p>

<pre><code class="bash">APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
</code></pre>

<p>接着修改：</p>

<pre><code class="bash">vim /etc/apt/apt.conf.d/50unattended-upgrades
</code></pre>

<p>修改文件成：</p>

<pre><code class="bash">Unattended-Upgrade::Allowed-Origins {        
    "Ubuntu lucid-security";
    //"Ubuntu lucid-updates"; 只更新安全更新
};
</code></pre>

<a name="L......Logwatch"></a>
<h2>安装Logwatch</h2>

<p>Logwatch是一个监控你的日志并发送邮件通知的daemon。</p>

<pre><code class="bash">apt-get install logwatch
vim /etc/cron.daily/00logwatch
</code></pre>

<p>在文件中添加：</p>

<pre><code class="bash">/usr/sbin/logwatch --output mail --mailto lenciel@gmail.com --detail high
</code></pre>

<a name="What.s.Next"></a>
<h2>What&rsquo;s Next</h2>

<ul>
<li>使用Puppet自动化这些配置</li>
<li>在基础的配置上，把一个fresh的机器如果配置成各种形态的（Django/Web/Database/LoadBalance/&hellip;)</li>
</ul>

]]></content>
  </entry>
  
</feed>
