<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rants | @Lenciel]]></title>
  <link href="http://172.16.121.110:4000/categories/rants/atom.xml" rel="self"/>
  <link href="http://172.16.121.110:4000/"/>
  <updated>2017-04-06T19:01:30+08:00</updated>
  <id>http://172.16.121.110:4000/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[编程语言里的类型系统]]></title>
    <link href="http://172.16.121.110:4000/2016/09/types-in-programming-languages/"/>
    <updated>2016-09-21T19:53:18+08:00</updated>
    <id>http://172.16.121.110:4000/2016/09/types-in-programming-languages</id>
    <content type="html"><![CDATA[<p>这两天看了“<a href="http://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653">FP in Scala</a>”的作者Paul Chiusano关于静态类型语言的优点的一篇<a href="https://pchiusano.github.io/2016-09-15/static-vs-dynamic.html">blog</a>。刚好最近在看很多Scala写的代码，仔细一想，好像大多数语言都在尝试把类型系统加强（不仅仅是Scala、Swift、Rust这些当红的，连<a href="https://ceylon-lang.org/">Ceylon</a> 这样的语言也越来越火了）。</p>

<p>所以也结合之前看过的一些文章(<a href="https://github.com/tel/old-blog/blob/master/_posts/2014-07-08-all_you_wanted_to_know_about_types_but_were_afraid_to_ask.md">1</a>, <a href="https://github.com/tel/old-blog/blob/master/_posts/2014-08-08-six_points_about_type_safety.md">2</a>, <a href="https://danluu.com/empirical-pl/">3</a>, <a href="https://gist.github.com/garybernhardt/122909856b570c5c457a6cd674795a9c">4</a>)，对类型系统打个总结。</p>

<a name="L......"></a>
<h3>类型</h3>

<p>“类型”，顾名思义就是一组可能的值的集合。比如整型，那么它可能的值是整数的集合；布尔型，它可能的值是true或者false。我们可以定义任何的“type”，比如一个叫“ISO9001”的type，它可能的值如果不是ISO就是9001：这不是个整型，也不是个字符串型，它就是一个专门的特殊的类型。</p>

<p>静态类型语言里，变量的类型是确定好的：如果x是整型，那么如果你写了<code>x=true</code>这样的赋值，编译器在编译时就会报错。不同的静态类型语言有不同程度的表达能力，但是它们支持的类型是确定的。</p>

<p>动态类型语言里，对值进行了类型的划分：它知道1就是整型，true就是布尔型。但是变量是什么类型却是不确定（动态）的。</p>

<a name="L.................."></a>
<h4>静态类型语言</h4>

<p>大多数静态类型语言需要做类型声明。比如java里面<code>public int add(int x, int y)</code>这样，对参数和返回值都需要声明类型。</p>

<p>也有一些静态类型语言不这么做，比如Haskell里面同样的函数写法是<code>add x y = x + y</code>。虽然没有显式地声明它类型，但是因为在这门语言里面，<code>+</code>操作符只能用在数值类型上面，所以x和y就都是数值类型的。需要理解的是，这种省略并不意味着静态特质的降低，相反，Haskell的类型比Java要严格和强大得多。</p>

<p>声明了类型，在编译期就进行类型检查，如果不满足就报错，是静态类型语言一个很大的优点。比如大多数静态类型语言都不允许<code>"a"+2</code>这样的写法（C语言很特立独行地支持了），每个静态类型语言里面的表达式，都在执行前就有一个确定的返回类型。</p>

<a name="L.................."></a>
<h4>动态类型语言</h4>

<p>像前面说的动态类型不需要声明类型，编译器也不会做推测，只在运行时才知道变量确切的值（这也是动态的意思所在）。</p>

<p>比如一个python函数：</p>

<pre><code class="python">def f(x, y):
    return x + y
</code></pre>

<p>它可以被用来做两个数相加，可以是字符串连接，甚至可以是list的合并。在运行时程序会检查x和y是什么类型的值。如果都是整型，就把数值加起来，如果是字符串，就把字符串粘起来，如果是一个整型一个字符串，那么很可能就要报错。</p>

<p>大多数动态语言，都会像Python一样，在运行时报出类型错误（JS是个例外，它对任何表达式都会返回一个值，而不是报错），因此，使用动态语言，<code>"a"+1</code>这样的错误也需要在实际运行时才会被检查出来。</p>

<a name="L....................."></a>
<h4>强类型和弱类型</h4>

<p>术语“强类型(strong typing)”和“弱类型(weak typing)”是用得非常模糊的：</p>

<ul>
<li>有些时候，“强”表示静态类型。如果你在讨论或者是写东西的时候，要说的是静态类型语言，那就直接说，不要用<code>强类型语言</code>这样的术语</li>
<li>有些时候，“强”表示不会做隐式的类型转换。比如JS里面允许<code>"a"+1</code>，其实内部是做了隐式的类型转换，这个时候人们说它是<code>weak typing</code>的，而不是强的。但是几乎所有的语言都会允许整型和浮点型相加，允许这个的语言是强还是弱呢？没有标准。人们这样说的时候，一般的意思是，如果这样的转换是不可接受的（会造成自己觉得很低级的类型错误在生产环境上运行时才被发现），就认为它是“弱类型”，相反，就觉得是“强类型”</li>
<li>有些时候，“强”表示我们不能做这个语言规则不允许的类型转换</li>
<li>有些时候，“强”表示是memory-safe的。C就是典型的虽然是静态类型，但是不是memory-safe的语言。</li>
</ul>


<p>下面这个表可以说明常见的一些语言是如何被带入一团迷雾的：</p>

<table>
<thead>
<tr>
<th> 语言  </th>
<th> 类型? </th>
<th>隐式转换? </th>
<th> 有类型转换规则? </th>
<th> 内存安全? </th>
</tr>
</thead>
<tbody>
<tr>
<td> C          </td>
<td> Strong  </td>
<td> Depends               </td>
<td> Weak            </td>
<td> Weak         </td>
</tr>
<tr>
<td> Java       </td>
<td> Strong  </td>
<td> Depends               </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> Haskell    </td>
<td> Strong  </td>
<td> Strong                </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> Python     </td>
<td> Weak    </td>
<td> Depends               </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> JavaScript </td>
<td> Weak    </td>
<td> Weak                  </td>
<td> Weak            </td>
<td> Strong       </td>
</tr>
</tbody>
</table>


<p>由于“强”和“弱”的使用是如此的上下文相关又如此的混乱，所以最好不要使用这些术语，而是描述具体的问题：“JS在我们把字符串和整型相加的时候会正常返回，而Python会报错”比“JS是弱类型的，而Python是强类型的”有意义得多。这样我们在讨论中就不会花时间去纠缠在本来就不是很清晰的术语上了。</p>

<p>就像Chris Smith<a href="https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/">写过的那样</a>:</p>

<p><blockquote><p>Strong typing: A type system that I like and feel comfortable with<br/>Weak typing: A type system that worries me, or makes me feel uncomfortable</p></blockquote></p>

<a name="L.....................Gradual.Typing..."></a>
<h4>渐进的类型化（Gradual Typing）</h4>

<p>我们能不能给动态语言添加静态类型呢？在有些情况下，我们可以；在其他情况下，这非常难，甚至是不可能的。</p>

<p>最明显的问题就是<code>eval</code>或者别的动态语言里面的类似的功能。<code>1+eval("2")</code>在Python里面会返回3，但是<code>1+eval(read_from_network())</code>会返回什么？这要看read_from_network()返回的是什么了。这种只有在运行时才知道结果的语句，是没有办法添加静态类型的支持的。</p>

<p>为了使<code>eval()</code>被合法使用，有个不太让人满意的做法就是把返回值设成Any这个type，就好像很多OO语言里面返回Object，或者是Go语言里面返回<code>interface{}</code>。之所以这不太让人满意是因为，这样一来，类型系统的功能也就被去掉了。所以如果一个语言有<code>eval</code>语法，同时又有类型系统，那么当你使用<code>eval</code>语句的时候，类型安全就不能被保证了。</p>

<p>有些语言允许所谓的optional或者是gradual typing：在默认情况下，类型是动态的，但是你可以声明静态的annotation。Python最近添加了这个功能；Typescript作为Javascript的superscript也有optional types；Flow会对普通的javascript代码做静态类型分析。这些语言之所以提供这些，是希望拥有一些静态类型语言的优势，但是和静态语言提供的类型保证相比，其实是很弱的：因为有些方法是动态类型的，有些方法又是静态类型的，程序员还需要自己来管理其中的差异化的东西。</p>

<a name="L................................."></a>
<h4>静态类型语言代码的编译</h4>

<p>静态类型的语言写的代码在编译的时候，编译器会先检查语法，然后检查类型。因此，有时候你修复了一个语法的错误，可能会看到一堆的类型的错误。这些错误并不是修复语法错误带来的，而是之前就有的，只是编译器没法在语法正确之前，去找出类型的错误。</p>

<p>一旦语法和类型都正确了之后，编译器就可以生成可执行的代码。静态类型的语言生成的代码执行起来通常比动态类型快：当你知道被加的是整数，你就可以使用CPU内置的ADD命令。如果需要动态的评估操作的是什么类型，要怎么返回或者是报错，都会花掉额外的时间。虽然有很多技术，比如JIT（Just-In-Time）编译器可以在运行时收集到需要的信息后recompile一次生成比完全动态更快的代码，但是和静态语言比如Rust写出来的程序比，运行起来还是要慢一些的。</p>

<a name="L.........................................."></a>
<h4>关于静态类型和动态类型的争论</h4>

<p>静态类型语言的推崇者指出，如果没有一个严格的类型系统，那么一个微小的类型错误就可能导致生产环境崩掉。这当然是真的，所有使用过动态类型语言的同学肯定都遇见过。</p>

<p>动态语言的推崇者认为，动态语言写起来要容易一些。视你写的代码究竟用来干嘛而言，这可能是对的，也可能是错的。Rich Hickey关于“easy”有个<a href="https://www.infoq.com/presentations/Simple-Made-Easy">很经典的讲座</a>，特别清楚的阐明了“easy”和“simple”的关系，以及你为什么要小心“easy”。不同的动态语言的设计者，对类型系统的考虑也就视他们想开放多少控制权给开发者自己控制，实现得非常不同。</p>

<p>比如，Javascript的策略是尽量继续执行，即使<code>"a"+1</code>这样的语句明显不是很合理了，它也会返回<code>a1</code>。Python则倾向于尽可能的报错。所以虽然都是动态语言，设计上的思路是非常不同的。</p>

<p>比如，C允许你从内存的任意地址读取，也允许你把一个类型的值当成任意别的类型来操作，即便这样会造成crash。Haskell，则要求哪怕是整型和浮点型相加，也需要显式的做一次类型转换。所以虽然都是静态语言，设计上的思路也是非常不同的。</p>

<p>因此，任何类似于“静态语言比动态语言在某个方面好”的论断都是没有意义的。只有具体到语言，才可以进行这样的讨论，比如：“Haskell在某个方面比Python做得好”。</p>

<a name="L.............................."></a>
<h4>静态类型系统的多样性</h4>

<p>我们再来仔细看看两个著名的静态类型语言：Go和Haskell。</p>

<p>Go的类型里面没有generic类型：就是由其他类型来构成的类型。比如我们可能想自己构建一个MyList类型，可以保存任何类型的数据列表，可以是整数的列表，也可以是字符串的列表等等。编译器自己需要来处理对类型的限制：如果我们往一个用来放整数的MyList里面放了字符串，编译器需要拒绝程序。</p>

<p>Go在设计上就故意没有支持MyList这种generic的类型。要实现类似的功能，你只能定义一个“empty interface”：这样MyList可以用来放任何类型，但是compiler没有办法知道究竟是什么类型。当我们从MyList里面获取对象的时候，我们需要自己来告诉compiler对象的类型。如果你说你获取的是个字符串，但是拿到的是个整型值，就会发生运行时的错误：这很像动态语言。</p>

<p>Go还缺乏很多现代静态语言的功能，甚至连很多70年代的静态语言就支持的功能也没有。它的设计者做这样的决定自然有自己的考虑，但是使用者里面对这些功能的呼声是很高的。</p>

<p>再来看看拥有强大的类型系统的Haskell。如果我们要定义一个整型的MyList，只需要这么写“MyList Integer”。在声明之后，Haskell就会让这个列表里面只能放整数而不是字符串了。</p>

<p>Haskell还能表达更复杂的语义。比如<code>Num a =&gt; MyList a</code>表示，一个数值类型的列表：可以是整数，或者浮点数等，但不会是一个字符串。</p>

<p>用Haskell你很容易编写适合于多个类型的函数。比如<code>Num a =&gt; (a -&gt; a -&gt; a)</code>表示：</p>

<p>这是个数值类型的函数（Num a =>)
这是函数有两个类型为a的输入参数，然后返回一个类型为a的值（a -> a -> a）</p>

<p>再看一个可能更夸张的例子：<code>String -&gt; String</code>表示函数的参数是字符串，返回也是字符串；而 <code>String -&gt; IO String</code>表示，函数参数是字符串，然后要做一些IO操作（可能是磁盘的IO，也可能是网络的IO等等），然后返回字符串。</p>

<p>这样精细的类型定义有什么好处呢？</p>

<p>比如，在写一个Web应用的时候，我们就可以一眼看出这个函数会不会动数据库。这是大多数语言没有办法提供的便利，即使大多数静态类型语言也没有办法提供：绝大多数语言需要我们一行行去检查它有没有IO的操作，这个过程既麻烦又容易出错。</p>

<p>和Go比一下，前者连MyList那样简单的概念都没有办法很好的表示，更不用提“一个有两个数值型参数的，会做一些IO操作后，返回一个数值类型参数”这样复杂的语义了。</p>

<p>Go的设计思路毫无疑问可以让使用它编写适合用它编写的程序变得容易（首先，设计Go的compiler就要容易很多），同时也使得学习Go变得容易。这些优势，与Go的显而易见的限制，究竟会给你的开发工作带来正面还是负面的影响，很多时候是跟问题域相关的，非常主观的事情。</p>

<p>Go和Haskell如此的不同，也使得把它们统称为“静态类型语言”表达的意思非常模糊：虽然这样说确实是没有错的。所以再次提醒，把动态类型语言和静态类型语言分成两组来比较一些东西的时候，一定要记得语言的多样性。比如我们说运行起来的安全系数（不发生类型错误导致runtime erro的系数），那么Go和C，甚至比Python这样的动态语言问题还大。</p>

<a name="L.........................................."></a>
<h4>不同的类型系统表达能力的实例</h4>

<p>编程语言的类型系统越强大，我们表达的粒度就可以越精细。</p>

<p>比如写一个求和的函数，在Go里面，我们只能表达“函数有两个整数类型参数，并且返回一个整数类型”：</p>

<pre><code>fuc add(x int, y int) int {
     return x + y
}
</code></pre>

<p>对浮点类型，我们可能就需要再写一个。</p>

<p>在Haskell里面，我们可以定义“函数有两个数值类型的参数，并且返回一个和输入参数类型相同的类型”：</p>

<pre><code>add :: Num a =&gt; a -&gt; a -&gt; a
add x y = x+y
</code></pre>

<p>而在Idris里面，我们可以定义“函数有两个整数类型参数，但是第一个必须比第二个小”</p>

<pre><code>add : (x : Nat) -&gt; (y : Nat) -&gt; {auto smaller : LT x y} -&gt; Nat
add x y = x + y
</code></pre>

<p>我们如果在调用的时候写了<code>add 2 1</code>，那么编译器就会直接报错。非常少语言有这样的表达能力，大多数时候我们要做类似的check只能在runtime，所以我们只能写类似于<code>if x&gt;=y : raise SomeError()</code>的语句。</p>

<p>所以，越强的类型系统，表达能力就越强，但是也要注意的是这样语言的复杂度也上去了。</p>

<p>我们可以看看按类型系统由弱到强排列的一些常见的编程语言：</p>

<ul>
<li>C (1972), Go (2009): 类型系统很弱，甚至连generic的类型都不支持</li>
<li>Java (1995), C# (2000): 支持generic的类型</li>
<li>Haskell (1990), Rust (2010), Swift (2014): 提供了更强大的类型系统</li>
<li>Agda (2007), Idris (2011): 类型系统更加强大，但是学习的人还很少（虽然学了的人都表示亢奋）</li>
</ul>


<p>随着时间推移，具备更强大的类型系统的语言有着越来越流行的趋势（这个趋势从很多动态语言里面被加入了gradual typing的功能也能感受到）。而火爆的Go应该是一个蛮特别的反例，它也被很多推崇更强大类型系统的静态语言用户者批判它的设计者在开倒车。第二组里面的Java和C#是目前被广泛使用的，有成熟生态系统的语言。第三组是目前有了进入主流趋势的，有着大公司在背后支持的（比如Mozilla的Rust或者是Apple的Swift）。第四组看起来还离主流很远，但是究竟后面会不会有凶猛的发展势头也很难说清：就像第三组里面的这些语言十年前也没人知晓一样。</p>

<p>下面，让我来一段魔性的代码：</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int addi(int a, int b) {
    return a + b;
}

char *adds(char *a, char *b) {
    char *res = malloc(strlen(a) + strlen(b) + 1);
    strcpy(res, a);
    strcat(res, b);
    return res;
}

#define add(a, b) _Generic(a, int: addi, char*: adds)(a, b)

int main(void) {
    int a = 1, b = 2;
    printf("%d\n", add(a, b)); // 3

    char *c = "hello ", *d = "world";
    printf("%s\n", add(c, d)); // hello world

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一碗滚烫的鸡汤]]></title>
    <link href="http://172.16.121.110:4000/2016/09/what-you-want/"/>
    <updated>2016-09-08T20:03:03+08:00</updated>
    <id>http://172.16.121.110:4000/2016/09/what-you-want</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2016_09/the_player_choose_to_die.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>费福尔特，37岁的比利时名将，上届伦敦残奥会T52级女子轮椅短跑100米冠军和200米的亚军，一边积极备战即将到来的奥运会，一边在准备葬礼：她宣布在比赛后会安乐死结束自己的生命。</p>

<p>不知道到时候我们会以怎样的心情来观看这样一场比赛。</p>

<p>人很多时候是受欲念牵引的，没有那一念了，什么都失去了意义，包括生命。</p>

<p>对有的人来说这一念是钱，对有的人来说是权，对有的人来说是名。</p>

<p>对有的人来说是学习，对有的人来说是创造，对有的人来说是给予。</p>

<p>对有的人来说是一家人开开心心，对有的人来说是自由自在不受束缚。</p>

<p>更多的时候，它究竟是什么，人们自己也不知道。</p>

<p>因为社会生活对人们造成的影响是巨大的。</p>

<p>大到各种制度法规道德戒律，小到那些我们觉得是鸡汤的文章、书籍、视频，都潜移默化地影响着你，说服了你，按照它们推崇的规矩去思考和生活。</p>

<p>你如果看了<a href="http://www.goodbyewarden.com/">足够多的遗言</a>，会发现很少会有人为那些做过的事后悔。在生命的尽头，大家都为自己没有去做的事后悔。</p>

<p>因为我们循规蹈矩惯了，就会意识不到现在正在做的事情，对于整个生命是否有意义的重要性。</p>

<p>那么我们现在做什么？</p>

<p>我觉得首先要直面自己的欲念。</p>

<p>不管是你想赚钱，还是你想变得很有名。</p>

<p>不管是你想变得很自由，还是你想闭门钻研知识。</p>

<p>不管是你想创造一个平台广泛地影响很多人，还是你要倾注心血好好地疼爱一个人。</p>

<p>人的精力有限，如果每个方面都要去求个平衡，你就会有很多内心冲突。</p>

<p>所以不妨对自己和对别人都先承认，此时此刻，这就是你生命中最重要的事情。</p>

<p>你可能会听到别人说你贪婪，或者任性，或者自私。</p>

<p>这样说的人可能很多，或者这人对你很重要，让你怀疑起自己来。</p>

<p>但要记住其实你选什么都会有人说你是错的，你才对自己的生命有选择和改变选择的权力。</p>

<p>大大方方地承认之后，就全力以赴地去追求就好。</p>

<p>真正的“全力以赴”很多时候是反直觉的。比如你本来年薪百万，但突然意识到你觉得让自己生命有意义的事情，是让贵州小学的孩子们能够有热菜热饭吃。那么真正的“全力以赴”，不是辞职跑去贵州的小学里面做饭，而是赚更多的钱，给孩子们修很好的食堂（除非实际上让你觉得自己的生命更意义的事情，是你拥有更好听的名声，那也承认它就好，追求这个的很多人其实也不错）。</p>

<p>我觉得这个世界，就是大大方方承认自己要什么，并且全力以赴去追求的人太少了，反而给了不择手段偷鸡摸狗的岳不群们很多空间。</p>

<p>来，干了这碗鸡汤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一颗赛艇]]></title>
    <link href="http://172.16.121.110:4000/2016/05/the-exciting-writings/"/>
    <updated>2016-05-06T04:26:09+08:00</updated>
    <id>http://172.16.121.110:4000/2016/05/the-exciting-writings</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2016_05/jpm.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>昨天立夏，闷热异常，晚上终于来了几声雷，却是雷声大雨点小。</p>

<p>到了半夜，突然热闹起来。大雨不懈，夜风也疾，白筋鞭窗，噼啪不止。</p>

<p>我在客厅里伴着这电闪雷鸣写程序，场面看起来应该多少有些一颗赛艇。</p>

<p>如果不是键盘敲得太响，有绰约的女鬼来袭也说不定。</p>

<p>社会主义国家家长们都不怎么讲鬼故事，本座对鬼的印象一开始来自书：虽然《西游记》连续剧里面各式各样的鬼怪很多，但因为形象太具体，反而不会觉得他们有多鬼，看过就不会去想。而书里面要精彩很多：子路和孔子除开创办Subway，还讨论怪力乱神；迅哥儿说起保姆跟《山海经》，头头是道；《聊斋》里面的狐狸系最丰富多彩，特别是在表哥还是表姐家里找到的那本未删节的，多少个夜晚，一颗赛艇。</p>

<p>到了王祖贤的小倩和张曼玉的青蛇出现，女鬼可爱程度突然达到了顶峰，同时也让人明白之前电视里的鬼不招人惦记，并不是因为形象太具体了。可惜好景不长，日韩女鬼不远万里来袭：这些女鬼，就真的有些吓人了。</p>

<p>再到了大学，鬼的来源又丰富了些。贾平凹的各种鬼，莫言的各种鬼，张爱玲的小红人，但这些鬼虽然生动，却不那么浪漫了。</p>

<p>一颗赛艇的内容，还是跟鬼没有关系的书里面多一些。</p>

<p>而作为一名还算看过些书的同学，本座得说，大概是因为古往今来大多数中国人这方面比较压抑，写作水平整体偏低（这方面不压抑的都不会沦为作家吧）。表现在白描太多，暗示太少，偶尔臆想一下，鲁莽粗俗，一点儿幽默感都没有。相比之下，大概神仙们就比较乱来，西方文学作品里咸湿的地方一直相当咸湿（有人专门研究莎士比亚的这方面还写了《<a href="https://www.amazon.com/Filthy-Shakespeare-Shakespeares-Outrageous-Sexual-ebook/dp/B002XW28D0?ie=UTF8&amp;btkr=1&amp;ref_=dp-kindle-redirect">Filthy Shakespeare</a>》），不说男女之情，连同性的爱情也写得相当感人。当然，你只要看过电影《莎翁情史》（这部电影给本座的另外一个感受就是Gwyneth Paltrow确实不是Chris Martin能hold住的）就会明白这主要还是日子过得不一样。</p>

<p>比如说到这方面绕不过去的《金瓶梅》，连太祖这样的“仙人洞，在险峰”路数的选手都批评作者<a href="http://history.sohu.com/20150911/n420836423.shtml">对女性角色缺乏善意</a>。但是你要明白，《金瓶梅》就算非常不错的水准了，太祖可是翻来覆去地看，如果有豆瓣，书评至少提交五次。而不幸出生在南京传教士家庭的《金瓶梅》英译版作者芮效卫一翻就是40年，按<a href="http://news.inewsweek.cn/detail-634.html">介绍里面</a>说，从17岁拿起《金瓶梅》就再也没放下：如果是在国外，大概并不需要放不下它吧。</p>

<p>再比如说到这方面绕不过去的贾平凹老师，一部小说至少十来句“下面湿了”，湿是湿了，还不如树新风足球队“最近下面有点儿咸你要不要吃”好玩。</p>

<p>因为这方面很残，中国的故事里面很少有被爱一方可以好好欣赏对方可爱之处的设定：无论是西门庆潘金莲，还是白娘子祝英台，爱恋的对象要么异常淫荡，要么非常无趣。</p>

<p>但咱们也有例外。</p>

<p>比如汤显祖老师的《牡丹亭》。</p>

<p>有掉书袋的：</p>

<p><blockquote><p>“他倚太湖石，立着咱玉婵娟。待把俺玉山推倒，便日暖玉生烟。捱过雕栏，转过秋千，掯着裙花展。敢席着地，怕天瞧见。好一会，分明美满，幽香不可言！”</p></blockquote></p>

<p>有很市井的：</p>

<p><blockquote><p>“见了你紧相偎，慢厮连，恨不得和你肉儿般团成片也，逗的个日下胭脂雨上鲜。”</p></blockquote></p>

<p>有非常直白的：</p>

<p><blockquote><p>“无多，花影阿那。劝奴奴睡也，睡也奴哥。春宵美满，一霎暮钟敲破。娇娥，似前宵云雨羞怯讹，敢今夜翠颦轻可。睡则那，把腻乳微搓，酥胸汗帖，细腰春锁。”</p></blockquote></p>

<p>也有非常暗示的：</p>

<p><blockquote><p>“他兴心儿紧咽咽，呜着咱香肩；俺可也慢掂掂做意儿周旋，周旋。等闲间把一个照人儿昏善。这般形现，那般软绵，忒见一片撒花心的红叶儿吊将来半天，吊将来半天。敢是咱梦魂儿厮纒？”</p></blockquote></p>

<p>是不是让你觉得“自小孤单，生事微渺，每日情思昏昏”的柳梦梅过得还不错。</p>

<p>咦，女鬼还没来，天就亮了？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于工作与生活]]></title>
    <link href="http://172.16.121.110:4000/2015/10/the-solution-of-work-life-balance/"/>
    <updated>2015-10-04T00:06:16+08:00</updated>
    <id>http://172.16.121.110:4000/2015/10/the-solution-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2015_10/dilbert_work_life_balance.png" title="Don't touch me..." alt="work life balance" /></p>

<p>前面说了，<a href="http://lenciel.cn/2015/10/the-myth-of-work-life-balance/">Work Life Balance的神话其实并不靠谱</a>。</p>

<p>毫不奇怪，在本座自己发觉这点之前，我的家人们早就发现了这点。所以当柳青患癌这样的消息一出来，总会有人跟我说，“你看看，难道你觉得她这样值吗？”</p>

<p>有趣的是，出了这样的消息，创业的人特别是老板们也会问同样的问题：“你觉得，她这样值吗？”</p>

<p>其实这样的消息真会让我有挺多想法的，所以不如在这里整理一下，以便今后不管是谁有了三长两短，或者是自己真的不幸中招，都可以直接拿出来交卷。</p>

<p>简单地回答那个问题：我不知道值不值，这是她自己才清楚的事情。</p>

<a name="L.................."></a>
<h2>勤奋不会杀人</h2>

<p>我记得看过卡斯帕罗夫和卡尔波夫对局之后的一个采访，记者问他们除开象棋之外有什么爱好。</p>

<p>你们都见过那些跑文体档的记者，这也算是个常规的问题。结果卡尔波夫憋了半天，说，“集邮”。</p>

<p>然后卡斯帕罗夫憋了三个半天，说，“没有”。</p>

<p>这并不是个例，很多职业选手他们把自己的全部身心都放在了自己的项目上。</p>

<p>再比如我很喜欢的作家村上春树。有人问他为什么一定要关了酒吧去写小说，他的回答是：</p>

<blockquote>
<p>无论做什么事儿，一旦去做，我非得全力以赴不可，否则不得安心。将店铺随意交托给某个人，自己躲到别处去写小说，这种讨巧的事情我做不来。竭尽全力埋头苦干，还是干不好，就可以心安理得地撂开手了。然而，如果因为模棱两可、半心半意而以失败告终，懊悔之情只怕久久无法拂去。</p>
</blockquote>


<p>很多心灵鸡汤会把这些误读为”你一定要找到自己感兴趣的事情”，这其实很容易让人跳进火坑。从接触到感兴趣并不难，比如踢球，比如唱歌，比如写作，比如编程，很多人接触了会觉得很有兴趣。然而从爱好变成职业，就需要反复枯燥的练习并且和其他人进行竞争。如果你为一件自己仅仅是感兴趣的事情就调转了职业方向，很多时候都会感到后悔莫及。</p>

<p>要坚持下来真正熬出头，需要极度勤奋和高度专注，即便你的目标不是变成顶尖高手（那么大概不需要<a href="http://baike.baidu.com/view/3244949.htm">10000小时</a>），过程也会非常苦。</p>

<p>但熬过就是另一番天地。</p>

<p>所以看到柳青或者李开复的新闻，嘴上送着祝福，私下却暗自庆幸”你看我平平淡淡多好”的心态最好别有。患癌这事情面前，我国基本还是人人平等（没仔细研究过，记得主要是环境、食品和生活习惯诱发的基因里面的坏道造成的），治起来却是天壤之别：据说中国人要让自己全家所有人遇到大病时都能得到良好的治疗并体面地死去，大概需要2000万。我相信这对于柳青或者李开复来说问题不大，而“平平淡淡”的你路还很长。</p>

<p>还是放心赶路吧：勤奋根本不会杀人，相反，我认识的大多数勤奋的人，都是健康且快乐的。</p>

<p>因为他们不蛮干。</p>

<a name="L.................."></a>
<h2>勤奋不是蛮干</h2>

<p>什么是蛮干呢？</p>

<ul>
<li>没有主观能动性只是应付时间的行为是敷衍，这样的人很可恶。</li>
<li>有主观能动性但只会堆砌时间的行为是蛮干，这样的人很可怜。</li>
</ul>


<p>在我看来996上班制度或者规定每周上班80个小时就是鼓励蛮干。</p>

<p>看看阿里的人<a href="http://www.zhihu.com/question/23272060">自己怎么说996</a>你就知道，如果你鼓励的是蛮干，那总是蛮干都得不到：很多人只是敷衍而已。</p>

<p>这件事情曾经给了我很大的困扰。</p>

<p>工作上我一直被给予了很大的自由度，我也会给大家很大的自由度。</p>

<p>老板对一切都非常满意，但却有一个心结：集体加班不够多。</p>

<p>他常常也不好直说（因为实际效果上看目前是比以前输出高了不少），经常是在时机合适的时候提点一下我：“我们今天开会出来公司里面空空荡荡的”或者“过去某某是经常在公司干到12点以后的”。</p>

<p>我能理解他，他在著名的H公司干了十几年，管了几千人的研发团队。现在出来创业，他和其他几个管理层也确实很拼。市场突围，产品研发的压力这么大，难免从自己的办公室走出来看到空空荡荡的屋子有些不开心。</p>

<p>但我也确实没法同意建立打卡考勤或者集体加班这样奇怪的制度。</p>

<p>花更多的时间就可以多做出来点儿什么的想法，对研发团队是不太有效的。</p>

<p>就算是读书的时候，也总是有一些人你看他/她花的时间不多，但就是考试考得好。</p>

<p>反过来，也总是有一些学生，花再多的时间都没有用。</p>

<p>如果你稍微仔细看看后面这类学生为什么会有这样的处境，总会发现老师、学生和家长这三个角色至少有一个人心思已经不在提高成绩这件事情上了：可能是老师嫌学生烂，可能是学生嫌老师烂，可能是家长嫌学生烂&hellip;可能是每个人都觉得其他两个很烂&hellip;</p>

<p>研发需要看的是输出，是把问题搞定的能力，而不是谁在公司完成了三餐、球类运动、热门新闻追踪和存在感建设。</p>

<p>我见过很多想弯道超车的公司，搞运动般的加班，结果导致动作变形，连应该有的成绩都没法做出来。</p>

<p>这并不奇怪。</p>

<p>你去软件园地铁站门口随便拦住那帮背双肩包的，问问他们自己觉得质量不错又能上线的项目哪个是靠加班加出来的。</p>

<a name="L........................"></a>
<h2>所以工作和生活？</h2>

<p>所以工作和生活的节奏，是很私人的事情。</p>

<p>这意味着两方面的意思：对于个人来说，你应该保证自己有选择它的权力。而对于组织来说，不应该对个人进行过分的干涉。</p>

<p>组织和个人努力的方向，都应该是让有效时间内输出最大化：说简单一点儿，即便有必要加班，目的都应该是为了能尽早达到按时下班，而不是在公司里面形成一种”多花点儿时间就能做出更多东西”的错觉。</p>

<p><img src="/downloads/images/2015_10/no_one_wants_more_work.png" alt="" width="420" height="294" align="left" style="margin:5px"/></p>

<p>拿我个人来说，很长一段时间以来都很忙，每周工作时间常常超过80个小时。虽然也知道<a href="http://blog.sina.com.cn/s/blog_5d7e3c150100h2c8.html">人生是玩5个球</a>之类的道理，但却并不觉得自己的选择有什么问题：目前确实有那么多事情需要处理，自己又很愿意花时间去处理它们。</p>

<p>旁边这张图是表达，有很多道理我是知道的。只不过认定了工作和生活没法兼得，所以我准备串行处理：工作的时候疯狂工作，生活的时候好好生活。这样我既不会遗憾该勤奋的时候不够勤奋，也不会觉得什么像样的生活都没有过过。</p>

<p>我从小就是这样：如果自己想做的事情，在喜欢的时间，就希望尽全力的做个痛快。而如果是在不对劲的时间逼迫我，再喜欢的事情也不想去做。</p>

<p>所以我崇尚的节奏是年轻时（我还年轻么？），工作上勤奋一些，生活上享受一些。人上了年纪，有很多乐趣还可以慢慢享受：比如看书、旅行等等，有很多乐趣就已经不复存在：比如工作、美食、踢球和别的什么羞羞的乐趣（这里是不是可以另外开一篇讨论&hellip;）。</p>

<p>这样的选择非常私人，很可能是错的。但在组织的层面，用输出来衡量大家产出，比一切别的制度都重要，这肯定是对的。</p>

<p>因为这样的制度是真正公平的。</p>

<p>很多厉害的人在选择工作、领导或者团队的时候，能分辨和规避那些糟糕的选择，但往往会搞不清nice和fair谁更重要。</p>

<p>提醒一下，nice是奴隶制时期奴隶主常常玩的把戏，fair才是商业社会运作的根基。</p>

<p>不分青红皂白要求你加班，到了下班时间迫于气氛大家都不好意思走的公司当然去不得。
但公司对大家都不错，经理对大家都不错，这样的地方对真正有追求的人也未必是好去处。</p>

<p>反过来，那些面试的时候会说“我们加班非常多哦”的公司，未必就不能去。如果他们的考核方式是公平的，做的东西你也感兴趣，加入的时间看起来又比较正确，那很可能比去一家茶水间堆满了糖果前台比你历任女朋友都漂亮的公司要明智得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Life Balance的神话]]></title>
    <link href="http://172.16.121.110:4000/2015/10/the-myth-of-work-life-balance/"/>
    <updated>2015-10-02T22:35:05+08:00</updated>
    <id>http://172.16.121.110:4000/2015/10/the-myth-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2015_10/work_life_balance.jpg" title="Don't touch me..." alt="work life balance" /></p>

<p>最近有几个事情让我在这方面想了很多。</p>

<p>首先是那篇在业界掀起轩然大波的关于<a href="http://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html">Amazon高压管理制度</a>的《纽约时报》封面文章。由Jodi Kantor和David Streitfeld耗时6个月调查了100名Amazon离职和在职员工的这篇文章，细数了Amazon企业文化里面充满达尔文主义味道的部分：</p>

<ol>
<li>末位淘汰，并且建立通道让员工将身边同事的表现秘报给共同的主管</li>
<li>对流产或者患癌员工不但不给予关心，还进行低绩效考评或者工作上边缘化</li>
<li>每周超长的工作时间，经常有凌晨的邮件，并且要求及时处理</li>
</ol>


<p>其中一个叫Molly Jay的前Kindle项目组成员讲述的故事我印象最深：她说因为要照顾患癌的父亲，<em>一周不能达到80个小时以上的工作时间</em>，绩效考评就迅速下滑。甚至在父亲临终前希望晚上和周末少一些加班，不但被主管拒绝，甚至当着她的面说她"是个麻烦"，最后她选择了离开。</p>

<p>然后是周三凌晨看曼联队的欧冠球赛，解说聊起范加尔对续约还在犹豫时说：64岁的范加尔对媒体坦言希望仔细考虑一下是否继续执教球队，因为自己陪家人的时间太少了。而就在之前，65岁的温格因为类似的原因，<a href="http://www.chinanews.com/ty/2015/09-24/7541283.shtml">和自己59岁的太太离婚了</a>。</p>

<p>最后是<a href="http://36kr.com/p/5038027.html">柳青患癌的消息</a>刷爆了创业圈之后终于又刷爆了朋友圈。含着金钥匙出生，哈佛毕业，投行背景，拼到滴滴总裁，却年纪轻轻遭此恶疾，比之前李开复患癌的消息更让人觉得唏嘘。</p>

<a name="L.........Work.Life.Balance"></a>
<h2>说好的Work Life Balance</h2>

<p>在包括四大、投行、建筑、广告、传媒等等需要打鸡血的职业里面，程序员大概算蛮幸运的：因为我们这行大多数公司还是比较推崇<a href="http://www.forbes.com/sites/kathryndill/2015/07/17/the-best-companies-for-work-life-balance-2/">Work Life Balance</a>的。</p>

<p>一方面是因为在这个行业，顶尖人才永远是卖方市场，供不应求。为了留住人才，公司纷纷开出更人性化的福利和政策。</p>

<p>上班与休假方面的规定就是一面镜子。这些年本座眼看着无限制的年休假从少量公司的福利慢慢成为硅谷创业公司的标配，更有Netflix豪迈的<a href="http://edu.qq.com/a/20150806/020001.htm">新生儿父母一年带薪产假</a>。这些政策都是有数据支撑的：Google的女员工带薪产假延长至22周后离职率下降了50%。</p>

<p>另一方面是一些广为人知的道理又被大家抬出来温习。</p>

<p>包括这次Amazon的新闻一出，先后参与了Facebook和Asana的创建，31岁就已经攒下79亿美刀身家的<a href="http://www.forbeschina.com/review/billionaires/home/106757.shtml">达斯汀·莫斯科维茨</a>就发了<a href="https://medium.com/life-learning/work-hard-live-well-ead679cb506d">一篇雄文</a>表达自己的态度：如果能够再来一次，他希望自己在创建Facebook的过程中能够过得轻松一些。</p>

<p>文章里面提到的那个一周不能工作超过40个小时的理论，我<a href="http://lenciel.com/2013/05/the-myth-of-productivity/">之前也唠叨</a>过。实际上这个结论福特在1926年就调查得出了，并且开始<a href="http://www.history.com/this-day-in-history/ford-factory-workers-get-40-hour-week">实施在自己的汽车厂</a>。</p>

<a name="L.........Work.Life.Balance......"></a>
<h2>说好的Work Life Balance呢？</h2>

<p>然而别人家的公司与你的公司总是有差别的。</p>

<p>如果没有这篇Amazon内幕以及之后引发的世界范围内的大吐槽，广大的天朝码农经常都沉浸在”为什么受伤的总是我“的悲伤气氛中。</p>

<p>没错，移动互联网火热之前，国内IT企业标杆多是华为。大家都狼得没边儿，猛打猛拼。现在BAT火了，也不忘贡献<a href="http://baike.baidu.com/view/12867952.htm">996</a>为代表的各种疯狂制度。</p>

<p>过去我要安慰大家，只好说其实不仅仅天朝这样：从我经历过的项目来看，东亚和美国的IT人士们都非常非常苦逼。闲到十八摸这种程度，很多美帝的工程师只要我在线他就在线；之前M记的韩国大老板说在三星工作的时候，公司在办公室边上修了很多公寓以便员工不回家直接进去续命；日本台湾的就更不用说了&hellip;</p>

<p>现在好了，发现其实全世界大多数从业者的日子都没什么大的区别（注意我这里说的从业者不包括各路水货混子嘴炮流选手），真是给了本座莫大的安慰。</p>

<p>还在M记的时候，<a href="http://lenciel.com/2012/03/do-not-burn-out-yourself/">我就挺关注burnout</a>的，因为自己确实有过经历，所以很怕带的团队里有小伙伴中招。</p>

<p>出来创业为了大家不搞出内伤，我们不打卡不搞绩效不规定上下班时间不限制休假长度。</p>

<p>但即便如此，圣杯般的Work Life Balance并没有发生：至少本座没有体验到。</p>

<p>事到如今我终于可以认定它是不可能做到的：从事实上看如此，从道理上讲也应该如此。</p>

<p>工作和生活是两件需要同一个主体，你，投入身心的事情。你可以把两件都做得马马虎虎，你可以把其中一件做得不错另一件做得挺糟，你也可以把其中一件做得出类拔萃另一件完全不做。但你没法两头都做好，因为没有平行世界。</p>

<p>觉得自己都能做好的人，一定是参考的样本太过于局限：很多时候你需要和自己差不多资质的选手比较，才能发现更多的专注意味着什么。而实际上大多数真正做好了的人，资质比你更好并且比你专注多了。</p>

<p>所以呢？</p>
]]></content>
  </entry>
  
</feed>
