<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/android/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-05-02T17:08:47+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[定制机上恢复google原厂应用]]></title>
    <link href="http://lenciel.com/2013/12/restore-google-apps/"/>
    <updated>2013-12-18T22:33:00+08:00</updated>
    <id>http://lenciel.com/2013/12/restore-google-apps</id>
    <content type="html"><![CDATA[<p>最近因为移动的手机丢了，正好宽带升级到100M送了两个电信的卡没地方用，入了一个Rick推荐的电信移动双卡双待的机器：<a href="http://item.jd.com/824702.html">中兴N986</a>。</p>

<p>机器用来当小三机已经是非常不错了，唯一让本座纠结的就是电信的合约机老是喜欢把google账号干掉，而小弟的所有联系人又都在google（虽然现在看起来这么做可能也未必妥当）。</p>

<p>据Rick大大说，之前是可以用小米的<a href="http://app.xiaomi.com/detail/36925">谷歌应用下载器</a>来直接把Google的一干应用装回来。但是好像因为<a href="http://www.zhihu.com/question/21103129">Google不太愿意</a>自己的应用被未授权的雷总装来装去，这个应用已经没有更新了：青漾系统是4.2.1，下载回来的apk直接<code>adb install</code>会因为android版本不match报错。</p>

<p>于是只好去搜了<a href="http://www.teamandroid.com/gapps/">4.2.1的stock gapps包</a>回来自己撸 - <a href="http://pan.baidu.com/s/1iPXn">百度盘分享了一份</a>。</p>

<p>首先要root机器，然后把<code>/system/app</code>路径mount成rw的。</p>

<p>root就是刷recovery然后替换一些文件，当然大天朝有不少神器做得非常不错，比如<a href="http://www.mgyun.com/">刷机大师</a>这种软件，感觉会摧毁电脑城刷机青年的就业机会。而修改目录权限这种事情，如果你对命令行不熟，好像有很多流行的文件夹管理应用可以用来更改目录的权限。</p>

<p>然后，直接把下载回来的gapps.zip解压，进入<code>system/app</code>路径，将自己需要的apk往<code>/system/app</code>路径push就行了。</p>

<p>以Google联系人同步为例，就是：</p>

<pre><code class="bash">adb push GoogleContactsSyncAdapter.apk /system/app/.
</code></pre>

<p>这里要注意的就是所有Google的应用有些基础的依赖，要记得check一下/system/app下面是不是都有，比如<code>GoogleServicesFramework.apk</code>等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中使用ProGuard]]></title>
    <link href="http://lenciel.com/2012/02/integration-of-proguard-and-maven-in-android-projects/"/>
    <updated>2012-02-27T22:46:00+08:00</updated>
    <id>http://lenciel.com/2012/02/integration-of-proguard-and-maven-in-android-projects</id>
    <content type="html"><![CDATA[<p>今天被同事问到怎么在release版本里面所有的日志都去掉的时候，竟然只能回忆起用<code>ProGuard</code>做过这个，完全忘记怎么做的了，特立此存照。文章里面使用的例子放在<a class="network" href="https://github.com/lenciel/AMP" rel="me"><img src="/downloads/images/github_button.png" alt="" width="16" height="16" /> Android-Maven-ProGuard-Sample-App</a>。</p>

<a name="ProGuard......"></a>
<h4>ProGuard简介</h4>

<p>在移动设备上面开发应用程序，性能是一个很关键的指标。你的老板走过来要你提高性能的时候，你的第一反应有可能是抓起熟悉的工具花几个小时profile自己的应用，找出那些时间都花在哪里了。在使用这么终极的手段之前，千万不要忘记了先试试ProGuard。</p>

<p>做Android之前就是Java程序员的可能早就已经对ProGuard很熟悉了。简单的来说，ProGuard就是一个Java的class文件处理器，主要的功能类似奥运会口号：</p>

<ul>
<li>让你的程序变得更小更快</li>
<li>让你的程序变得更难被反向工程</li>
</ul>


<p>尽管ProGuard不是专用于Android开发的，但是在Android的SDK里面已经包括了这个工具，路径是<code>ANDROID_HOME/tools/proguard</code>，文档可以在<a href="http://proguard.sourceforge.net">http://proguard.sourceforge.net</a>看到。</p>

<p>让程序变得更小更快的好处是不言而喻的。ProGuard通过对bytecode进行优化，优化手段包括去掉无用的代码，去掉内联方法的调用，对类的继承结构进行优化，把所有能加上的<code>final</code>和<code>static</code>加上，以及对算术运算进行<a href="http://en.wikipedia.org/wiki/Peephole_optimization" target="_blank">Peephole optimization</a>等等。</p>

<p>让程序变得更难被反向工程就不一定是每个人都需要的了。一般情况下，对Android的反向工程是把Dalvik的bytecode转换成Java的bytecode，然后使用传统的Java反向工具转成成Java源代码。如果你的项目是开源的，显然也没有必要防止别人反向。但是如果是下面几种情况，你就很可能需要它了：</p>

<ul>
<li>你在源文件里面有一些不想被别人看到的信息，如密码等</li>
<li>你的代码里面有自己或者公司的赖以生存的知识产权</li>
<li>你的甲方有明确的要求</li>
<li>你的程序按license等方式收费，你不想被别人把licens检查的部分去掉重新编译个版本</li>
</ul>


<p>ProGuard可以帮助通过对类，方法和成员名称进行混淆，同时通过去掉结构化的信息，如文件名或者行号表等，来使得代码从理论上变得不可被反向工程。</p>

<p>如此看来，ProGuard真是美好事物一枚。但是ProGuard也不是随手一点药到病除的，也有一点学习曲线。</p>

<a name="L......ProGuard"></a>
<h4>启用ProGuard</h4>

<p>如果你使用Eclipse的ADT，每个新建的项目都会生成一个<code>proguard.cfg</code>文件在项目的根目录。你对ProGuard的所有设定就是在这个文件里面完成的。要想在项目里面启用Proguard，只需要把同样在项目根目录的<code>default.properties</code>里面加上：</p>

<pre><code class="bash">proguard.config=proguard.cfg
</code></pre>

<p>当然，如果你蛋疼到要自己去移动cfg文件的位置，也要记得去改等号后面的部分。然后，在所有的release版本的build里，你的Proguard就已经生效了。对于使用Eclipse的同学来说，release的build就是指通过选择Android Tools>Export Signed/Unsigned Application Package来进行。</p>

<p>因为在大多数开发中我们都会使用Ant或者是Maven来对项目进行管理，所以一般不会直接用Eclipse来进行release版本的编译，所以通常我们还要掌握如何在不使用ADT的情况下使用ProGuard。对于Maven而言，可以通过使用Maven Android plugin来完成。同时，由于ProGuard已经完全集成到Android的工具链里面了，所以Android的Ant任务里面也有一个专门的private任务叫做<code>-obfuscate</code>，会把激活并使用ProGuard作为release这个target的一部分，所以使用Ant的话只要一个ant release就可以了。</p>

<p>当ProGuard执行以后，会产生几个特别重要的文件：</p>

<ul>
<li><code>mapping.txt</code>：保存了混淆后的名字和混淆前名字的对应关系。对于每次release的build，都要记得保存这个文件，要不然如果你收到release版本上报出的defect的时候，就等着哭吧。</li>
<li><code>seeds.txt</code>：ProGuard找到的你的程序的entrypoint列表。</li>
<li><code>usage.txt</code>：ProGuard觉得没有用所以移除了的一堆类，域和方法的list。要想学习写作“完美”的ProGuard规则的同学就要经常来这个文件看看自己定下的rule对ProGuard的行为究竟有什么样的影响。如果你有用的类出现在list里面了，说明你削得太猛了，反之亦然。</li>
</ul>


<p>需要注意的是这些文件的输出目录。在使用Ant ProGuard target的时候，输出目录是<code>bin/proguard/</code>，但是如果是通过ADT(右键project>Android Tools>Export）的话，输出目录会是<code>proguard/</code>。</p>

<p>还有一个常见的困惑就是ProGuard是怎么找到那些需要处理的文件的。一般情况下，ProGuard希望你用<code>-injars</code>或者是<code>-libraryjars</code>来告诉它。但是对Android开发而言，Ant任务和ADT都会自动的查看你的<code>libs</code>，<code>output</code>和项目的<code>classpath</code>目录。</p>

<p>从执行过程的日志来看，ProGuard对类文件的操作分为三个步骤：shrink，optimize，obfuscate。每个步骤都是可选的，可以通过使用<code>-dontshrink</code>、<code>-dontoptimize</code>和<code>-dontobfuscate</code>来分别关掉。一般来说，不用因为结果“不如人意”就随意的关掉某个步骤。完整的进行三个步骤，然后不断的改变规则，直到达到最佳效果，是使用ProGuard的最佳方式。</p>

<a name="L......ProGuard......"></a>
<h4>编写ProGuard规则</h4>

<p>ProGuard和很多工具一样，其强大之处在于选项够多。作为Android开发者使用，首先心里要明白，没有一个唯一的最佳配置规则。在此基础上，去掌握一些对Android程序而言通常是适用的规则。然后，就像在文章里面已经反复强调过的一样，以这些规则为起点，反复的调整你的规则，找出一个对自己的程序最适用的规则。</p>

<p>当然，因为选项太多，ProGuard给初学者的感觉难免是千头万绪，无从下手。因此，我们可以从一个例子程序入手来找到对ProGuard的“感觉”。</p>

<p>这个例子本身没有任何特别之处，<code>MyButton</code>类继承自<code>Button</code>但是没有添加新的方法，可以通过它来观察ProGuard如何对继承结构进行压缩。Click的handler除开显示toast之外也没有特别的功能，可以通过它来观察ProGuard对方法名的混淆。<code>AMPSampleActivity</code>里面还专门有一个没有被调用的方法，可以通过它来观察ProGuard对这种情况的处理。下面是程序的入口Activity的实现：</p>

<p>我们期望ProGuard做的事情包括：</p>

<ul>
<li>保留<code>AMPSampleActivity</code>类，因为它是我们在XML里面指定的程序入口</li>
<li>保留<code>StringUtils</code>类和它的<code>repeat</code>方法</li>
<li>保留<code>myClickHandler</code>方法</li>
<li>保留<code>MyButton</code>类</li>
<li>去掉<code>unusedMethod</code></li>
<li>除开XML里面引用的类（<code>AMPSampleActivity</code>和<code>MyButton</code>），其他的类名都需要被混淆</li>
<li>除开XML里面引用的方法名（<code>myClickHandler</code>），其他的方法名都要被混淆</li>
<li>完成一些对Android而言通常适用的优化（下面会仔细展开）</li>
</ul>


<p>ProGuard的规则是“白名单”的，也就是说ProGuard只会对你特别指定的类刀下开恩。这也就是说，对任何程序，我们都至少要写一条规则，来保留程序的入口类。因为是Android程序，我们可以这么写：</p>

<pre><code class="java">-keep public class * extends android.app.Activity
</code></pre>

<p>这里我们可以看到ProGuard的rule用的语法基本上遵循了Java本身的语法（<code>extends</code>等等），但是它支持使用通配符。规则中的<code>-keep</code>告诉ProGuard不要删除也不要混淆任何从<code>android.app.Activity</code>继承的类。</p>

<p>很简单，不是吗？如果你这个时候运行程序，会看到：</p>

<pre><code class="java">org.lenciel.android/org.lenciel.android.AMPSampleActivity}: 
    ➥ android.view.InflateException: Binary XML file line #6: Error inflating 
    ➥ class org.lenciel.android.MyButton
</code></pre>

<p>为什么在inflate我们自定义的view的时候crash了呢？这是因为自定义的view是在XML里面被用到的，而不是在Java代码里面。因此ProGuard会认为这是没有用的代码而试着删除它。要保证这些自定义的view不被误删，就需要定义如下的规则：</p>

<pre><code class="java">-keepclasseswithmembers class * {
    public &lt;init&gt;(android.content.Context, android.util.AttributeSet); 
} 

-keepclasseswithmembers class * {
    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int); 
}
</code></pre>

<p>这两条规则告诉ProGuard不要对定义了可能被<code>LayoutInflater</code>调用的构造函数的任何类进行优化。我们这里使用了<code>-keepclasseswithmembers</code>而不是<code>-keep</code>。</p>

<p>再次运行，会遇到下面的错误：</p>

<pre><code class="java">java.lang.IllegalStateException: Could not find a method 
   ➥ myClickHandler(View) in the activity class org.lenciel.android.AMPSampleActivity for onClick handler on 
   ➥ view class org.lenciel.android.MyButton
</code></pre>

<p>去查看<code>usage.txt</code>你会发现<code>myClickHandler</code>又被干掉了。为什么在第一条规则里面我们告诉ProGuard不要动<code>AMPSampleActivity</code>里面的任何东西，还是会有这种情况发生？这是使用<code>-keep</code>的一个常见的误会。我们用<code>-keep</code>告诉ProGuard保留一个类的时候，没有提供任何类的“body”信息的话，ProGuard仅仅会保留这个类的名字。它仍然会对这个类内部的所有东西进行优化和混淆。要保留方法，我们需要这么写：</p>

<pre><code class="java">-keep public class * extends android.app.Activity { 
    methods; 
}
</code></pre>

<p>但是这样写显然又太过于慷慨了。下面这条规则会好很多：</p>

<pre><code class="java">-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View); 
}
</code></pre>

<p>这条规则告诉ProGuard，如果一个<code>Activity</code>在<code>shrink</code>阶段没有被去掉，那么就保留那些<code>public</code>的，没有返回值的，传入了<code>android.view.View</code>作为参数的方法。</p>

<p>可以看到，使用ProGuard存在一个不断调优的过程。他山之石，可以攻玉，已经有很多人使用ProGuard来优化Android程序了，于是也有了一些被普遍采用的规则和选项，我们下面来个简单说明。</p>

<a name="L....................."></a>
<h4>常用规则和选项</h4>

<p>前面看到的规则对于例子程序就足够了。但是如果我们的程序使用了<code>Service</code>怎么办？和<code>Activity</code>一样，<code>Service</code>也是在manifest xml里面定义的，因此我们需要对<code>proguard.cfg</code>做一定的扩展。</p>

<p>下面的规则是针对Android程序一般来说都比较有效的。</p>

<p>一般来说，下面的Android framework class都是需要保留的：</p>

<pre><code class="java">-keep public class * extends android.app.Activity 
-keep public class * extends android.app.Application 
-keep public class * extends android.app.Service 
-keep public class * extends android.content.BroadcastReceiver 
-keep public class * extends android.content.ContentProvider 
-keep public class * extends android.app.backup.BackupAgentHelper 
-keep public class * extends android.preference.Preference 
-keep public class com.android.vending.licensing.ILicensingService
</code></pre>

<p>虽然你的程序可能一开始没有使用其中的一些类，但是定义好全部这些规则也是有好处的：它可以避免你在使用ProGuard编出的版本crash之后去搞半天才发现有某个类似的规则需要更新但是你忘记了。</p>

<p>第二个有用的规则是保留<code>static</code>的<code>CREATOR</code>域，这个是Android用来parcel对象的。这个域由于是在运行的时候<a href="http://www.google.com.hk/url?sa=t&rct=j&q=introspection&source=web&cd=2&ved=0CDYQFjAB&url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIntrospection&ei=_JhDT-6ADIGtiQfF46TMBA&usg=AFQjCNEEE1rrErPfi38AVCPjdN6ri-qROA" target="_blank">Instrospection</a>的，所以ProGuard会认为它是无用的域并把它去掉。下面这条rule可以防止这样的事情发生：</p>

<pre><code class="java">-keepclassmembers class * implements android.os.Parcelable {
    static android.os.Parcelable$Creator CREATOR; 
}
</code></pre>

<p>在程序中如果你调用了native的code，比如你用JNI来调用了c的lib，由于在Java代码里面是一份方法的签名，而没有方法的实现，它必须被链接到native code上。这也就意味着这些函数名不能被ProGuard加以混淆了，不然链接的过程就会失败。下面的规则可以保证ProGuard不去动native的方法名：</p>

<pre><code class="java">-keepclasseswithmembernames class * { 
     native methods; 
}
</code></pre>

<p>我们这里使用的<code>-keepclasseswithmembernames</code>是告诉ProGuard，被调用过的方法留着，没有调用过的都去掉。</p>

<p>前面的规则看起来都一目了然。下面这个可能要费解一些：</p>

<pre><code class="java">-keepclassmembers enum * {   
     public static **[] values(); 
     public static ** valueOf(java.lang.String); 
}
</code></pre>

<p>这个规则是让ProGuard不要去动任何<code>Enum</code>的<code>values</code>和<code>valueOf</code>方法。这些方法之所以特殊是因为Java自己是通过发射机制来调用它们的。这可能也是Google<a href="https://developer.android.com/guide/practices/design/performance.html#avoid_enums" target="_blank">不建议使用</a>Java enum的原因吧：它们比<code>final class fields</code>的性能要低不少。如果你已经遵照Google的教诲停止使用<code>Enum</code>，那你也不需要这条规则了，恭喜。</p>

<p>下面来看看常用的选项：</p>

<pre><code class="java">-dontusemixedcaseclassnames 
-dontskipnonpubliclibraryclasses 
-dontpreverify 
-verbose
</code></pre>

<p>第一个选项可以避免像Windows这样不区分大小写的操作系统不会因为类似<code>A.class</code>和<code>a.class</code>写到同一个文件里面就驾崩。</p>

<p>第二个选项是因为ProGuard默认不会处理任何非public的类。但是有时候我们会遇到public的类继承自内部的非public的类。所以打开这个选项可以更好的覆盖。</p>

<p>第三个选项是告诉ProGuard不要做<code>preverify</code>（预检验），因为这个只对J2ME或者是Java6的平台有用。</p>

<p>最后一个选项，你们懂的。</p>

<p>前面我们提到过ProGuard有一个优化代码（optimize）的过程。大多数时候ProGuard都会火力全开的对所有的代码做优化。这些优化操作有些时候是相当aggressive的，比如合并类的时候ProGuard会试着既从纵向上合并也从横向上合并，以便得到尽量少的类文件，也就可以得到尽量小的APK。同时它还会试着优化循环和代数运算。默认的ADT生成的ProGuard选项关掉了很多的优化选项：</p>

<pre><code class="java">-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
</code></pre>

<p>Google并没有提供他们这么配置的依据。我们可以试着先禁用这个选项，看看程序运行起来会不会有问题。如果遇到了问题再试着慢慢的减弱优化，来“探底”。</p>

<p>同时ProGuard的优化是可以“递归”的，也就是优化完的结果可以作为下次优化的输入继续优化。你可以指定它反复进行多少次。但ProGuard如果发现已经没有什么可以优化，会自动停下来，不一定跑到你指定的次数。一般设置成5就够了：</p>

<pre><code class="java">-optimizationpasses 5
</code></pre>

<a name="L.........................................."></a>
<h4>如果处理混淆后版本的错误报告</h4>

<p>如果你发布了混淆的版本，有一个问题你就得面对：用户提交的问题单里面产生自这些类和方法都完全打乱过后的版本。为了展示这种问题，在Demo程序里面专门加了这么一个类：</p>

<pre><code class="java">public class Bomb {
    public void explode() {
        throw new RuntimeException("Boom!");
    }
}
</code></pre>

<p>在onCreate方法里面它会被引爆：</p>

<pre><code class="java">public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    String toast = StringUtils.repeat("Hello ProGuard! ", 3);
    Toast.makeText(this, toast, Toast.LENGTH_SHORT).show();
    new Bomb().explode();
}
</code></pre>

<p>如果你运行程序，就会看到下面的错误：</p>

<pre><code class="java">java.lang.RuntimeException: Unable to start activity ...MainActivity}: 
java.lang.RuntimeException: Boom!
...
Caused by: java.lang.RuntimeException: Boom!
   at org.lenciel.android.MainActivity.onCreate(Unknown Source)
   at android.app.Instrumentation.callActivityOnCreate(
   ➥ Instrumentation.java:1047)
   at android.app.ActivityThread.performLaunchActivity(
   ➥ ActivityThread.java:2627)
   ... 11 more
</code></pre>

<p>可以看到在错误出现位置的stack trace既没有行号也没有文件名。这是因为相关的信息都被ProGuard优化掉了。如果我们想避免这种情况，就要在<code>proguard.cfg</code>里面加上下面的选项：</p>

<pre><code class="bash">-keepattributes SourceFile,LineNumberTable
</code></pre>

<p>显然，有了行号和文件名，还是解决不了方法被混淆的问题。我们这个例子程序里面方法很少，而<code>onCreate</code>方法因为是<code>Override</code>的，所以ProGuard不会去动它。如果是正式的工程，最好的办法还是用<code>retrace</code>工具来根据<code>mapping.txt</code>还原整个日志。</p>

<pre><code class="bash">$ retrace proguard/mapping.txt stacktrace.txt
</code></pre>
]]></content>
  </entry>
  
</feed>
