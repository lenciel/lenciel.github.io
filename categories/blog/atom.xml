<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/blog/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-05-04T17:08:15+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[从Octopress转到纯Jekyll]]></title>
    <link href="http://lenciel.com/2017/03/migrating-from-octopress-to-jekyll/"/>
    <updated>2017-03-14T13:45:00+08:00</updated>
    <id>http://lenciel.com/2017/03/migrating-from-octopress-to-jekyll</id>
    <content type="html"><![CDATA[<p>离开Wordpress<a href="http://lenciel.com/2013/03/blog-with-octopress-and-github-pages/">改用Octopress</a>写blog已经好些年了，本座甚至还写了一个自己的<a href="https://github.com/lenciel/octopress-theme-lenciel">Octopress模板</a>。之所以要迁移主要是Octopress作为以Jekyll为基础的一套脚手架，自2011年发布以后进展非常缓慢，和Jekyll的快速更新很难对齐。</p>

<p>在近期跳票多次的<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">Octopress3</a>终于发布了之后，看了一下没有什么值得迁移的新功能。所以不管是从功能、性能还是开发活跃度上，继续跟Octopress都不太明智，就决定转用纯Jekyll。</p>

<p>迁移过程还算比较平滑，主要是：</p>

<ul>
<li>Blog项目的迁移</li>
<li>模板项目的迁移</li>
</ul>


<a name="Blog..............."></a>
<h2>Blog项目的迁移</h2>

<p>本座主要的开发栈不是ruby，所以那套东西都放docker。配置好gem的镜像，安装最新的jekyll之后，创建一个干净的静态网站：</p>

<pre><code class="bash">$ gem install jekyll
$ jekyll new my-site &amp;&amp; cd my-site
</code></pre>

<p>然后把blog的源文件以及一些静态文件放到对应的目录，然后按照新老项目的<code>_config.yml</code>文件内容，挨个的排查之前的插件和配置情况。</p>

<p>比如之前Octopress因为有自己的代码高亮和引用插件，你的日志里面可能有<code>codeblock</code>这样的不是默认支持的tag，在<code>jekyll build</code>过程中导致构建失败。</p>

<p>要解决这种问题有两个思路：</p>

<ol>
<li>把Octopress的插件移植一遍</li>
<li>把日志改成使用默认支持的语法</li>
</ol>


<p>实际过程里面本座的做法大概是一半一半。比如像插入gist，blockquote这些现在默认也支持得挺好的功能插件，就去掉了它们，然后通过正则表达式对<code>_posts</code>目录下的文章进行全局替换。</p>

<p>而有些个人觉得Octopress确实解决得不错的功能，就按照<a href="https://jekyllrb.com/docs/plugins/">新版Jekyll插件</a>的语法进行了迁移，这部分包括对日期的处理，图片的插入等等。</p>

<p>这些大体修改完毕，然后安装相应的依赖（可以对比新旧的Gemfile，只需要安装自己的插件用到的依赖），这部分改动就大概完成了。</p>

<a name="L....................."></a>
<h2>模板项目的迁移</h2>

<p>因为Jekyll自己的模板是基于gem-based的，也就是说你首先得新建一个gem-based的项目：</p>

<ol>
<li>注册<a href="https://rubygems.org">rubygems</a>的账号</li>
<li>新建项目，并按照gem的方式组织代码并发布模板</li>
<li>在Blog项目的<code>_config.yml</code>里面引用这个模板</li>
</ol>


<p>最终的工作就是我又多了一个gem-based的<a href="https://github.com/lenciel/jekyll-lenciel-theme">Jekyll模板项目</a>。</p>

<p>这部分要特别注意的就是Jekyll的模板项目默认能够发布的目录（也就是包含在gemfile里面，能够被你的Blog项目在安装路径找到的目录）非常有限：</p>

<blockquote><p>Jekyll will look first to your site’s content before looking to the theme’s defaults for any requested file in the following folders:</p>

<p>/assets
/<em>layouts
/</em>includes
/_sass</p></blockquote>

<p>如果你有很多其他目录希望一起发布，可以修改<code>gemspec</code>里面的相关选项：</p>

<pre><code class="ruby">spec.files = `git ls-files -z`.split("\x0").select { |f| f.match(%r{^(assets|_layouts|_includes|_sass|LICENSE|README|index)}i) }
</code></pre>

<p>还有一点就是这种发布和安装模板的方式，会破坏很多对静态资源的处理流程（如果有的话）。</p>

<p>比如我自己会对图片自动压缩，对css/js文件进行合并和uglify等等。这些工作的目标文件因为很多都在gem安装的模板里面，会变得比较tricky。最终本座只好对<code>jekyll build</code>之后的<code>_site</code>目录下的部署目标文件进行处理。</p>

<a name="L......"></a>
<h2>其他</h2>

<p>虽然放弃了Octopress，但并不是说Octopress是个失败的项目。一方面，它的完成度很高，如果你不是有本座一些龟毛的要求（要自己搞模板，要对静态文件做优化，要支持各种国内才需要支持的定制），已经够用。作者一个人要跟上Jekyll一个社区的开发速度，本来就很难，是属于可以理解的不足。并且，通过看它的插件源代码，对我自己的模板实现也起到了很大帮助。</p>

<p>所以，感谢Octopress引进门，用了它，折腾Jekyll就容易多了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog with Octopress and Github pages]]></title>
    <link href="http://lenciel.com/2013/03/blog-with-octopress-and-github-pages/"/>
    <updated>2013-03-10T22:15:00+08:00</updated>
    <id>http://lenciel.com/2013/03/blog-with-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p>不知不觉，写blog好像从有电脑的人都要干的事情变成很小众的活动了。除了人到了一定年纪都会不愿意开口讲话之外，本座觉得还有个很大的原因就是：要找一个靠谱的blog服务商是非常麻烦的。岂止是是blog服务商，在天朝使用大多数web服务都很吊诡地只有两个选择：</p>

<ul>
<li>没有被墙但很糟的；</li>
<li>很不错但被墙了的；</li>
</ul>


<p>所以虽然知道<a href="http://github.com">Github</a>可以免费host任何静态页面很久了，眼看着<a href="http://octopress.org/">Octopress</a>也日益成熟，但一直都下定决心去试：谁知道哪天Github又被墙了呢？</p>

<p>不过，在最近自己的职业生涯发生了不小的变化，在可预见的未来，肯定要做很多跟code有关的笔记。<a href="http://lenciel.com">现在的blog</a>系统是wordpress，虽然非常好用，但是比起markdown来说，写起code来速度就差太多了。所以今天下定决心试了一把Octopress+Github Pages，效果非常满意，特别记录一下过程，像大家做个推荐。</p>

<a name="Jekyll.amp.Octopress"></a>
<h2>Jekyll&amp;Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a>是在<a href="https://github.com/mojombo/jekyll">Jekyll</a>基础上进行的开发。<a href="https://github.com/mojombo/jekyll">Jekyll</a>作为Ruby开发的静态页面blog系统，吸引本座的地方在于：</p>

<ul>
<li><strong>静态页面</strong>：由于Jekyll生成的都是静态页面，意味着这些页面可以在任何地方被host，比如Github Pages，Google Drive甚至是Dropbox都可以作为选择（当然它们也基本是被墙的）。</li>
<li><strong>Markdown</strong>：Jekyll的日志因为是用Markdown写的，相比传统的Blog系统如Wordpress而言，一方面在写的时候可以用你顺手的编辑器，另一方面储存和版本管理也方便得多。</li>
<li><strong>代码插入方便美观</strong>：Octopress对日志中嵌入代码提供了<a href="http://octopress.org/docs/blogging/code/">各种方便</a>。</li>
</ul>


<a name="Mac........................"></a>
<h2>Mac下的安装设置过程</h2>

<a name="Xcode"></a>
<h3>Xcode</h3>

<ul>
<li>升级Xcode</li>
<li>启动Xcode，在Preferences里面选择下载</li>
<li>安装"Command Line Tools"</li>
</ul>


<a name="Homebrew"></a>
<h3>Homebrew</h3>

<pre><code class="bash">brew update
brew outdated|xargs brew install
brew tap homebrew/dupes
brew install apple-gcc42 git
brew upgrade
</code></pre>

<a name="rbenv"></a>
<h3>rbenv</h3>

<p>首先如果你本来是用rvm，需要删除：</p>

<pre><code class="ruby">rvm implode
</code></pre>

<p>然后安装rbenv以及Ruby1.9.3-p194:</p>

<pre><code class="bash">brew install rbenv
brew install ruby-build
eval "$(rbenv init -)"
rbenv install 1.9.3-p194
rbenv global 1.9.3-p194
</code></pre>

<p>安装完毕之后需要在你的环境变量中做一些设置，比如本座用的是oh-my-zsh，就需要在<code>~/.zshrc</code>里面加上：</p>

<pre><code class="bash">export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
# required for https://github.com/imathis/octopress/issues/144
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
</code></pre>

<p>注意在环境变量设置完毕之后，最好把<code>$PATH</code>打出来看看，确保没有其他版本的Ruby被启用了，特别要注意<code>/Users/***/.gem/ruby/***/bin</code>这样的路径。</p>

<a name="L......Octopress"></a>
<h2>安装Octopress</h2>

<p>首选在Github上创建一个repo来放blog，命名规则是username.github.com（比如本座的就是lenciel.github.com）。</p>

<p>然后在本地建立一个repo把octopress弄下来：</p>

<pre><code class="bash">git clone git://github.com/imathis/octopress.git lenciel.github.com
cd lenciel.github.com
ruby --version # should read ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin12.2.0]
gem install bundler
rbenv rehash
</code></pre>

<p>然后部署到刚才申请的repo上面去。虽然<a href="http://pages.github.com/">Github Pages</a>自己有个废柴说明页面，但是看完之后一般你是不知道如何算是部署成功的。好在Octopress已经内建了交互式的配置和部署的命令：</p>

<pre><code class="ruby">rake setup_github_pages
# Example repo url: git@github.com:lenciel/lenciel.github.com
rake install
rake generate &amp;&amp; rake deploy
</code></pre>

<p>然后你需要调整一下<code>.git/config</code>文件把自己的项目设置成新的origin：</p>

<pre><code>[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  ignorecase = true
[remote "origin"]
  fetch = +refs/heads/*:refs/remotes/origin/*
  url = git@github.com:lenciel/lenciel.github.com
[remote "octopress"]
  url = git://github.com/imathis/octopress.git
  fetch = +refs/heads/*:refs/remotes/octopress/*
[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></pre>

<p>这样一来，你就即可以从<code>octopress/master</code>取到更新，又可以往<code>origin/master</code>去push自己最新的日志了。</p>

<a name="L......Octopress"></a>
<h2>使用Octopress</h2>

<a name="L............"></a>
<h3>新建文章</h3>

<pre><code class="">rake new_post\["Blog with Octopress and Github Pages"\]
</code></pre>

<p>这里要注意使用zsh的时候，对<code>[]</code>要转义成<code>\[\]</code>不然会报错。</p>

<a name="L............"></a>
<h3>编辑文章</h3>

<pre><code>subl source/_posts/2013-03-10-blog-with-octopress-and-github-pages.markdown
</code></pre>

<p>subl是本座在mac上使用的编辑器<code>Sublime Text 2</code>的命令行命令，它的markdown插件<code>Markdown Editing</code>和<code>OmniMarkupPreview</code>非常好用。</p>

<a name="Markdown.Editing"></a>
<h4>Markdown Editing</h4>

<p><a href="http://ttscoff.github.com/MarkdownEditing/">Markdown Editing</a>对语法高亮，粘贴超链接，样式化，加footnote等都做了很好的支持：</p>

<p><img src="/downloads/images/sublime_with_markdown_editing.png" title="Don't touch me..." alt="Sublime with Markdown Editing" /></p>

<a name="OmniMarkupPreview"></a>
<h4>OmniMarkupPreview</h4>

<p>OmniMarkupPreview支持<code>Cmd+Alt+O</code>在你指定的浏览器里面预览并且动态刷新你正在编辑的Markup文档。这样你就可以不用不停的<code>rake preview</code>了。</p>

<a name="L......"></a>
<h3>更多</h3>

<ul>
<li><a href="http://octopress.org/docs/">Octopress官方文档</a></li>
<li><a href="http://daringfireball.net/projects/markdown/">Markdown语法ref</a></li>
<li><a href="https://github.com/imathis/octopress/issues/701#issuecomment-7664070">如何使用repo里面的图片</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
