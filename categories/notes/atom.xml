<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/notes/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-04-01T18:13:22+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Sam Altman给创业者的建议]]></title>
    <link href="http://lenciel.com/2015/02/startup-advices-from-sam-altman/"/>
    <updated>2015-02-22T22:22:00+08:00</updated>
    <id>http://lenciel.com/2015/02/startup-advices-from-sam-altman</id>
    <content type="html"><![CDATA[<p>去年创业界的一大盛事就是YC的CEO，斯坦福的退学生<a href="http://blog.samaltman.com/">Sam Altman</a>联手斯坦福大学，开设了课程CS183B：<a href="http://startupclass.samaltman.com/">How To Start A Startup</a>。十周共20节课程请来了各路顶尖人才，从创意、产品、团队和执行这四个YC认为创业最关键的维度分享了如何进行创业。</p>

<p>如果你自己是创业者，个人建议是整个课程可以好好看一遍，反正就算你不会翻墙，因为YC巨大的号召力，国内也有人为这个课程专门做了<a href="http://startupclass.club/">镜像网站</a>并配了字幕。</p>

<p>如果你是蠢蠢欲动想要创业的人，不妨看看Sam Altman给出的这个课程的简化提纲，看看自己是不是适合这样的生活：</p>

<ul>
<li>创业应当从创意和想法开始，而不是一来就开一家公司。当创业还只是围绕一个创意或者一个项目的实现时，承受的压力会小很多，就更愿意接受那些看上去稀奇古怪但实则能量巨大的想法。就算非要开公司，最好的思路也是去集合各式各样好玩的想法并实施。</li>
<li>而与之相反，当你拥有了一家公司的时候，你会面临压力，从而导致对各种各样的想法产生过快的判断。而如果只是一个项目，你就可以花更多时间去确定它是不是真的是一个好的方向：这其实是非常重要的工作，因为创业真正开始之后，你将花费非常多的时间和精力投入到这个方向。</li>
<li>团队中，至少有一个技术合伙人（这个人能从技术角度去帮助实现公司希望拥有的任何产品）</li>
<li>通常来说，选择一个高增长市场远比选择一个份额巨大但增长缓慢的市场要好。特别是如果你发现的高增长市场正好是其他人忽视的。</li>
<li>最好的创业想法是那些看起来很糟但其实非常好的想法（你得具有非凡的信心和判断力）。</li>
<li>去创造直击人性的事物。即便是在其他点上都输得一塌糊涂，但只要做到这点就够了。另一方面，如果做不到这点，其他所有的点都非常出彩也都无济于事。</li>
<li>一旦将创业从“好玩的项目”切换成为公司运作，请果断而且迅速的行动。这时候，不能再花费数周做一项决定，而需要迅速试错：思考一个小时，在下一个小时就得到结果。</li>
<li>让自己变得强大，而且强硬。前进的道路会充满艰辛，即便你自己也会一次又一次的怀疑自己。</li>
<li>找到办法让自己的产品被它们的用户触碰到。一开始即便是靠人力也要做到这点（推荐阅读：<a href="http://www.paulgraham.com/ds.html">this</a>）。</li>
<li>倾听用户的声音，改善产品，然后继续倾听，直到一些用户开始爱上了你的产品（这时候，最好是一小撮，而不是一大群）。而且，请不要在用户是否喜欢你的产品这件事情上欺骗自己。</li>
<li>尽可能的降低你的资源消耗速度，直到你确定你的产品已经捕获了部分用户的芳心，而降低消耗的最简单的方法就是缓慢增加招聘。</li>
<li>规划商业策略，大多数人并没有这样做。然后，偶尔从另一个角度思考一下，如何抵抗自己制定的商业策略。请记住，在未来的某一天你会需要并且成为垄断者的 (in the Peter Thiel sense)。</li>
<li>在融资前一定读读<a href="Read%20this%20before%20you%20raise%20money:%20http://paulgraham.com/fr.html">这个</a></li>
<li>忽略媒体的报道，特别是那些称赞的报道。</li>
<li>在公司的早期就一定要盈利。</li>
<li>尽可能去雇佣那些最好的员工，无论你花费多少时间去寻找他们，都不过分。多给你的员工一些股份，提升他们的期望。聪明、高效的人总是渴望成功的。（推荐阅读：<a href="http://blog.samaltman.com/how-to-hire">this</a>）</li>
<li>当你发现自己雇佣了错误的员工之后，请迅速开除他。</li>
<li>不要和那些你合作起来感觉不那么良好的员工（甚至是合伙人）、伙伴、投资者一起共事。</li>
<li>尝试去摸索规模化获取用户的方法，这时候你需要做的是硬着头皮去学习销售和市场营销工作。顺道说一句，通过花费超过用户价值的价格去获取用户虽然在时下很流行，但请记住，这并不可取。</li>
<li>持续关注用户的增长速度，别停下来，这是衡量一个公司CEO是否合格的最好策略。如果你偶然发现自己说出了“我们的目标不是用户增长”这样的话，请仔细反省一下，自己是否把时间花费在了其他错误的事情上？当然，也记得别让自己被那些虚荣的指标欺骗。</li>
<li>一个成熟创业公司的状态是：公司每个人都能全身心投入到分配给自己的任务当中。这种投入对于几个创始人来说更是至关重要。创业圈里面流行的关于“传教士与雇佣兵”的区别的确存在，而且非常明显。</li>
<li>不要在那些无所谓的事情上浪费时间（这些事不包括产品开发、与用户沟通以及用户增长等，它们都很重要）。比如，沉溺于讲述如何创业的电影或者书籍，与律师或会计开会，参加各式虚张声势的推广会议等。</li>
<li>相反，请将精力放在那些重要的事情上。每天找出两三件最重要的事，这时候变身成为一个工作机器，专注其中，忽略任何外部的干扰。</li>
<li>不要找任何借口，做需要被做的事情。</li>
<li>学习对团队的管理，让小伙伴们都开开心心的。千万别忽略了这点，真的非常重要。</li>
<li>除开创造一个伟大的产品，如果想真正成功，还需要创造一个伟大的公司，所以多花点时间去思考公司文化。</li>
<li>不要小看人脉关系的重要性。</li>
<li>在你真的确定想卖掉自己的心血之前，忽略那些收购意向。事实上，如果一些公司能够避免类似失误，他们也许已经非常成功了。不幸的是，它们过早被收购导致了关门。</li>
<li>努力工作，这是成功的不二法门。虽然每个人都希望走捷径，但目前看来尚未出现。</li>
<li>保持这种状态工作十年。</li>
</ul>


<p>个人觉得，说得非常实诚，真正在花心思做自己的产品的公司肯定能收益良多。当然，最后那句也是最关键的一句：毕竟是九死一生的创业嘛，回档再多次也是正常&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uWSGI, Gunincorn, 啥玩意儿?]]></title>
    <link href="http://lenciel.com/2013/08/why-you-need-something-like-gunicorn/"/>
    <updated>2013-08-01T14:36:00+08:00</updated>
    <id>http://lenciel.com/2013/08/why-you-need-something-like-gunicorn</id>
    <content type="html"><![CDATA[<p>因为nginx等优秀的开源项目，有不少本来不是做服务器的同学也可以写很多服务器端的程序了。但是在聊天中会发现，大家虽然写了不少代码，但是对wsgi是什么，gunicorn是什么，反向代理又是什么并不了解，也就是说对基本概念并没有一个全局的了解。</p>

<a name="L........."></a>
<h3>服务器</h3>

<p>到了服务器组你会发现原来有各种各样的服务器，那些叫法很多是有历史沉淀的，不需要太深究能对上号就行，因为本来也是乱七八糟的。</p>

<a name="HTTP........."></a>
<h4>HTTP服务器</h4>

<p>如果网站是HTML/CSS/JS（不包括node.js这种<a href="http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions">SSJS</a>）组成的，那么这是一个静态的网站。</p>

<p>用户访问这个网站的时候，HTTP请求被浏览器发送，经过DNS等被送到网站的服务器。服务器处理HTTP请求，将浏览器能够处理的响应返回给用户的浏览器。所以这个场景下的服务器一般被称为HTTP服务器，常见的有Apache的httpd和Nginx。</p>

<a name="Application........."></a>
<h4>Application服务器</h4>

<p>如果你的网站是动态的，比如是用Django写的。</p>

<p>那么客户端上来的请求要能够被Djano的Application处理。WSGI就是这样的<a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">一个协议</a>：它是一个Python程序和用户请求之间的接口。WSGI服务器的作用就是接受并分析用户的请求，调用相应的python对象完成对请求的处理，然后返回相应的结果。</p>

<p>WSGI服务器的选择很多，包括uWSGI和gunicorn。它们都可以处理所有的请求，包括确实应该由python对象处理的，也包括不该python对象处理的，比如静态的图像，css，js等文件。所以理论上你可以把整个动态网站都用WSGI服务器承载起来，也就是整个应用完全跑在Application服务器上。</p>

<a name="L..............."></a>
<h4>代理服务器</h4>

<p>代理无非是A来做B干的事情。在服务器语境下，代理就是一台服务器干另外一台服务器的事情。这个是平常不会有很多人聊到的，多说两句。</p>

<a name="L....................."></a>
<h5>前向代理服务器</h5>

<p>大多数的代理都是前向代理。假设网络上有三台机器:</p>

<ul>
<li>X：你的电脑</li>
<li>Y：代理服务器，proxy.eg.org</li>
<li>Z：你实际想访问的服务器，www.eg.org</li>
</ul>


<p>没有代理的情况下，访问是 <code>X---&gt;Z</code>，但是在某些情况下，访问者会先让代理服务器从实际放内容的服务器把数据取回来，也就是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>这里说的某些情况下典型的包括（作为天朝网民你居然没有领悟我很失望）：</p>

<p>X的网络管理员封了Z</p>

<ul>
<li>Z可能是一个臭名昭著的病毒网站：<code>familypostcard2008.com</code>等</li>
<li>Z可能是一个让你上班精力分散的网站：<code>Facebook.com</code>等</li>
<li>Z可能是一个让你明白真相的网站：Hmmmm</li>
</ul>


<p>Z的网络管理员封了X</p>

<ul>
<li>Z可能是一个论坛或者blog什么的，X在对它进行扫描</li>
</ul>


<a name="L....................."></a>
<h5>反向代理服务器</h5>

<p>没有代理的情况下，访问仍然是 <code>X---&gt;Z</code>，但是在某些情况下，Z的管理者决定限制资源被直接访问。用户必须现在Y上做访问，Y再访问Z。整个流程是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>没错，细心的你注意到了，前向和反向代理服务器的流程都是<code>X--&gt;Y--&gt;Z</code>。没办法，代理就是这么个意思。它们两者的核心区别在于，用户对反向代理服务器的存在是无感的。换句话说，X不需要做特别的配置甚至不需要察觉Y的存在，就可以使用Y这个反向代理。这种请求方无感而被请求方反过来提供代理服务就是“反向”的意义所在。</p>

<p>使用反向代理的典型场景当然是Z希望所有发给自己特定请求都从Y过一遍：</p>

<ol>
<li>Z可能是一个超大的网站，每天有全世界各地的用户在访问。于是Z搭建了一个反向代理，把某个地域的用户的访问导入到离他最近的服务器上去处理。没有错，这就是CDN。</li>
<li>Z可能是一个坏坏的网站。它的拥有者希望把坏坏的数据放到特定的服务器，然后核心数据放到别的服务器。比如黄色网站，一般那些色情的内容放在一些专门的服务器上，即使被查封，也不会对其业务产生决定性的影响。</li>
</ol>


<p>继续我们前面的例子，很快你会发现uWSGI等应用服务器处理静态文件的请求的performance很废材，于是开始寻找直接用nginx来处理静态内容的办法。那么你就需要区分哪些请求是请求的静态页面，哪些是请求的动态内容。</p>

<p>然后你就会发现，原来nginx不止是一个HTTP服务器，它还是一个<a href="http://en.wikipedia.org/wiki/Reverse_proxy">反向代理服务器</a>：它可以把请求重定向到uWSGI或者任何别的服务器，然后把下游服务器的响应集成再返回给用户。于是你就可以配置对静态内容的请求直接在nginx完成，而动态内容的请求发送给uWSGI服务器。</p>

<a name="L....................."></a>
<h4>负载均衡服务器</h4>

<p>在我自己的心中，负责均衡服务器不过是反向代理的一种（你看CDN我也觉得是反向代理的一种），但是很多地方这种服务器是被拿出来专门讨论的。</p>

<p>随着你的网站访问量不断增大，你用一个nginx集中所有的请求再分发就显得性能不够了。这个时候你可以配置专门用于进行请求分发处理的负载均衡服务器，比如<a href="http://haproxy.1wt.eu/">HAProxy</a>，而负载均衡服务器背后是集群。</p>

<a name="L..............."></a>
<h4>缓存服务器</h4>

<p>随着网站访问量的继续增大，你的VPS流量又扛不住了。你调查发现有一些多媒体文件被经常请求，这个时候你部署了缓存服务器。</p>

<p>&ldquo;缓存"这个经常被提到的术语，核心就是把常用的信息放在一个读取成本很低地方(比如内存中或者是虚拟内存中），从而避免每次查找它的时候昂贵的操作。比如HTTP缓存解决的是在服务器上找信息的过程，而Redis或者Memcached这些缓存则是解决在数据库里面找信息的过程。</p>

<a name="L...........................uwsgi......gunicorn."></a>
<h3>那，我们为什么需要uwsgi或者gunicorn?</h3>

<p>一句话：因为你需要有东西在服务器上运行Python，但是Python不是处理所有的请求都很强。</p>

<p>那么是选uWSGI还是Gunicorn？我觉得都可以，还是那句老话，不是它们好不好的问题，是你够不够好的问题，毕竟代码都摆在那里的。</p>

<p>不过Gunicorn可以多说几句。它的崛起在我看来是有时代背景的：在过去，我们部署一个应用的时候，几乎总是要分布在多台机器的（比如4台HTTP服务器把动态请求分发到两台Application服务器上，并且它们都访问一个数据库服务器）。但是随着机器的能力在增强，而互联网应用的覆盖面从业务逻辑极其复杂的银行业电信业到了送盒饭选泡面的小行业，越来越多的Application服务器和Web服务器合体了（以django圈子举例，有httpd+mod_wsgi或者Nginx+mod_uwsgi）。而且很多时候这种小应用的数据库也host在同一台机器上。</p>

<p>Gunicorn（从Ruby下面的Unicorn得到的启发）应运而生：依赖Nginx的代理行为，同Nginx进行功能上的分离。由于不需要直接处理用户来的请求（都被Nginx先处理），Gunicorn不需要完成相关的功能，其内部逻辑非常简单：接受从Nginx来的动态请求，处理完之后返回给Nginx，由后者返回给用户。</p>

<p>由于功能定位很明确，Gunicorn得以用纯Python开发：大大缩短了开发时间的同时，性能上也不会很掉链子。同时，它也可以配合Nginx的代理之外的别的Proxy模块工作，其配置也相应比较简单。</p>

<p>配置上的简单，大概是它流行的最大的原因。</p>

<a name="Good.Refs"></a>
<h3>Good Refs</h3>

<a name="L..........................."></a>
<h4>正向代理服务器软件</h4>

<ul>
<li><a href="http://www.jmarshall.com/tools/cgiproxy/">cgi-proxy</a></li>
<li><a href="http://sourceforge.net/projects/poxy">phproxy</a> (中断了)</li>
<li><a href="http://www.glype.com/">glype</a></li>
<li><a href="http://en.cship.org/wiki/Category%3aWebproxy">Internet censorship wiki: List of Web Proxies</a></li>
</ul>


<a name="L..........................."></a>
<h4>反向代理服务器软件</h4>

<ul>
<li><a href="http://wiki.apache.org/cocoon/ApacheModProxy">apache mod_proxy</a></li>
<li><a href="http://www.squid-cache.org/">squid</a></li>
<li><a href="http://nginx.net/">HAProxy</a></li>
<li><a href="http://www.danga.com/perlbal/">perlbal</a></li>
<li><a href="http://portfusion.sf.net/">portfusion</a></li>
<li><a href="http://www.apsis.ch/pound/">pound</a></li>
</ul>


<a name="TCP................................."></a>
<h4>TCP上的反向代理服务器软件</h4>

<ul>
<li><a href="http://www.inlab.de/balance.html">balance</a></li>
<li><a href="http://www.delegate.org/delegate/nvproxy/">delegate</a></li>
<li><a href="http://siag.nu/pen/">pen</a></li>
<li><a href="http://portfusion.sf.net/">portfusion</a></li>
<li><a href="http://web.archive.org/web/20080113185334/http://plb.sunsite.dk/index.html">pure load balancer</a></li>
<li><a href="http://pythondirector.sourceforge.net/">python director</a></li>
</ul>


<a name="L......"></a>
<h4>其他</h4>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Content_Delivery_Network">Wikipedia - Content Delivery Network</a></li>
<li><a href="http://en.wikipedia.org/wiki/Category%3aReverse_proxy">Wikipedia - Category:Reverse_proxy</a></li>
<li><a href="http://en.wikipedia.org/wiki/Load_balancing_%28computing%29">Wikipedia - Load Balancing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scalability">Wikipedia - Scalability</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cryptography and Python]]></title>
    <link href="http://lenciel.com/2013/07/cryptography-and-python/"/>
    <updated>2013-07-25T15:13:00+08:00</updated>
    <id>http://lenciel.com/2013/07/cryptography-and-python</id>
    <content type="html"><![CDATA[<p>这周我们的一个项目里面需要调用第三方接口。对方的安全机制是调用时要进行加密和校验，但它们的文档没有描述具体是怎么加密的，而是给了一段代码：</p>

<pre><code class="java">    private static BASE64Encoder base64 = new BASE64Encoder();
//  private static byte[] myIV = { 50, 51, 52, 53, 54, 55, 56, 57 };
//  private static byte[] myIV = null;
//  private static String strkey = "W9qPIzjaVGKUp7CKRk/qpCkg/SCMkQRu"; // 字节数必须是8的倍数
    //密钥
    private static String strkey = "NDg5MDY2NjczMxxxxXXXXXyNzUzNTg2";
    private static String removeBR(String str) {
        StringBuffer sf = new StringBuffer(str);

        for (int i = 0; i &lt; sf.length(); ++i)
        {
          if (sf.charAt(i) == '\n')
          {
            sf = sf.deleteCharAt(i);
          }
        }
        for (int i = 0; i &lt; sf.length(); ++i)
        {
          if (sf.charAt(i) == '\r')
          {
            sf = sf.deleteCharAt(i);
          }
        }
        return sf.toString();
    }

    private static String desEncrypt(String input) throws Exception
    {

        BASE64Decoder base64d = new BASE64Decoder();
        DESedeKeySpec p8ksp = null;
        p8ksp = new DESedeKeySpec(base64d.decodeBuffer(strkey));
        Key key = null;
        key = SecretKeyFactory.getInstance("DESede").generateSecret(p8ksp);

        byte[] plainBytes = (byte[])null;
        Cipher cipher = null;
        byte[] cipherText = (byte[])null;
        //“算法/模式/填充”
        plainBytes = input.getBytes("UTF8");
        cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");
        SecretKeySpec myKey = new SecretKeySpec(key.getEncoded(), "DESede");
 //       IvParameterSpec ivspec = new IvParameterSpec(myIV);
        cipher.init(1, myKey);
        cipherText = cipher.doFinal(plainBytes);
        return removeBR(base64.encode(cipherText));
    }

    private static String desDecrypt(String cipherText) throws Exception
    {

        BASE64Decoder base64d = new BASE64Decoder();
        DESedeKeySpec p8ksp = null;
        p8ksp = new DESedeKeySpec(base64d.decodeBuffer(strkey));
        Key key = null;
        key = SecretKeyFactory.getInstance("DESede").generateSecret(p8ksp);

        Cipher cipher = null;
        byte[] inPut = base64d.decodeBuffer(cipherText);
        //“算法/模式/填充”
        cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");
        SecretKeySpec myKey = new SecretKeySpec(key.getEncoded(), "DESede");
 //       IvParameterSpec ivspec = new IvParameterSpec(myIV);
        cipher.init(2, myKey);
        byte[] output = cipher.doFinal(inPut);
        return new String(output, "UTF8");
    }
</code></pre>

<p>很明显，在提供文档的同学看来大家都是JEE程序员。仔细看了半天这两个函数<code>desEncrypt</code>和<code>desDecrypt</code>外加Google，才明白是<code>DES3</code>算法。</p>

<p>接着这份文档的后面还有另一个对加密的描述也是代码，不过这次比较明显是MD5：</p>

<pre><code class="java">public static final String MD5(String s)
{
  char hexDigits[] = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'a', 'b', 'c', 'd', 'e', 'f'
    };
  char str[] = null;
  byte strTemp[] = s.getBytes();
  MessageDigest mdTemp;
  try {
    mdTemp = MessageDigest.getInstance("MD5");
    mdTemp.update(strTemp);
    byte md[] = mdTemp.digest();
    int j = md.length;
    str = new char[j * 2];
    int k = 0;
    for (int i = 0; i &lt; j; i++)
    {
      byte b = md[i];
      str[k++] = hexDigits[b &gt;&gt; 4 &amp; 0xf];
      str[k++] = hexDigits[b &amp; 0xf];
    }
  } catch (NoSuchAlgorithmException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
  }

  return new String(str);
}
</code></pre>

<p>这些算法用python来实现当然就简单多了:MD5就是一句话，看起来非常复杂的DES3也不过几句话:</p>

<pre><code class="python">from pyDes import triple_des, ECB, PAD_PKCS5
import base64
import datetime

input_str = "test string"

key_base64_str = base64.b64decode("NDg5MDY2NjczMxxxxXXXXXyNzUzNTg2", "utf-8")
key_bytes = key_base64_str.encode('utf-8')
k = triple_des(key_bytes, ECB, pad=None, padmode=PAD_PKCS5)
d = base64.b64encode(k.encrypt(input_str))
print d
</code></pre>

<p>当然，要明白这些算法究竟怎么回事才叫认真负责的态度：下面这些内容主要来自<a href="http://www.laurentluce.com/posts/python-and-cryptography-with-pycrypto/">这篇文章</a></p>

<a name="L.strong.Hash..strong."></a>
<h2><strong>Hash</strong></h2>

<p>hash就是给输入的字符串生成一个固定长度的字符串（被称为hash值）。理想的hash要满足：</p>

<ul>
<li>根据生成的字符串非常难猜到输入的字符串</li>
<li>任意两个不同的字符串不会生成相同的hash值</li>
<li>如果输入字符串没有变生成的hash值应该不会变</li>
</ul>


<p><img src="/downloads/images/hash.png" title="Don't touch me..." alt="hash" /></p>

<p>hash函数可以被用来计算checksum，也可以用来进行数字签名和认证。</p>

<a name="L.strong.MD5..strong."></a>
<h3><strong>MD5</strong></h3>

<p>1991年面世的一种hash算法，生成的字符串长度为128bit。</p>

<p>它的算法详情可以看<a href="http://tools.ietf.org/html/rfc1321">这里</a>，简单说如下：</p>

<ul>
<li>首先需要对字符串进行扩展，使其位长对512求余的结果等于448。因此，位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。填充的方法一般是在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</li>
<li>然后，在这个结果后面附加一个以64位二进制表示的填充前信息长度。经过这两步的处理，现在的位长是 <code>N*512+448+64 = (N+1）*512</code>，即长度恰好是512的整数倍。</li>
<li>最后以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</li>
</ul>


<p>MD5对碰撞攻击(不同的输入生成相同的hash)等攻击的抵抗力比较差。</p>

<p>在python中使用MD5:</p>

<pre><code class="python">import os
from Crypto.Hash import MD5

def get_file_checksum(filename):
    h = MD5.new()
    chunk_size = 8192
    with open(filename, 'rb') as f:
        while True:
            chunk = f.read(chunk_size)
            if len(chunk) == 0:
                break
            h.update(chunk)
    return h.hexdigest()
</code></pre>

<a name="L.strong...............strong."></a>
<h2><strong>加密算法</strong></h2>

<p>加密算法使用key把输入的文本变成加密的文本。有两种加密的方式：分块和流。分块处理的单位是固定大小比如8或者16个bytes，流则是一个一个byte。只有知道了解密的<code>key</code>才能对加密的文本进行解密。</p>

<a name="L.em.........em."></a>
<h3><em>分块</em></h3>

<p>DES是分块加密的一种，其处理对象的大小是8个bytes。DES最简单的模式是所谓的<code>ECB( electronic code book)模式</code>，也就是每个block都是独立加密，最后组成整个加密后的文本。</p>

<p><img src="/downloads/images/block_cipher_ebc.png" title="Don't touch me..." alt="ecb" /></p>

<p>使用pycrpto对文本使用<code>DES/ECB</code>加密很简单。假设key是<code>10234567</code>，而我们要加密的文本是<code>abcdefgh</code>，那么：</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import DES
&gt;&gt;&gt; des = DES.new('01234567', DES.MODE_ECB)
&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; cipher_text = des.encrypt(text)
&gt;&gt;&gt; cipher_text
'\xec\xc2\x9e\xd9] a\xd0'
&gt;&gt;&gt; des.decrypt(cipher_text)
'abcdefgh'
</code></pre>

<p>比<code>ECB</code>更健壮的是<code>CFB (Cipher feedback)</code>模式，也就是先组合前面加密的文本和待加密的文本，然后进行加密。</p>

<p><img src="/downloads/images/block_cipher_cfb.png" title="Don't touch me..." alt="cfb" /></p>

<p>下面的例子说明了算法的工作流程：待加密的是<code>abcdefghijklmnop</code>，两倍8bytes。首先生成一个随机的字符串作为初始的<code>iv</code>来生成两个<code>DES</code>对象，一个用来加密一个用来解密。之所以需要这两个对象，是因为<code>feedback</code>值会随着block被加密后变化。</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import DES
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; iv = Random.get_random_bytes(8)
&gt;&gt;&gt; des1 = DES.new('01234567', DES.MODE_CFB, iv)
&gt;&gt;&gt; des2 = DES.new('01234567', DES.MODE_CFB, iv)
&gt;&gt;&gt; text = 'abcdefghijklmnop'
&gt;&gt;&gt; cipher_text = des1.encrypt(text)
&gt;&gt;&gt; cipher_text
"?\\\x8e\x86\xeb\xab\x8b\x97'\xa1W\xde\x89!\xc3d"
&gt;&gt;&gt; des2.decrypt(cipher_text)
'abcdefghijklmnop'
</code></pre>

<a name="L.em......em."></a>
<h3><em>流</em></h3>

<p>这些算法基于一个个bytes，所以block的大小总是1 byte。pycrypto提供了两个这样的算法：<code>ARC4</code> 和 <code>XOR</code>。这种基于流的算法只有一种模式：<code>ECB</code>。</p>

<p>下面是一个<code>ARC4</code>的算法，使用了key <code>01234567</code>:</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Cipher import ARC4
&gt;&gt;&gt; obj1 = ARC4.new('01234567')
&gt;&gt;&gt; obj2 = ARC4.new('01234567')
&gt;&gt;&gt; text = 'abcdefghijklmnop'
&gt;&gt;&gt; cipher_text = obj1.encrypt(text)
&gt;&gt;&gt; cipher_text
'\xf0\xb7\x90{#ABXY9\xd06\x9f\xc0\x8c '
&gt;&gt;&gt; obj2.decrypt(cipher_text)
'abcdefghijklmnop'
</code></pre>

<a name="L.strong...............strong."></a>
<h3><strong>应用程序</strong></h3>

<p>在程序里面我们常常使用DES3对文件进行加密解密操作。一般来说操作对象是文件时，总是分成一个个chunck来处理以免占用太多内存。如果读入的chunck少于16bytes，就需要扩展它才能进行加密。</p>

<pre><code class="python">import os
from Crypto.Cipher import DES3

def encrypt_file(in_filename, out_filename, chunk_size, key, iv):
    des3 = DES3.new(key, DES3.MODE_CFB, iv)

    with open(in_filename, 'r') as in_file:
        with open(out_filename, 'w') as out_file:
            while True:
                chunk = in_file.read(chunk_size)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)
                out_file.write(des3.encrypt(chunk))

def decrypt_file(in_filename, out_filename, chunk_size, key, iv):
    des3 = DES3.new(key, DES3.MODE_CFB, iv)

    with open(in_filename, 'r') as in_file:
        with open(out_filename, 'w') as out_file:
            while True:
                chunk = in_file.read(chunk_size)
                if len(chunk) == 0:
                    break
                out_file.write(des3.decrypt(chunk))
</code></pre>

<p>有了上面定义的这两个函数我们可以这样使用它们：</p>

<pre><code class="python">from Crypto import Random
iv = Random.get_random_bytes(8)
with open('to_enc.txt', 'r') as f:
    print 'to_enc.txt: %s' % f.read()
encrypt_file('to_enc.txt', 'to_enc.enc', 8192, key, iv)
with open('to_enc.enc', 'r') as f:
    print 'to_enc.enc: %s' % f.read()
decrypt_file('to_enc.enc', 'to_enc.dec', 8192, key, iv)
with open('to_enc.dec', 'r') as f:
    print 'to_enc.dec: %s' % f.read()
</code></pre>

<p>程序的输出如下：</p>

<pre><code class="bash">to_enc.txt: this content needs to be encrypted.

to_enc.enc: ??~?E??.??]!=)??"t?
                                JpDw???R?UN0?=??R?UN0?}0r?FV9
to_enc.dec: this content needs to be encrypted.
</code></pre>

<a name="L.strong.Public-key.algorithms..strong."></a>
<h2><strong>Public-key algorithms</strong></h2>

<p>上面提到的加密算法的一大问题是双方都需要知道key。而<code>public-key算法</code>提供了两个key，一个用来加密，一个用来解密。</p>

<p><img src="/downloads/images/public_private_key.png" title="Don't touch me..." alt="ecb" /></p>

<a name="L.strong.public.private.key..strong."></a>
<h3><strong>public/private key</strong></h3>

<p>使用pycrpto很容易就可以生成一对<code>private/public key</code>，生成key的时候必须规定key的长度，越长越安全。除开长度，还需要设定生成key的方法。下面是一个使用RSA生成1024bit长度key的过程：</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; random_generator = Random.new().read
&gt;&gt;&gt; key = RSA.generate(1024, random_generator)
&gt;&gt;&gt; key
&lt;_RSAobj @0x7f60cf1b57e8 n(1024),e,d,p,q,u,private&gt;
</code></pre>

<p>key对象有一系列的方法：
- <code>can_encrypt()</code> 返回是否能用key来加密数据
- <code>can_sign()</code> 返回是否能用key来进行签名
- <code>has_private()</code> 返回是否有private key</p>

<pre><code class="python">&gt;&gt;&gt; key.can_encrypt()
True
&gt;&gt;&gt; key.can_sign()
True
&gt;&gt;&gt; key.has_private()
True
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>加密</strong></h3>

<p>现在我们有了一对key，我们就可以加密一些数据了。加密的时候使用的是公钥: <code>public key</code> ：</p>

<pre><code class="python">&gt;&gt;&gt; public_key = key.publickey()
&gt;&gt;&gt; enc_data = public_key.encrypt('abcdefgh', 32)
&gt;&gt;&gt; enc_data
('\x11\x86\x8b\xfa\x82\xdf\xe3sN ~@\xdbP\x85
\x93\xe6\xb9\xe9\x95I\xa7\xadQ\x08\xe5\xc8$9\x81K\xa0\xb5\xee\x1e\xb5r
\x9bH)\xd8\xeb\x03\xf3\x86\xb5\x03\xfd\x97\xe6%\x9e\xf7\x11=\xa1Y&lt;\xdc
\x94\xf0\x7f7@\x9c\x02suc\xcc\xc2j\x0c\xce\x92\x8d\xdc\x00uL\xd6.
\x84~/\xed\xd7\xc5\xbe\xd2\x98\xec\xe4\xda\xd1L\rM`\x88\x13V\xe1M\n X
\xce\x13 \xaf\x10|\x80\x0e\x14\xbc\x14\x1ec\xf6Rs\xbb\x93\x06\xbe',)
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>解密</strong></h3>

<p>只要有用于解密的私钥(private key)解密是很简单的：</p>

<pre><code class="python">&gt;&gt;&gt; key.decrypt(enc_data)
'abcdefgh'
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>签名</strong></h3>

<p>对信息进行签名，可以用来验证信息的作者，让我们相信它的来源。下面这个例子展示了如何先算出信息的hash值，然后送给RSA key的<code>sign()</code>方法。使用其他算法如<code>DSA</code>或者是<code>ElGamal</code>也类似。</p>

<pre><code class="python">&gt;&gt;&gt; from Crypto.Hash import MD5
&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; key = RSA.generate(1024, random_generator)
&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; hash = MD5.new(text).digest()
&gt;&gt;&gt; hash
'\xe8\xdc@\x81\xb144\xb4Q\x89\xa7 \xb7{h\x18'
&gt;&gt;&gt; signature = key.sign(hash, '')
&gt;&gt;&gt; signature
(1549358700992033008647390368952919655009213441715588267926189797
14352832388210003027089995136141364041133696073722879839526120115
25996986614087200336035744524518268136542404418603981729787438986
50177007820700181992412437228386361134849096112920177007759309019
6400328917297225219942913552938646767912958849053L,)
</code></pre>

<a name="L.strong.........strong."></a>
<h3><strong>验证</strong></h3>

<p>只要有公钥，验证信息就很简单了。未加密的文本和签名一起被发送给接收方。接收方计算hash值然后调用公钥的<code>verify()</code>方法来进行验证：</p>

<pre><code class="python">&gt;&gt;&gt; text = 'abcdefgh'
&gt;&gt;&gt; hash = MD5.new(text).digest()
&gt;&gt;&gt; public_key.verify(hash, signature)
True
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ideas Are Easy]]></title>
    <link href="http://lenciel.com/2013/01/ideas-are-easy/"/>
    <updated>2013-01-24T23:50:00+08:00</updated>
    <id>http://lenciel.com/2013/01/ideas-are-easy</id>
    <content type="html"><![CDATA[<p>最近做的一些事情，让本座有一些感触。昨天恰好看到Daniel Tenner的一篇文章，共鸣了3个来小时。</p>

<p>Daniel的文章主要介绍了<a href="https://twitter.com/pr1001" target="_blank">Peter Robinett</a>关于创业的一些经验分享。其中特别有趣的一点是，为什么有创业想法的人，在遇到那些很愿意创业也很有实力的开发者的时候，常常没法说服他们和自己一起创业。</p>

<p>总结一下本座自己的感受：</p>

<p><strong>1. 创业点子其实很容易有，执行力才是最困难的部分</strong></p>

<p>谁没有动过心要弄出个什么，真正要开始做，做下去，做出来，需要不断的学习，需要克服很多的困难。</p>

<p><strong>2. 在和开发者接触的时候，贡献点子的人常常严重的低估开发的工作量和复杂度</strong></p>

<p>贡献点子的人急着要可以理解，被投资人催，被做出来的兴奋驱使，被害怕别人先做出来的恐惧压迫。但是如果不正视开发需要的工作量，开发者很可能会有道不同不相与为谋的感觉，可能就会闪退。</p>

<p><strong>3. 如果不是付费开发，而是提供后期收益分成，必须要求开发者对创业点子及其商业模式有极强的信心</strong></p>

<p>如果不能得到开发者的认同，想要用较低的甚至是0的开发费用让对方加进来，Hmmmmm….</p>

<p><strong>4. 为有点子的人把东西做出来，对开发者来说比一般的拿钱干活有风险一些</strong></p>

<p>优秀的开发人员并不一定擅长所有事情，特别是沟通。我接触过大多数优秀的开发人员讨厌客户（他们说，这帮把需求改来改去的土鳖），讨厌开会（他们说，这是浪费我的时间)，讨厌文档（敏捷带来的一大好处就是可以大大方方的告诉管理人员哥不写文档）。理想的情况下，贡献点子的人需要懂技术，能够先把自己的点子咀嚼一遍，分割成细化的需求，帮开发人员把商务上的一些事情处理完毕等等。</p>

<p>一般的开发人员就比优秀的开发人员讨厌更多的事情。他们一般只负责“开发”部分，如果需要他们涉足开发外的其他领域（甚至是测试、部署或者维护），他们都会感到不适。原因呢，不得不说，大多数时候是因为他们不会。要知道，很多在公司里面很牛的开发人员，牛的都是自己所在的领域而已。</p>

<p><strong>5. 创业点子大多数都是不现实的，做过几个的开发者往往已经能看破这点</strong></p>

<p>这个黄金一般的机会，在他们眼里不是机会，那再怎么说都没有用了。不过如果你咨询的是优秀而且靠谱的开发者，被拒绝后可以回去仔细想想他说的原因，大多数时候他们说的都是有道理的。</p>

<p><strong>6. 技术很好又很愿意创业的人，很多都有自己的点子了</strong></p>

<p>这还用说吗，请参考1. 点子其实很容易有，如果你发现他的点子比你的还好，很多时候你要做的事情就是踹他一脚，让他真正开始做起来。</p>
]]></content>
  </entry>
  
</feed>
