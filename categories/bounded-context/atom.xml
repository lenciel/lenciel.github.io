<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bounded-Context | @Lenciel]]></title>
  <link href="http://lenciel.com/categories/bounded-context/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2017-05-04T17:08:15+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel]]></name>
    <email><![CDATA[lenciel@gmail.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Bounded Context]]></title>
    <link href="http://lenciel.com/2017/02/bounded-context/"/>
    <updated>2017-02-21T04:58:52+08:00</updated>
    <id>http://lenciel.com/2017/02/bounded-context</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>定义</h2>

<p>Bounded Context是领域驱动设计中战略设计的重要组成部分，一定程度上决定了系统的逻辑架构以及集成方式。</p>

<p>基于康威定律，Bounded Context的划分还可能会影响进行项目开发实施的组织的结构。</p>

<p>DDD社区将Bounded Context定义为：</p>

<blockquote><p>应该显式地定义某个模型所应用的上下文。还应该在团队组织、应用中特定部分的使用以及像代码库和数据库模式等物理表现等方面显式地设定边界。要保持边界中模型的严格一致，而不要受外界问题的影响与干扰。</p></blockquote>

<p>这段话在说的无非是“边界”，通过为领域模型划定合理的边界，就可以降低设计与开发的复杂度。此外，边界还能够划分知识的层次，例如对外而言，可以只保障暴露在边界外接口的一致性，以及关注它们之间的集成方式。边界之内则自成一体，可以独立演化，甚至可以包容一到多个遗留模块。</p>

<a name="L............"></a>
<h2>常见问题</h2>

<p>正是因为Bounded Context带来的隔离性，<a href="https://msdn.microsoft.com/en-us/magazine/jj883952.aspx">Juelin Lerman</a>才认为：“把一个将大量的类放在一个上下文中的独立模型分解为多个较小的模型是有好处的。Bounded Context创建的模型较小，而且内聚性更高，同时维持了模型之间的边界。”</p>

<p>好处听起来都是好的，但是难免会有下面这些问题：</p>

<p>如何确定或划分Bounded Context？
Bounded Context是否具有层次？
Bounded Context划分的边界是逻辑的，还是物理的？
Bounded Context之间的通信方式？</p>

<p>也难怪在文章《<a href="http://www.sapiensworks.com/blog/post/2012/04/17/DDD-The-Bounded-Context-Explained.aspx">DDD: The Bounded Context Explained</a>》中Mike要说，Bounded Context是DDD中最难解释的原则，但或许也是最重要的原则。可以说，没有BC，就不能做DDD。在了解Aggregate Root、Aggregate、Entity等概念之前，需要先了解BC。</p>

<p>Vaughn Vernon的<a href="http://book.douban.com/subject/25844633/">Implementing Domain-Driven Design</a>解释如下：</p>

<blockquote><p>Bounded Context是一个显式的边界，领域模型便存在于这个边界之内。领域模型把通用语言表达成软件模型。创建边界的原因在于，每一个模型概念，包括它的属性和操作，在边界之内都具有特殊的含义。</p></blockquote>

<p>这里是从设计原则上来规约出Bounded Context的定义：</p>

<ul>
<li>它是模型概念，与实现无关，是高层的抽象机制</li>
<li>具有自己独立的边界，是自治的，遵循高内聚、松耦合</li>
<li>不同的Bounded Context之间的关系决定它们之间的协作与通信方式</li>
<li>它与Domain应为一一对应关系</li>
<li>一个上下文意味着一个专有的职责</li>
</ul>


<a name="Reference"></a>
<h2>Reference</h2>

<ol>
<li><a href="https://martinfowler.com/bliki/BoundedContext.html">BoundedContext by Martin Fowler</a></li>
<li><a href="https://www.amazon.com/gp/product/0321834577?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321834577">Implementing Domain-Driven Design</a></li>
<li><a href="https://msdn.microsoft.com/en-us/magazine/jj883952.aspx">Shared Data Model using Bounded Context</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
